{"version":3,"file":"cljs.core.async.impl.channels.js","sources":["cljs/core/async/impl/channels.cljs"],"mappings":"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","names":["putter","seq__31832","cljs.core/seq","chunk__31833","count__31834","i__31835","temp__5457__auto__","cljs.core/chunked-seq?","c__8010__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","f","take-cbs","taker","takers","cljs.core.async.impl.channels/ex-handler","ex","cljs.core.async.impl.channels/handle","buf","exh","t","e31949","done?","has-val","and__7067__auto__","add!","val","cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","takes","ret","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2","cljs.core.async.impl.channels/abort","this","puts","cljs.core.async.impl.channels/MAX_DIRTY","put-handler","dirty-takes","js/console","js/Error","cljs.core.async.impl.dispatch/run","put-cb","take-cb","cljs.core/reduced?","cb","xform","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3","handler","cljs.core.async.impl.protocols/active?","cljs.core.async.impl.channels/box","closed","cljs.core/not","cljs.core.async.impl.protocols/commit","cbs","cljs.core.async.impl.channels/put-active?","box","var_args","G__31946","cljs.core.async.impl.channels/chan","cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2","else","cljs.core.async.impl.channels/ManyToManyChannel","cljs.core.async.impl.buffers/ring-buffer","cljs.core/constantly","cljs.core.async.impl.channels/PutBox","cljs.core/PROTOCOL_SENTINEL","this__7750__auto__","writer__7751__auto__","opt__7752__auto__","cljs.core/-write","cljs.core.async.impl.channels/->ManyToManyChannel","dirty-puts","_","cljs.core.async.impl.protocols/add!","temp__5455__auto__","cljs.core.async.impl.channels/->PutBox","seq__31848","chunk__31849","count__31850","i__31851","x__7812__auto__","m__7813__auto__","cljs/core.async.impl.channels.abort","goog/typeOf","cljs.core/missing-protocol","cljs.core.async.impl.channels/MMC","cljs.core.async.impl.channels/t_cljs$core$async$impl$channels31800","_31802","meta31801","cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels31800","vec__31845","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","fexpr__31944","or__7079__auto__","cljs.core.async.impl.protocols/close!","e31948"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.channels\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs.core.async.impl.buffers :as buffers]))\n\n\n\n(defn box [val]\n  (reify cljs.core/IDeref\n    (-deref [_] val)))\n\n(deftype PutBox [handler val])\n\n(defn put-active? [box]\n  (impl/active? (.-handler box)))\n\n(def ^:const MAX_DIRTY 64)\n\n(defprotocol MMC\n  (abort [this]))\n\n(deftype ManyToManyChannel [takes ^:mutable dirty-takes puts ^:mutable dirty-puts ^not-native buf ^:mutable closed add!]\n  MMC\n  (abort [this]\n    (loop []\n      (let [putter (.pop puts)]\n        (when-not (nil? putter)\n          (let [^not-native put-handler (.-handler putter)\n                val (.-val putter)]\n            (if ^boolean (impl/active? put-handler)\n              (let [put-cb (impl/commit put-handler)]\n                (dispatch/run #(put-cb true)))\n              (recur))))))\n    (.cleanup puts (constantly false))\n    (impl/close! this))\n  impl/WritePort\n  (put! [this val ^not-native handler]\n    (assert (not (nil? val)) \"Can't put nil in on a channel\")\n    ;; bug in CLJS compiler boolean inference - David\n    (let [^boolean closed closed]\n      (if (or closed (not ^boolean (impl/active? handler)))\n        (box (not closed))\n        (if (and buf (not (impl/full? buf)))\n          (do\n            (impl/commit handler)\n            (let [done? (reduced? (add! buf val))\n                  take-cbs (loop [takers []]\n                             (if (and (pos? (.-length takes)) (pos? (count buf)))\n                               (let [^not-native taker (.pop takes)]\n                                 (if ^boolean (impl/active? taker)\n                                   (let [ret (impl/commit taker)\n                                         val (impl/remove! buf)]\n                                     (recur (conj takers (fn [] (ret val)))))\n                                   (recur takers)))\n                               takers))]\n              (when done? (abort this))\n              (when (seq take-cbs)\n                (doseq [f take-cbs]\n                  (dispatch/run f)))\n              (box true)))\n          (let [taker (loop []\n                        (let [^not-native taker (.pop takes)]\n                          (when taker\n                            (if (impl/active? taker)\n                              taker\n                              (recur)))))]\n            (if taker\n              (let [take-cb (impl/commit taker)]\n                (impl/commit handler)\n                (dispatch/run (fn [] (take-cb val)))\n                (box true))\n              (do\n                (if (> dirty-puts MAX_DIRTY)\n                  (do (set! dirty-puts 0)\n                      (.cleanup puts put-active?))\n                  (set! dirty-puts (inc dirty-puts)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length puts) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending puts are allowed on a single channel.\"\n                         \" Consider using a windowed buffer.\"))\n                  (.unbounded-unshift puts (PutBox. handler val)))\n                nil)))))))\n  impl/ReadPort\n  (take! [this ^not-native handler]\n    (if (not ^boolean (impl/active? handler))\n      nil\n      (if (and (not (nil? buf)) (pos? (count buf)))\n        (do\n          (if-let [take-cb (impl/commit handler)]\n            (let [val (impl/remove! buf)\n                  [done? cbs] (when (pos? (.-length puts))\n                                (loop [cbs []]\n                                  (let [putter (.pop puts)\n                                        ^not-native put-handler (.-handler putter)\n                                        val (.-val putter)\n                                        cb (and ^boolean (impl/active? put-handler) (impl/commit put-handler))\n                                        cbs (if cb (conj cbs cb) cbs)\n                                        done? (when cb (reduced? (add! buf val)))]\n                                    (if (and (not done?) (not (impl/full? buf)) (pos? (.-length puts)))\n                                      (recur cbs)\n                                      [done? cbs]))))]\n              (when done?\n                (abort this))\n              (doseq [cb cbs]\n                (dispatch/run #(cb true)))\n              (box val))))\n        (let [putter (loop []\n                       (let [putter (.pop puts)]\n                         (when putter\n                           (if ^boolean (impl/active? (.-handler putter))\n                             putter\n                             (recur)))))]\n          (if putter\n            (let [put-cb (impl/commit (.-handler putter))]\n              (impl/commit handler)\n              (dispatch/run #(put-cb true))\n              (box (.-val putter)))\n            (if closed\n              (do\n                (when buf (add! buf))\n                (if (and (impl/active? handler) (impl/commit handler))\n                  (let [has-val (and buf (pos? (count buf)))]\n                    (let [val (when has-val (impl/remove! buf))]\n                      (box val)))\n                  nil))\n              (do\n                (if (> dirty-takes MAX_DIRTY)\n                  (do (set! dirty-takes 0)\n                      (.cleanup takes impl/active?))\n                  (set! dirty-takes (inc dirty-takes)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length takes) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending takes are allowed on a single channel.\"))\n                  (.unbounded-unshift takes handler))\n                nil)))))))\n  impl/Channel\n  (closed? [_] closed)\n  (close! [this]\n    (if ^boolean closed\n        nil\n        (do (set! closed true)\n            (when (and buf (zero? (.-length puts)))\n                    (add! buf))\n            (loop []\n              (let [^not-native taker (.pop takes)]\n                (when-not (nil? taker)\n                  (when ^boolean (impl/active? taker)\n                    (let [take-cb (impl/commit taker)\n                          val (when (and buf (pos? (count buf))) (impl/remove! buf))]\n                      (dispatch/run (fn [] (take-cb val)))))\n                  (recur))))\n            (when buf (impl/close-buf! buf))\n            nil))))\n\n(defn- ex-handler [ex]\n  (.log js/console ex)\n  nil)\n\n(defn- handle [buf exh t]\n  (let [else ((or exh ex-handler) t)]\n    (if (nil? else)\n      buf\n      (impl/add! buf else))))\n\n(defn chan\n  ([buf] (chan buf nil))\n  ([buf xform] (chan buf xform nil))\n  ([buf xform exh]\n     (ManyToManyChannel. (buffers/ring-buffer 32) 0 (buffers/ring-buffer 32)\n                         0 buf false\n                         (let [add! (if xform (xform impl/add!) impl/add!)]\n                           (fn\n                             ([buf]\n                              (try\n                                (add! buf)\n                                (catch :default t\n                                  (handle buf exh t))))\n                             ([buf val]\n                              (try\n                                (add! buf val)\n                                (catch :default t\n                                  (handle buf exh t)))))))))\n"]}