{"version":3,"file":"cljs.core.async.impl.timers.js","sources":["cljs/core/async/impl/timers.cljs"],"mappings":"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","names":["x","level","k","i","new-level","update","js/Array","cljs.core.async.impl.timers/MAX_LEVEL","cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3","v","cljs.core.async.impl.timers/timeouts-map","timeout","timeout-channel","nx","this__7750__auto__","writer__7751__auto__","opt__7752__auto__","cljs.core/-write","cljs.core.async.impl.timers/SkipList","cljs.core.async.impl.timers/->SkipList","header","cljs.core.async.impl.timers/TIMEOUT_RESOLUTION_MS","x__8033__auto__","cljs.core/-conj","key","val","cljs.core.async.impl.timers/SkipListNode","cljs.core.async.impl.timers/->SkipListNode","forward","coll","cljs.core.async.impl.dispatch/queue-delay","arr","cljs.core.async.impl.timers/skip-list","links","x'","writer","opts","iter","cljs.core/LazySeq","temp__5455__auto__","js/Date","msecs","cljs.core/pr-sequential-writer","cljs.core/pr-writer","node","cljs.core/cons","cljs.core/List","cljs.core.async.impl.timers/timeout","var_args","G__31964","cljs.core.async.impl.timers/skip-list-node","js/Error","cljs.core.async.impl.protocols/close!","cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1","me","G__31969","cljs.core.async.impl.timers/least-greater-node","cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4","keyval","cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1","js/Math","cljs.core.async.impl.timers/P","pr-pair","G__31960","cljs.core.async.impl.timers/random-level","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0","or__7079__auto__","and__7067__auto__"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.timers\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.channels :as channels]\n            [cljs.core.async.impl.dispatch :as dispatch]))\n\n(def MAX_LEVEL 15) ;; 16 levels\n(def P (/ 1 2))\n\n(defn random-level\n  ([] (random-level 0))\n  ([level]\n    (if (and (< (.random js/Math) P)\n             (< level MAX_LEVEL))\n      (recur (inc level))\n      level)))\n\n(deftype SkipListNode [key ^:mutable val forward]\n  ISeqable\n  (-seq [coll]\n    (list key val))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll)))\n\n(defn skip-list-node\n  ([level] (skip-list-node nil nil level))\n  ([k v level]\n    (let [arr (make-array (inc level))]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (aset arr i nil)\n          (recur (inc i))))\n      (SkipListNode. k v arr))))\n\n(defn least-greater-node\n  ([x k level] (least-greater-node x k level nil))\n  ([x k level update]\n    (if-not (neg? level)\n      (let [x (loop [x x]\n                (if-let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                  (if (< (.-key x') k)\n                    (recur x')\n                    x)\n                  x))]\n        (when-not (nil? update)\n          (aset update level x))\n        (recur x k (dec level) update))\n      x)))\n\n(deftype SkipList [header ^:mutable level]\n  Object\n  (put [coll k v]\n    (let [update (make-array MAX_LEVEL)\n          x (least-greater-node header k level update)\n          x (aget (.-forward x) 0)]\n      (if (and (not (nil? x)) (== (.-key x) k))\n        (set! (.-val x) v)\n        (let [new-level (random-level)]\n          (when (> new-level level)\n            (loop [i (inc level)]\n              (when (<= i (inc new-level))\n                (aset update i header)\n                (recur (inc i))))\n            (set! level new-level))\n          (let [x (skip-list-node k v (make-array new-level))]\n            (loop [i 0]\n              (when (<= i level)\n                (let [links (.-forward (aget update i))]\n                  (aset (.-forward x) i (aget links i))\n                  (aset links i x)))))))))\n\n  (remove [coll k]\n    (let [update (make-array MAX_LEVEL)\n          x (least-greater-node header k level update)\n          x (when-not (zero? (alength (.-forward x)))\n              (aget (.-forward x) 0))]\n      (when (and (not (nil? x)) (== (.-key x) k))\n        (loop [i 0]\n          (when (<= i level)\n            (let [links (.-forward (aget update i))]\n              (if (identical? x (when (< i (alength links))\n                                  (aget links i)))\n                (do\n                  (aset links i (aget (.-forward x) i))\n                  (recur (inc i)))\n                (recur (inc i))))))\n        (while (and (< 0 level (alength (.-forward header)))\n                    (nil? (aget (.-forward header) level)))\n          (set! level (dec level))))))\n\n  (ceilingEntry [coll k]\n    (loop [x header level level]\n      (if-not (neg? level)\n        (let [nx (loop [x x]\n                   (let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                     (when-not (nil? x')\n                       (if (>= (.-key x') k)\n                         x'\n                         (recur x')))))]\n          (if-not (nil? nx)\n            (recur nx (dec level))\n            (recur x (dec level))))\n        (when-not (identical? x header)\n          x))))\n  \n  (floorEntry [coll k]\n    (loop [x header level level]\n      (if-not (neg? level)\n        (let [nx (loop [x x]\n                   (let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                     (if-not (nil? x')\n                       (if (> (.-key x') k)\n                         x\n                         (recur x'))\n                       (when (zero? level)\n                         x))))]\n          (if nx\n            (recur nx (dec level))\n            (recur x (dec level))))\n        (when-not (identical? x header)\n          x))))\n\n  ISeqable\n  (-seq [coll]\n    (letfn [(iter [node]\n              (lazy-seq\n                (when-not (nil? node)\n                  (cons [(.-key node) (.-val node)]\n                    (iter (aget (.-forward node) 0))))))]\n      (iter (aget (.-forward header) 0))))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (let [pr-pair (fn [keyval]\n                    (pr-sequential-writer writer pr-writer \"\" \" \" \"\" opts keyval))]\n      (pr-sequential-writer writer pr-pair \"{\" \", \" \"}\" opts coll))))\n\n(defn skip-list []\n  (SkipList. (skip-list-node 0) 0))\n\n(def timeouts-map (skip-list))\n\n(def TIMEOUT_RESOLUTION_MS 10)\n\n(defn timeout\n  \"returns a channel that will close after msecs\"\n  [msecs]\n  (let [timeout (+ (.valueOf (js/Date.)) msecs)\n        me (.ceilingEntry timeouts-map timeout)]\n    (or (when (and me (< (.-key me) (+ timeout TIMEOUT_RESOLUTION_MS)))\n          (.-val me))\n        (let [timeout-channel (channels/chan nil)]\n          (.put timeouts-map timeout timeout-channel)\n          (dispatch/queue-delay\n            (fn []\n              (.remove timeouts-map timeout)\n              (impl/close! timeout-channel))\n            msecs)\n          timeout-channel))))\n\n"]}