{"version":3,"file":"shadow.cljs.devtools.cli_opts.js","sources":["shadow/cljs/devtools/cli_opts.cljc"],"mappings":"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","names":["shadow.cljs.devtools.cli-opts/parse-dep","dep-str","vec__31313","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","sym","ver","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.cli-opts/conj-vec","x","y","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/cli-spec","opts","k","v","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/keyword","shadow.cljs.devtools.cli-opts/action-help","shadow.cljs.devtools.cli-opts/action-list","p__31329","map__31330","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/help","errors","summary","seq__31338","cljs.core/seq","chunk__31339","count__31340","i__31341","temp__5457__auto__","cljs.core/chunked-seq?","c__17073__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","err","cljs.core/println","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","seq__31342","chunk__31343","count__31344","i__31345","action","G__31346","G__31347","G__31348","G__31349","goog.string/format","cljs.core/name","shadow.cljs.devtools.cli-opts/action-set","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.cli-opts/actions-that-require-build-arg","p__31425","map__31426","shadow.cljs.devtools.cli-opts/parse-build-arg","arguments","result","cljs.core/empty?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__31424#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","p__31432","map__31433","shadow.cljs.devtools.cli-opts/parse-arguments","action-str","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/contains?","cljs.core/subvec","G__31436","shadow.cljs.devtools.cli-opts/parse","args","parsed","cljs.tools.cli/parse-opts","or__16142__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns shadow.cljs.devtools.cli-opts\n  #?(:clj\n     (:require\n       [clojure.tools.cli :as cli]\n       [clojure.string :as str])\n     :cljs\n     (:require\n       [goog.string.format]\n       [goog.string :refer (format)]\n       [cljs.tools.cli :as cli]\n       [clojure.string :as str])))\n\n(defn parse-dep [dep-str]\n  (let [[sym ver] (str/split dep-str #\":\")]\n    [(symbol sym) ver]\n    ))\n\n(defn conj-vec [x y]\n  (if (nil? x)\n    [y]\n    (conj x y)))\n\n(def cli-spec\n  ;; FIXME: how do I make this not show up in summary?\n  [[nil \"--npm\" \"internal, used by the shadow-cljs npm package\"]\n\n   [\"-d\" \"--dependency DEP\" \"adds an additional dependency (eg. -d foo/bar:1.2.3 -d another/thing:4.0.0)\"\n    :parse-fn parse-dep\n    :assoc-fn\n    (fn [opts k v]\n      (update opts :dependencies conj-vec v))]\n   ;; generic\n   [nil \"--source-maps\" \"temporarily enable source-maps for release debugging\"]\n   [nil \"--pseudo-names\" \"temporarily enable pseudo-names for release debugging. DO NOT SHIP THIS CODE!\"]\n   [nil \"--debug\" \"enable source-maps + pseudo-names. DO NOT SHIP THIS CODE!\"]\n   [nil \"--stdin\" \"clj-eval from stdin\"]\n   [\"-v\" \"--verbose\" \"verbose build log\"]\n   [nil \"--cli-info\" \"prints a bunch of information\"]\n   [nil \"--via VIA\" \"internal option, used by node script\" :parse-fn keyword]\n   [\"-h\" \"--help\"]])\n\n(def action-help\n  ;; per action help for: shadow-cljs compile -h\n  {:compile \"TBD\"})\n\n(def action-list\n  [:compile\n   :watch\n   :check\n   :release\n\n   :node-repl\n   :cljs-repl\n   :clj-repl\n   :clj-eval\n   :clj-run\n\n   :info\n   :pom\n\n   :npm-deps\n\n   :test\n\n   :aot\n   :init\n   :help\n   :server\n\n   :start\n   :stop\n   :restart\n   ])\n\n(defn help [{:keys [errors summary] :as opts}]\n  (do (doseq [err errors]\n        (println)\n        (println err)\n        (println))\n\n      (println \"Usage:\")\n      (println \"  shadow-cljs <action> <zero or more build ids>\")\n      (println)\n\n      (println \"Supported actions are:\")\n      (println)\n      (doseq [action action-list]\n        ;; FIXME: add help\n        (println (format \"%12s - ...\" (name action))))\n      (println)\n      (println \"Options:\")\n      (println \"-----\")\n      (println summary)\n      (println \"-----\")))\n\n(def action-set\n  (into #{} action-list))\n\n(def actions-that-require-build-arg\n  #{:compile\n    :watch\n    :release\n    :check\n    :cljs-repl})\n\n(defn parse-build-arg [{:keys [action arguments] :as result}]\n  (if (empty? arguments)\n    (assoc result :errors [(str \"Action \\\"\" (name action) \"\\\" requires one or more build ids\")])\n    ;; FIXME: validate build-ids\n    (assoc result :builds (into [] (map (comp keyword #(str/replace %1 \":\" \"\"))) arguments))))\n\n(defn parse-arguments [{:keys [arguments] :as result}]\n  (if (empty? arguments)\n    (assoc result :errors [\"Please specify which action to run!\"])\n    (let [action-str\n          (first arguments)\n\n          action\n          (keyword action-str)]\n      (if-not (contains? action-set action)\n        (assoc result :errors [(str \"Invalid action \\\"\" action-str \"\\\"\")])\n        (-> result\n            (assoc :action action)\n            (update :arguments subvec 1)\n            (cond->\n              (contains? actions-that-require-build-arg action)\n              (parse-build-arg)\n              ))))))\n\n(defn parse [args]\n  (let [parsed\n        (cli/parse-opts args cli-spec)]\n    (if (or (:errors parsed)\n            (get-in parsed [:options :help]))\n      parsed\n      (parse-arguments parsed)\n      )))"]}