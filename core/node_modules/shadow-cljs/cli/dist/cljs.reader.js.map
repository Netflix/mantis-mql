{"version":3,"file":"cljs.reader.js","sources":["cljs/reader.cljs"],"mappings":"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","names":["hours","or__7079__auto__","cljs.reader/parse-int","offset-hours","years","cljs.reader/check","months","eof","opts","reader","s","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/deref","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.reader/*default-data-reader-fn*","arr","js/Error","old-parser","cljs.core/re-matches","cljs.reader/timestamp-regex","js/Date","b","goog/string.StringBuffer","offset","offset-sign","offset-minutes","days","v","seconds","fraction","vec__34210","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","minutes","_","cljs.core/not","cljs.core/mod","num","div","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","n","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","f","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","cljs.reader/parse-and-validate-timestamp","ts","cljs.reader/days-in-month","cljs.core/vector?","form","cljs.reader/deregister-tag-parser!","tag","msg","low","high","var_args","G__34398","cljs.reader/read","p__34402","map__34403","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.reader/read-uuid","cljs.reader/zero-fill-right-and-truncate","width","js/parseInt","obj","cljs.reader/leap-year?","G__34276","G__34277","elems","cljs.reader/divisible?","cljs.reader/read-date","cljs.reader/read-js","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","cljs.reader/*tag-table*","dim-norm","seq__34307","cljs.core/seq","chunk__34308","count__34309","i__34310","temp__5457__auto__","cljs.core/chunked-seq?","c__8010__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","x","eof-error?","cljs.reader/register-tag-parser!","m","cljs.reader/indivisible?","year","dim-leap","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentQueue.EMPTY","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","leap-year?","month","uuid","and__7067__auto__","cljs.core/uuid","cljs.reader/parse-timestamp","cljs.reader/read-queue","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","G__34324","G__34325","G__34326","G__34332","G__34333","G__34334","goog.object/set","cljs.core/name","k","cljs.core/map?","cljs.reader/register-default-tag-parser!","G__34419","cljs.reader/read-string","ms","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$4","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","seq__34316","chunk__34317","count__34318","i__34319","vec__34321","vec__34329","cljs.reader/deregister-default-tag-parser!","js/isNaN","temp__5455__auto__","vec__34294"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.reader\n  (:require-macros [cljs.reader :refer [add-data-readers]])\n  (:require [goog.object :as gobject]\n            [cljs.tools.reader :as treader]\n            [cljs.tools.reader.edn :as edn])\n  (:import [goog.string StringBuffer]))\n\n(defn ^:private zero-fill-right-and-truncate [s width]\n  (cond\n    (= width (count s)) s\n    (< width (count s)) (subs s 0 width)\n    :else\n    (loop [b (StringBuffer. s)]\n      (if (< (.getLength b) width)\n        (recur (.append b \"0\"))\n        (.toString b)))))\n\n(defn ^:private divisible?\n  [num div]\n  (zero? (mod num div)))\n\n(defn ^:private indivisible?\n  [num div]\n  (not (divisible? num div)))\n\n(defn ^:private leap-year?\n  [year]\n  (and (divisible? year 4)\n       (or (indivisible? year 100)\n           (divisible? year 400))))\n\n(def ^:private days-in-month\n  (let [dim-norm [nil 31 28 31 30 31 30 31 31 30 31 30 31]\n        dim-leap [nil 31 29 31 30 31 30 31 31 30 31 30 31]]\n    (fn [month leap-year?]\n      (get (if leap-year? dim-leap dim-norm) month))))\n\n(def ^:private timestamp-regex #\"(\\d\\d\\d\\d)(?:-(\\d\\d)(?:-(\\d\\d)(?:[T](\\d\\d)(?::(\\d\\d)(?::(\\d\\d)(?:[.](\\d+))?)?)?)?)?)?(?:[Z]|([-+])(\\d\\d):(\\d\\d))?\")\n\n(defn ^:private parse-int [s]\n  (let [n (js/parseInt s 10)]\n    (if-not (js/isNaN n)\n      n)))\n\n(defn ^:private check [low n high msg]\n  (when-not (<= low n high)\n    (throw (js/Error. (str msg \" Failed:  \" low \"<=\" n \"<=\" high))))\n  n)\n\n(defn parse-and-validate-timestamp [s]\n  (let [[_ years months days hours minutes seconds fraction offset-sign offset-hours offset-minutes :as v]\n        (re-matches timestamp-regex s)]\n    (if-not v\n      (throw (js/Error. (str \"Unrecognized date/time syntax: \" s)))\n      (let [years (parse-int years)\n            months (or (parse-int months) 1)\n            days (or (parse-int days) 1)\n            hours (or (parse-int hours) 0)\n            minutes (or (parse-int minutes) 0)\n            seconds (or (parse-int seconds) 0)\n            fraction (or (parse-int (zero-fill-right-and-truncate fraction 3)) 0)\n            offset-sign (if (= offset-sign \"-\") -1 1)\n            offset-hours (or (parse-int offset-hours) 0)\n            offset-minutes (or (parse-int offset-minutes) 0)\n            offset (* offset-sign (+ (* offset-hours 60) offset-minutes))]\n        [years\n         (check 1 months 12 \"timestamp month field must be in range 1..12\")\n         (check 1 days (days-in-month months (leap-year? years)) \"timestamp day field must be in range 1..last day in month\")\n         (check 0 hours 23 \"timestamp hour field must be in range 0..23\")\n         (check 0 minutes 59 \"timestamp minute field must be in range 0..59\")\n         (check 0 seconds (if (= minutes 59) 60 59) \"timestamp second field must be in range 0..60\")\n         (check 0 fraction 999 \"timestamp millisecond field must be in range 0..999\")\n         offset]))))\n\n(defn parse-timestamp\n  [ts]\n  (if-let [[years months days hours minutes seconds ms offset]\n           (parse-and-validate-timestamp ts)]\n    (js/Date.\n      (- (.UTC js/Date years (dec months) days hours minutes seconds ms)\n        (* offset 60 1000)))\n    (throw (js/Error. (str \"Unrecognized date/time syntax: \" ts)))))\n\n(defn ^:private read-date\n  [s]\n  (if (string? s)\n    (parse-timestamp s)\n    (throw (js/Error. \"Instance literal expects a string for its timestamp.\"))))\n\n(defn ^:private read-queue\n  [elems]\n  (if (vector? elems)\n    (into cljs.core/PersistentQueue.EMPTY elems)\n    (throw (js/Error. \"Queue literal expects a vector for its elements.\"))))\n\n(defn ^:private read-js\n  [form]\n  (cond\n    (vector? form)\n    (let [arr (array)]\n      (doseq [x form]\n        (.push arr x))\n      arr)\n\n    (map? form)\n    (let [obj (js-obj)]\n      (doseq [[k v] form]\n        (gobject/set obj (name k) v))\n      obj)\n\n    :else\n    (throw\n      (js/Error.\n        (str \"JS literal expects a vector or map containing \"\n             \"only string or unqualified keyword keys\")))))\n\n(defn ^:private read-uuid\n  [uuid]\n  (if (string? uuid)\n    (cljs.core/uuid uuid)\n    (throw (js/Error. \"UUID literal expects a string as its representation.\"))))\n\n(def ^:dynamic *default-data-reader-fn*\n  (atom nil))\n\n(def ^:dynamic *tag-table*\n  (atom\n    (add-data-readers\n      {'inst  read-date\n       'uuid  read-uuid\n       'queue read-queue\n       'js    read-js})))\n\n(defn read\n  \"Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader]\n   (edn/read\n     {:readers @*tag-table*\n      :default @*default-data-reader-fn*\n      :eof nil}\n     reader))\n  ([{:keys [eof] :as opts} reader]\n   (edn/read\n     (update (merge opts {:default @*default-data-reader-fn*})\n       :readers (fn [m] (merge @*tag-table* m))) reader))\n  ([reader eof-error? eof opts]\n   (edn/read reader eof-error? eof\n     (update (merge opts {:default @*default-data-reader-fn*})\n       :readers (fn [m] (merge @*tag-table* m))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read\"\n  ([s]\n   (edn/read-string\n     {:readers @*tag-table*\n      :default @*default-data-reader-fn*\n      :eof nil} s))\n  ([opts s]\n   (edn/read-string\n     (update (merge {:default @*default-data-reader-fn*} opts)\n       :readers (fn [m] (merge @*tag-table* m))) s)))\n\n(defn register-tag-parser!\n  [tag f]\n  (let [old-parser (get @*tag-table* tag)]\n    (swap! *tag-table* assoc tag f)\n    old-parser))\n\n(defn deregister-tag-parser!\n  [tag]\n  (let [old-parser (get @*tag-table* tag)]\n    (swap! *tag-table* dissoc tag)\n    old-parser))\n\n(defn register-default-tag-parser!\n  [f]\n  (let [old-parser @*default-data-reader-fn*]\n    (swap! *default-data-reader-fn* (fn [_] f))\n    old-parser))\n\n(defn deregister-default-tag-parser!\n  []\n  (let [old-parser @*default-data-reader-fn*]\n    (swap! *default-data-reader-fn* (fn [_] nil))\n    old-parser))\n"]}