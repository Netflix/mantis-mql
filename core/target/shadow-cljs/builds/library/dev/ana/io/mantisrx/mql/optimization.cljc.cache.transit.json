["^ ","~:output",["^ ","~:js","goog.provide('io.mantisrx.mql.optimization');\ngoog.require('cljs.core');\ngoog.require('clojure.zip');\ngoog.require('clojure.string');\nio.mantisrx.mql.optimization.apply_rule = (function io$mantisrx$mql$optimization$apply_rule(loc,rule){\nif(cljs.core.truth_((function (){try{var G__27316 = clojure.zip.node(loc);\nvar fexpr__27315 = new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397).cljs$core$IFn$_invoke$arity$1(rule);\nreturn (fexpr__27315.cljs$core$IFn$_invoke$arity$1 ? fexpr__27315.cljs$core$IFn$_invoke$arity$1(G__27316) : fexpr__27315.call(null,G__27316));\n}catch (e27314){if((e27314 instanceof Error)){\nvar e = e27314;\nreturn cljs.core.identity(false);\n} else {\nthrow e27314;\n\n}\n}})())){\nreturn clojure.zip.edit(loc,new cljs.core.Keyword(null,\"apply\",\"apply\",1320385493).cljs$core$IFn$_invoke$arity$1(rule));\n} else {\nreturn loc;\n}\n});\n/**\n * Helper method for turning a regex into a string contains.\n * Does not check for valid input\n */\nio.mantisrx.mql.optimization.regex_to_contains = (function io$mantisrx$mql$optimization$regex_to_contains(regex){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string_literal\",\"string_literal\",-852372917),[\"'\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(cljs.core.second(regex),(2),(cljs.core.count(cljs.core.second(regex)) - (2)))),\"'\"].join('')], null);\n});\nio.mantisrx.mql.optimization.optimization_rules = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397),(function (node){\nvar and__5114__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"boolean_test\",\"boolean_test\",-1174569162),cljs.core.first(node));\nif(and__5114__auto__){\nvar and__5114__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(node,(2))),new cljs.core.Keyword(null,\"REGEX_OPERATOR\",\"REGEX_OPERATOR\",-1583204457));\nif(and__5114__auto____$1){\nreturn cljs.core.re_matches(/\\.\\*[A-Za-z0-9_-]*\\.\\*/,cljs.core.second(cljs.core.last(node)));\n} else {\nreturn and__5114__auto____$1;\n}\n} else {\nreturn and__5114__auto__;\n}\n}),new cljs.core.Keyword(null,\"apply\",\"apply\",1320385493),(function (node){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"boolean_test\",\"boolean_test\",-1174569162),cljs.core.second(node),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"BINARY_OPERATOR\",\"BINARY_OPERATOR\",-141837585),\"==+\"], null),io.mantisrx.mql.optimization.regex_to_contains(cljs.core.last(node))], null);\n})], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397),(function (node){\nvar and__5114__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"boolean_test\",\"boolean_test\",-1174569162),cljs.core.first(node));\nif(and__5114__auto__){\nvar and__5114__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(node,(2))),new cljs.core.Keyword(null,\"REGEX_OPERATOR\",\"REGEX_OPERATOR\",-1583204457));\nif(and__5114__auto____$1){\nreturn cljs.core.re_matches(/\\.\\*\\([A-Za-z0-9_-]+(\\|[A-Za-z0-9_-]+)*\\)\\.\\*/,cljs.core.second(cljs.core.last(node)));\n} else {\nreturn and__5114__auto____$1;\n}\n} else {\nreturn and__5114__auto__;\n}\n}),new cljs.core.Keyword(null,\"apply\",\"apply\",1320385493),(function (node){\nvar target = cljs.core.subs.cljs$core$IFn$_invoke$arity$3(cljs.core.second(cljs.core.last(node)),(3),(cljs.core.count(cljs.core.second(cljs.core.last(node))) - (3)));\nvar words = clojure.string.split.cljs$core$IFn$_invoke$arity$2(target,/\\|/);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"boolean_test\",\"boolean_test\",-1174569162),cljs.core.second(node),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"BINARY_OPERATOR\",\"BINARY_OPERATOR\",-141837585),\"==+\"], null),words], null);\n})], null)], null);\nio.mantisrx.mql.optimization.apply_rules = (function io$mantisrx$mql$optimization$apply_rules(loc,rules){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(io.mantisrx.mql.optimization.apply_rule,loc,io.mantisrx.mql.optimization.optimization_rules);\n});\nio.mantisrx.mql.optimization.run = (function io$mantisrx$mql$optimization$run(loc){\nwhile(true){\nif(cljs.core.truth_(clojure.zip.end_QMARK_(loc))){\nreturn clojure.zip.root(loc);\n} else {\nvar G__27325 = clojure.zip.next(io.mantisrx.mql.optimization.apply_rules(loc,io.mantisrx.mql.optimization.optimization_rules));\nloc = G__27325;\ncontinue;\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Query optimization functions, the objective\n   of this namespace is to take a parse tree\n   from the parser and produce a higher performing but equivalent tree."],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$io.mantisrx.mql.optimization","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.zip","^@","~$zip","^@","~$clojure.string","^B","~$str","^B","~$cljs.core","^D","~$goog","^E"],"~:seen",["^9",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^D","^D"],"~:form",["~#list",["~$ns","^;","Query optimization functions, the objective\n   of this namespace is to take a parse tree\n   from the parser and produce a higher performing but equivalent tree.",["^K",["^G",["^@","~:as","^A"],["^B","^M","^C"]]]]],"~:flags",["^ ","^G",["^9",[]]],"~:js-deps",["^ "],"~:deps",["^E","^D","^@","^B"]],"^=","^;","~:resource-id",["~:shadow.build.classpath/resource","io/mantisrx/mql/optimization.cljc"],"~:compiled-at",1518117044631,"~:resource-name","io/mantisrx/mql/optimization.cljc","~:warnings",[],"~:source","(ns io.mantisrx.mql.optimization\n  \"Query optimization functions, the objective\n   of this namespace is to take a parse tree\n   from the parser and produce a higher performing but equivalent tree.\"\n  (:require [clojure.zip :as zip]\n            [clojure.string :as str]))\n\n(defn- apply-rule\n  [loc rule]\n  (if (try ((:pred rule) (zip/node loc))\n            (catch #?(:clj Exception :cljs js/Error) e (identity false)))\n       (zip/edit loc (:apply rule))\n       loc))\n\n(defn- regex-to-contains\n  \"Helper method for turning a regex into a string contains.\n   Does not check for valid input\"\n  [regex]\n  [:string_literal (str \"'\" (subs (second regex)\n                         2\n                         (- (count (second regex)) 2))\n                        \"'\")])\n\n(def optimization-rules\n  [\n   ;;;; Basic contrains rule, converts foo ==~ /.*abcd.*/ into a contains call.\n   {:pred (fn [node] (and (= :boolean_test (first node))\n                         (= (first (nth node 2)) :REGEX_OPERATOR)\n                         (re-matches #\"\\.\\*[A-Za-z0-9_-]*\\.\\*\" (second (last node)))))\n   :apply (fn [node] [:boolean_test\n                      (second node)\n                      [:BINARY_OPERATOR \"==+\"]\n                      (regex-to-contains (last node))])}\n\n   ;;;; Multiple contrains rule, converts foo ==~ /.*(abc|def).*/ into multiple contains calls.\n   {:pred (fn [node] (and (= :boolean_test (first node))\n                         (= (first (nth node 2)) :REGEX_OPERATOR)\n                         (re-matches #\"\\.\\*\\([A-Za-z0-9_-]+(\\|[A-Za-z0-9_-]+)*\\)\\.\\*\"\n                                     (second (last node)))))\n    :apply (fn [node] \n             (let\n               [target (subs (second (last node)) 3 (- (count (second (last node))) 3))\n                words (str/split target #\"\\|\")]\n             [:boolean_test\n              (second node)\n              [:BINARY_OPERATOR \"==+\"]\n              words])\n             )}\n   ])\n\n(defn- apply-rules\n  [loc rules]\n  (reduce apply-rule loc optimization-rules))\n\n(defn run\n  [loc]\n  (if (zip/end? loc)\n    (zip/root loc)\n    (recur (zip/next (apply-rules loc optimization-rules)))))\n","~:reader-features",["^9",["~:cljs"]],"~:source-map",["^ ","~i7",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",4],["^ ","^Z",42,"^[",4],["^ ","^Z",0,"^[",5]],"~i7",[["^ ","^Z",0,"^[",4,"^:","io.mantisrx.mql.optimization/apply-rule"]]],"~i8",["^ ","~i3",[["^ ","^Z",92,"^[",4,"^:","loc"]],"~i7",[["^ ","^Z",96,"^[",4,"^:","rule"]]],"~i9",["^ ","~i2",[["^ ","^Z",0,"^[",5]],"~i6",[["^ ","^Z",20,"^[",5],["^ ","^Z",37,"^[",5],["^ ","^Z",16,"^[",8],["^ ","^Z",19,"^[",8],["^ ","^Z",20,"^[",8,"^:","e27314"],["^ ","^Z",0,"^[",9],["^ ","^Z",8,"^[",9,"^:","e27314"],["^ ","^Z",0,"^[",10],["^ ","^Z",0,"^[",12],["^ ","^Z",0,"^[",12],["^ ","^Z",6,"^[",12,"^:","e27314"]],"~i11",[["^ ","^Z",37,"^[",5],["^ ","^Z",41,"^[",5,"^:","G__27316"],["^ ","^Z",4,"^[",6,"^:","fexpr__27315"],["^ ","^Z",0,"^[",7],["^ ","^Z",0,"^[",7],["^ ","^Z",8,"^[",7,"^:","fexpr__27315"],["^ ","^Z",53,"^[",7,"^:","fexpr__27315"],["^ ","^Z",96,"^[",7,"^:","G__27316"],["^ ","^Z",108,"^[",7,"^:","fexpr__27315"],["^ ","^Z",131,"^[",7,"^:","G__27316"]],"~i12",[["^ ","^Z",19,"^[",6],["^ ","^Z",19,"^[",6]],"~i19",[["^ ","^Z",102,"^[",6,"^:","rule"]],"~i25",[["^ ","^Z",52,"^[",5]],"~i26",[["^ ","^Z",52,"^[",5,"^:","clojure.zip/node"]],"~i35",[["^ ","^Z",69,"^[",5,"^:","loc"]]],"~i10",["^ ","~i43",[["^ ","^Z",38,"^[",8,"^:","js/Error"]],"~i53",[["^ ","^Z",4,"^[",9,"^:","e"]],"~i55",[["^ ","^Z",0,"^[",10],["^ ","^Z",26,"^[",10]],"~i56",[["^ ","^Z",7,"^[",10,"^:","cljs.core/identity"]]],"^10",["^ ","~i7",[["^ ","^Z",0,"^[",16]],"~i8",[["^ ","^Z",7,"^[",16,"^:","clojure.zip/edit"]],"~i17",[["^ ","^Z",24,"^[",16,"^:","loc"]],"~i21",[["^ ","^Z",28,"^[",16],["^ ","^Z",28,"^[",16]],"~i29",[["^ ","^Z",113,"^[",16,"^:","rule"]]],"^11",["^ ","~i7",[["^ ","^Z",0,"^[",18,"^:","loc"]]],"~i14",["^ ","~i0",[["^ ","^Z",0,"^[",21],["^ ","^Z",49,"^[",25],["^ ","^Z",0,"^[",26],["^ ","^Z",0,"^[",26],["^ ","^Z",90,"^[",26]],"~i7",[["^ ","^Z",0,"^[",25,"^:","io.mantisrx.mql.optimization/regex-to-contains"]]],"^1;",["^ ","~i3",[["^ ","^Z",106,"^[",25,"^:","regex"]]],"~i18",["^ ","^12",[["^ ","^Z",163,"^[",26],["^ ","^Z",164,"^[",26],["^ ","^Z",336,"^[",26]],"~i28",[["^ ","^Z",212,"^[",26],["^ ","^Z",281,"^[",26]],"^1=",[["^ ","^Z",212,"^[",26,"^:","cljs.core.subs.cljs$core$IFn$_invoke$arity$3"]],"~i34",[["^ ","^Z",257,"^[",26]],"^15",[["^ ","^Z",257,"^[",26,"^:","cljs.core/second"]],"~i42",[["^ ","^Z",274,"^[",26,"^:","regex"]]],"~i20",["^ ","^13",[["^ ","^Z",285,"^[",26],["^ ","^Z",329,"^[",26]],"^1@",[["^ ","^Z",286,"^[",26]],"^1=",[["^ ","^Z",286,"^[",26,"^:","cljs.core/count"]],"^15",[["^ ","^Z",302,"^[",26]],"~i36",[["^ ","^Z",302,"^[",26,"^:","cljs.core/second"]],"^17",[["^ ","^Z",319,"^[",26,"^:","regex"]]],"~i23",["^ ","~i0",[["^ ","^Z",0,"^[",28],["^ ","^Z",50,"^[",28],["^ ","^Z",133,"^[",28],["^ ","^Z",176,"^[",28],["^ ","^Z",3,"^[",40],["^ ","^Z",11,"^[",42],["^ ","^Z",54,"^[",42],["^ ","^Z",3,"^[",54]],"~i5",[["^ ","^Z",0,"^[",28,"^:","io.mantisrx.mql.optimization/optimization-rules"]]],"^14",["^ ","^16",[["^ ","^Z",229,"^[",28],["^ ","^Z",0,"^[",29]],"~i15",[["^ ","^Z",240,"^[",28,"^:","node"]],"^1<",[["^ ","^Z",0,"^[",29],["^ ","^Z",4,"^[",29,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",30],["^ ","^Z",0,"^[",30],["^ ","^Z",3,"^[",30,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",31],["^ ","^Z",4,"^[",31,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",32],["^ ","^Z",0,"^[",32],["^ ","^Z",3,"^[",32,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",35,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",38,"^:","and__5114__auto__"]],"^14",[["^ ","^Z",24,"^[",29],["^ ","^Z",69,"^[",29]],"~i27",[["^ ","^Z",24,"^[",29,"^:","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^17",[["^ ","^Z",139,"^[",29]],"~i44",[["^ ","^Z",139,"^[",29,"^:","cljs.core/first"]],"~i50",[["^ ","^Z",155,"^[",29,"^:","node"]]],"^1G",["^ ","^13",[["^ ","^Z",28,"^[",31],["^ ","^Z",144,"^[",31]],"^14",[["^ ","^Z",28,"^[",31,"^:","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1@",[["^ ","^Z",73,"^[",31]],"^1=",[["^ ","^Z",73,"^[",31,"^:","cljs.core/first"]],"^15",[["^ ","^Z",89,"^[",31],["^ ","^Z",138,"^[",31]],"^1D",[["^ ","^Z",89,"^[",31,"^:","cljs.core.nth.cljs$core$IFn$_invoke$arity$2"]],"~i40",[["^ ","^Z",133,"^[",31,"^:","node"]]],"^1@",["^ ","^13",[["^ ","^Z",0,"^[",33],["^ ","^Z",28,"^[",33]],"^14",[["^ ","^Z",7,"^[",33,"^:","cljs.core/re-matches"]],"~i63",[["^ ","^Z",53,"^[",33]],"~i64",[["^ ","^Z",53,"^[",33,"^:","cljs.core/second"]],"~i71",[["^ ","^Z",70,"^[",33]],"~i72",[["^ ","^Z",70,"^[",33,"^:","cljs.core/last"]],"~i77",[["^ ","^Z",85,"^[",33,"^:","node"]]],"^1=",["^ ","^16",[["^ ","^Z",58,"^[",40],["^ ","^Z",0,"^[",41],["^ ","^Z",0,"^[",41],["^ ","^Z",90,"^[",41],["^ ","^Z",183,"^[",41],["^ ","^Z",266,"^[",41],["^ ","^Z",341,"^[",41]],"^1F",[["^ ","^Z",69,"^[",40,"^:","node"]]],"~i30",["^ ","~i22",[["^ ","^Z",160,"^[",41]],"^1E",[["^ ","^Z",160,"^[",41,"^:","cljs.core/second"]],"^1P",[["^ ","^Z",177,"^[",41,"^:","node"]]],"~i32",["^ ","^1Q",[["^ ","^Z",355,"^[",41]],"^1E",[["^ ","^Z",355,"^[",41,"^:","io.mantisrx.mql.optimization/regex-to-contains"]],"~i41",[["^ ","^Z",402,"^[",41]],"^1B",[["^ ","^Z",402,"^[",41,"^:","cljs.core/last"]],"~i47",[["^ ","^Z",417,"^[",41,"^:","node"]]],"^15",["^ ","^16",[["^ ","^Z",107,"^[",42],["^ ","^Z",0,"^[",43]],"^1F",[["^ ","^Z",118,"^[",42,"^:","node"]],"^1<",[["^ ","^Z",0,"^[",43],["^ ","^Z",4,"^[",43,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",44],["^ ","^Z",0,"^[",44],["^ ","^Z",3,"^[",44,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",45],["^ ","^Z",4,"^[",45,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",46],["^ ","^Z",0,"^[",46],["^ ","^Z",3,"^[",46,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",49,"^:","and__5114__auto__"],["^ ","^Z",0,"^[",52,"^:","and__5114__auto__"]],"^14",[["^ ","^Z",24,"^[",43],["^ ","^Z",69,"^[",43]],"^1G",[["^ ","^Z",24,"^[",43,"^:","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^17",[["^ ","^Z",139,"^[",43]],"^1H",[["^ ","^Z",139,"^[",43,"^:","cljs.core/first"]],"^1I",[["^ ","^Z",155,"^[",43,"^:","node"]]],"^1D",["^ ","^13",[["^ ","^Z",28,"^[",45],["^ ","^Z",144,"^[",45]],"^14",[["^ ","^Z",28,"^[",45,"^:","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1@",[["^ ","^Z",73,"^[",45]],"^1=",[["^ ","^Z",73,"^[",45,"^:","cljs.core/first"]],"^15",[["^ ","^Z",89,"^[",45],["^ ","^Z",138,"^[",45]],"^1D",[["^ ","^Z",89,"^[",45,"^:","cljs.core.nth.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^Z",133,"^[",45,"^:","node"]]],"~i37",["^ ","^13",[["^ ","^Z",0,"^[",47],["^ ","^Z",28,"^[",47]],"^14",[["^ ","^Z",7,"^[",47,"^:","cljs.core/re-matches"]]],"~i38",["^ ","^1U",[["^ ","^Z",76,"^[",47]],"^1V",[["^ ","^Z",76,"^[",47,"^:","cljs.core/second"]],"~i45",[["^ ","^Z",93,"^[",47]],"~i46",[["^ ","^Z",93,"^[",47,"^:","cljs.core/last"]],"~i51",[["^ ","^Z",108,"^[",47,"^:","node"]]],"~i39",["^ ","^10",[["^ ","^Z",58,"^[",54],["^ ","^Z",0,"^[",55]],"~i16",[["^ ","^Z",69,"^[",54,"^:","node"]]],"^1J",["^ ","~i13",[["^ ","^Z",0,"^[",55],["^ ","^Z",0,"^[",57],["^ ","^Z",0,"^[",57],["^ ","^Z",90,"^[",57],["^ ","^Z",183,"^[",57],["^ ","^Z",266,"^[",57],["^ ","^Z",341,"^[",57]]],"^1S",["^ ","^1[",[["^ ","^Z",4,"^[",55,"^:","target"]],"^1E",[["^ ","^Z",13,"^[",55],["^ ","^Z",97,"^[",55]],"~i24",[["^ ","^Z",13,"^[",55,"^:","cljs.core.subs.cljs$core$IFn$_invoke$arity$3"]],"^1=",[["^ ","^Z",58,"^[",55]],"^1P",[["^ ","^Z",58,"^[",55,"^:","cljs.core/second"]],"^1U",[["^ ","^Z",75,"^[",55]],"^1V",[["^ ","^Z",75,"^[",55,"^:","cljs.core/last"]],"^17",[["^ ","^Z",90,"^[",55,"^:","node"]],"~i52",[["^ ","^Z",101,"^[",55],["^ ","^Z",160,"^[",55]],"^19",[["^ ","^Z",102,"^[",55]],"^1:",[["^ ","^Z",102,"^[",55,"^:","cljs.core/count"]],"~i62",[["^ ","^Z",118,"^[",55]],"^1K",[["^ ","^Z",118,"^[",55,"^:","cljs.core/second"]],"~i70",[["^ ","^Z",135,"^[",55]],"^1M",[["^ ","^Z",135,"^[",55,"^:","cljs.core/last"]],"~i76",[["^ ","^Z",150,"^[",55,"^:","node"]]],"^1B",["^ ","^1[",[["^ ","^Z",4,"^[",56,"^:","words"]],"^1Q",[["^ ","^Z",12,"^[",56],["^ ","^Z",70,"^[",56]],"^1E",[["^ ","^Z",12,"^[",56,"^:","clojure.string.split.cljs$core$IFn$_invoke$arity$2"]],"~i33",[["^ ","^Z",63,"^[",56,"^:","target"]]],"^1H",["^ ","^1>",[["^ ","^Z",160,"^[",57]],"^1F",[["^ ","^Z",160,"^[",57,"^:","cljs.core/second"]],"^1Q",[["^ ","^Z",177,"^[",57,"^:","node"]]],"^1X",["^ ","^1>",[["^ ","^Z",355,"^[",57,"^:","words"]]],"^1I",["^ ","~i0",[["^ ","^Z",0,"^[",59],["^ ","^Z",43,"^[",59],["^ ","^Z",0,"^[",60]],"~i7",[["^ ","^Z",0,"^[",59,"^:","io.mantisrx.mql.optimization/apply-rules"]]],"^1Y",["^ ","~i3",[["^ ","^Z",94,"^[",59,"^:","loc"]],"~i7",[["^ ","^Z",98,"^[",59,"^:","rules"]]],"^22",["^ ","~i2",[["^ ","^Z",0,"^[",60]],"~i3",[["^ ","^Z",7,"^[",60,"^:","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^Z",54,"^[",60,"^:","io.mantisrx.mql.optimization/apply-rule"]],"^1<",[["^ ","^Z",94,"^[",60,"^:","loc"]],"^13",[["^ ","^Z",98,"^[",60,"^:","io.mantisrx.mql.optimization/optimization-rules"]]],"~i54",["^ ","~i0",[["^ ","^Z",0,"^[",62],["^ ","^Z",35,"^[",62],["^ ","^Z",0,"^[",64]],"~i6",[["^ ","^Z",0,"^[",62,"^:","io.mantisrx.mql.optimization/run"]]],"^19",["^ ","~i3",[["^ ","^Z",78,"^[",62,"^:","loc"]]],"^1:",["^ ","~i2",[["^ ","^Z",0,"^[",64]],"~i6",[["^ ","^Z",20,"^[",64]],"~i7",[["^ ","^Z",20,"^[",64,"^:","clojure.zip/end?"]],"^1[",[["^ ","^Z",43,"^[",64,"^:","loc"]]],"~i57",["^ ","~i4",[["^ ","^Z",0,"^[",65]],"~i5",[["^ ","^Z",7,"^[",65,"^:","clojure.zip/root"]],"^1>",[["^ ","^Z",24,"^[",65,"^:","loc"]]],"~i58",["^ ","~i4",[["^ ","^Z",0,"^[",67]],"^10",[["^ ","^Z",15,"^[",67]],"^11",[["^ ","^Z",15,"^[",67,"^:","clojure.zip/next"]],"^1<",[["^ ","^Z",32,"^[",67]],"^1Q",[["^ ","^Z",32,"^[",67,"^:","io.mantisrx.mql.optimization/apply-rules"]],"^1A",[["^ ","^Z",73,"^[",67,"^:","loc"]],"^1V",[["^ ","^Z",77,"^[",67,"^:","io.mantisrx.mql.optimization/optimization-rules"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^D"],1516731430000,["^R","goog/math/math.js"],1516731431000,["^R","goog/array/array.js"],1516731431000,["^R","goog/debug/error.js"],1516731431000,["^R","goog/dom/nodetype.js"],1516731431000,["^R","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^R","goog/math/long.js"],1516731431000,["^R","goog/functions/functions.js"],1516731431000,["^R","goog/structs/map.js"],1516731431000,["^R","goog/asserts/asserts.js"],1516731431000,["^R","goog/uri/uri.js"],1516731431000,["^R","goog/base.js"],1516731431000,["^R","goog/structs/structs.js"],1516731431000,["^R","clojure/string.cljs"],1516731430000,["^R","goog/string/string.js"],1516731431000,["^R","goog/reflect/reflect.js"],1516731431000,["^R","clojure/zip.cljs"],1516731430000,["^R","goog/string/stringbuffer.js"],1516731431000,["^R","io/mantisrx/mql/optimization.cljc"],[1518110464000],["^R","goog/iter/iter.js"],1516731431000,["^R","cljs/core.cljs"],1516731430000,["^R","goog/math/integer.js"],1516731431000,["^R","goog/uri/utils.js"],1516731431000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Query optimization functions, the objective\n   of this namespace is to take a parse tree\n   from the parser and produce a higher performing but equivalent tree."],"^7",null,"^8",["^9",[]],"^:","^;","^>",null,"^?",["^ ","^@","^@","^A","^@","^B","^B","^C","^B","^D","^D","^E","^E"],"^F",["^9",["^G"]],"~:shadow/js-access-global",["^9",["Error"]],"^H",null,"~:defs",["^ ","~$apply-rule",["^ ","~:protocol-inline",null,"^5",["^ ","~:file","io/mantisrx/mql/optimization.cljc","~:line",8,"~:column",8,"~:end-line",8,"~:end-column",18,"~:private",true,"~:arglists",["^K",["~$quote",["^K",[["~$loc","~$rule"]]]]]],"^2I",true,"^:","~$io.mantisrx.mql.optimization/apply-rule","~:variadic",false,"^2D","io/mantisrx/mql/optimization.cljc","^2H",18,"~:method-params",["^K",[["^2L","^2M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^2F",1,"^2E",8,"^2G",8,"~:max-fixed-arity",2,"~:fn-var",true,"^2J",["^K",["^2K",["^K",[["^2L","^2M"]]]]]],"~$regex-to-contains",["^ ","^2C",null,"^5",["^ ","^2D","io/mantisrx/mql/optimization.cljc","^2E",15,"^2F",8,"^2G",15,"^2H",25,"^2I",true,"^2J",["^K",["^2K",["^K",[["~$regex"]]]]],"^6","Helper method for turning a regex into a string contains.\n   Does not check for valid input"],"^2I",true,"^:","~$io.mantisrx.mql.optimization/regex-to-contains","^2O",false,"^2D","io/mantisrx/mql/optimization.cljc","^2H",25,"^2P",["^K",[["^2V"]]],"^2Q",null,"^2R",["^K",[null,null]],"^2F",1,"^2E",15,"^2G",15,"^2S",1,"^2T",true,"^2J",["^K",["^2K",["^K",[["^2V"]]]]],"^6","Helper method for turning a regex into a string contains.\n   Does not check for valid input"],"~$optimization-rules",["^ ","^:","~$io.mantisrx.mql.optimization/optimization-rules","^2D","io/mantisrx/mql/optimization.cljc","^2E",24,"^2F",1,"^2G",24,"^2H",24,"^5",["^ ","^2D","io/mantisrx/mql/optimization.cljc","^2E",24,"^2F",6,"^2G",24,"^2H",24],"~:tag","~$cljs.core/IVector"],"~$apply-rules",["^ ","^2C",null,"^5",["^ ","^2D","io/mantisrx/mql/optimization.cljc","^2E",51,"^2F",8,"^2G",51,"^2H",19,"^2I",true,"^2J",["^K",["^2K",["^K",[["^2L","~$rules"]]]]]],"^2I",true,"^:","~$io.mantisrx.mql.optimization/apply-rules","^2O",false,"^2D","io/mantisrx/mql/optimization.cljc","^2H",19,"^2P",["^K",[["^2L","^31"]]],"^2Q",null,"^2R",["^K",[null,null]],"^2F",1,"^2E",51,"^2G",51,"^2S",2,"^2T",true,"^2J",["^K",["^2K",["^K",[["^2L","^31"]]]]]],"~$run",["^ ","^2C",null,"^5",["^ ","^2D","io/mantisrx/mql/optimization.cljc","^2E",55,"^2F",7,"^2G",55,"^2H",10,"^2J",["^K",["^2K",["^K",[["^2L"]]]]]],"^:","~$io.mantisrx.mql.optimization/run","^2O",false,"^2D","io/mantisrx/mql/optimization.cljc","^2H",10,"^2P",["^K",[["^2L"]]],"^2Q",null,"^2R",["^K",[null,null]],"^2F",1,"^2E",55,"^2G",55,"^2S",1,"^2T",true,"^2J",["^K",["^2K",["^K",[["^2L"]]]]]]],"^I",["^ ","^D","^D"],"~:cljs.analyzer/constants",["^ ","^F",["^9",["~:pred","~:else","~:string_literal","~:BINARY_OPERATOR","~:apply","~:boolean_test","~:REGEX_OPERATOR"]],"~:order",["^37","^36","^3:","^38","^3;","^3<","^39"]],"^N",["^ ","^G",["^9",[]]],"^O",["^ "],"^P",["^E","^D","^@","^B"]],"^=","^;","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^2<",[["^3@","~:static-fns"],true,["^3@","~:elide-asserts"],false,["^3@","~:optimize-constants"],null,["^3@","~:emit-constants"],null,["^3@","~:infer-externs"],true,["^3@","^W"],null,["~:js-options","~:js-provider"],"^G",["~:mode"],"~:dev",["^3@","~:fn-invoke-direct"],null,["^3@","^Y"],"/dev/null"]]]