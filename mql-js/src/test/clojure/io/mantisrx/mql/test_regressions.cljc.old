(ns io.mantisrx.mql.test-regressions
  (:require [io.mantisrx.mql.core :refer :all]
            [rx.lang.clojure.core :as rx]
            [io.mantisrx.mql.components :as c]
            [io.mantisrx.mql.examples :as ex]
            [instaparse.core :as insta]
            [clojure.data.json :as json]
            [rx.lang.clojure.blocking :as rxb]
            [clojure.java.io :as io]
            [clojure.test :refer :all])
  (:import rx.Observable
           java.util.concurrent.TimeUnit))

(deftest missing-operands
  (testing "Missing operands in a where clause default it to false."
  (let
    [query "SELECT a,b from observable where e[\"c\"] > 10"
     context {"observable" (Observable/just {"a" 15 "b" 10})}
     result (rxb/into [] (eval-mql query context))]
    (is (= 0 (count result))))
  (let
    [query "SELECT a,b from observable where c > 10"
     context {"observable" (Observable/just {"a" 15 "b" 10})}
     result (rxb/into [] (eval-mql query context))]
    (is (= 0 (count result))))
  (let
    [query "SELECT a,b from observable where c ==~ /bacon/"
     context {"observable" (Observable/just {"a" 15 "b" 10})}
     result (rxb/into [] (eval-mql query context))]
    (is (= 0 (count result)))))
  (testing "Missing operands in a select clause are not present."
    (is (=
         {"a" 15 "b" 10}
         (first (rxb/into [] (eval-mql
                               "select a, b, c from observable"
                               {"observable" (Observable/just {"a" 15, "b" 10})})))))))

(deftest deep-bracket-nesting-where-clause
  (testing "Deeply bracketed query parses without error."
    (let
      [query "SELECT * FROM observable WHERE ((e[\"type\"] == \"AppExperience\") || (e[\"type\"] == \"AppExperienceEnded\") || (e[\"type\"] == \"UserInteraction\") || (e[\"type\"] == \"UserInteractionEnded\") || (e[\"tagUiAction\"] == \"true\") || (e[\"type\"] == \"UiBrowseStartup\") || (e[\"type\"] == \"UiBrowseStartupEnded\") || (e[\"type\"] == \"UiStartup\") || (e[\"type\"] == \"UiStartupEnded\") || (e[\"type\"] == \"UiDataRequest\") || (e[\"type\"] == \"UiDataRequestEnded\") || (e[\"type\"] == \"StartPlay\") || (e[\"type\"] == \"StartPlayEnded\"))"
       result (parser query)]
      (is (not (insta/failure? result)) (insta/get-failure result)))))

(deftest modulus-operator
  (testing "MQL correclty supports the modulus operator."
    (let
      [query "SELECT * FROM observable WHERE e[\"ts\"] % 25 == 0"
       datum {:a 1, :b 2, "ts" 25}
       datum2 {:a 1 :b 2 "ts" 19}
       result (rxb/into [] (eval-mql query {"observable" (Observable/just datum datum2)}))]
      (is (= (first result)
             datum))
      (is (= (count result) 1)))))

(deftest single-quoted-strings
  (testing "Properties can be quoted with single or double quotes"
    (let
      [q1 "select * from obs where e[\"bacon\"] == 1"
       q2 "select * from obs where e['bacon'] == 1"
       result1 (parser q1)
       result2 (parser q2)]
      (is (not (insta/failure? result1)) (insta/get-failure result1))
      (is (not (insta/failure? result2)) (insta/get-failure result2)))))

(deftest not-functionality
  (testing "NOT applied to operands works correctly."
    (let
      [q "select e[\"is_failure\"] from obs where not e[\"is_failure\"] == true"
       datum {"is_failure" false}
       context {"obs" (Observable/just datum)}
       result (rxb/into []  (eval-mql q context))]

      (is (= 1 (count result)))))
  (testing "NOT applied to a bracketed clause works correctly."
    (let
      [q "select * from obs where !(e[\"a\"] == e[\"b\"])"
       datum {"a" 1 "b" 2}
       context {"obs" (Observable/just datum)}
       result (rxb/into []  (eval-mql q context))]
      (is (= 1 (count result))))))

(deftest whitespace-surrounding-brackets
  (testing "Whitespace around brackets still parses with correct results."
    (let
      [q "select * from obs where ( (e['a'] == 'test' ) )"
       datum {"a" "test"}]
      (is (not (insta/failure? (parser q))) (insta/get-failure (parser q)))
      (is (= 1 (count (rxb/into [] (eval-mql q {"obs" (Observable/just datum)}))))))))

(deftest null-evaluates-to-nil
  (testing "Queries such as e['doesntExist'] == null function as expected."
    (let
      [q "select * from obs where not (e['a'] == null)" 
       parsed (parser q)]
      (is (not (insta/failure? (parser q))) (insta/get-failure (parser q)))
      (is (= 1 (count (rxb/into []  (eval-mql q {"obs" (Observable/just {"b" 15} {"a" 5})})))))
      (is (= {"a" 5} (first (rxb/into []  (eval-mql q {"obs" (Observable/just {"b" 15} {"a" 5})})))))
      ))
  (testing "Queries such as e['doesntExist'] <> null function as expected."
    (let
      [q "select * from obs where e['a'] <> null" 
       parsed (parser q)]
      (is (not (insta/failure? (parser q))) (insta/get-failure (parser q)))
      (is (= 1 (count (rxb/into []  (eval-mql q {"obs" (Observable/just {"b" 15} {"a" 5})})))))
      (is (= {"a" 5} (first (rxb/into []  (eval-mql q {"obs" (Observable/just {"b" 15} {"a" 5})}))))))))

(comment (deftest double-quotes-in-literal
  (testing "MQL Correclty allowes escaped double quotes in a string literal."
    (let
      [query "select * from bacon where e[\"th\\\"is\"] == \"that\""
       parsed (parser query)]
      (is (not (insta/failure? parsed)) (insta/get-failure parsed))))))

(deftest regex-can-contain-escaped-slahses
  (testing " Regex with slashes (works.)")
  (let
    [query "/\\/nccp\\/controller\\/(2.11|2.1[3-9]|3).*\\/license$/"
     parsed (parser query :start :re_expression)]
    (is (not (insta/failure? parsed)) (insta/get-failure parsed))))

(deftest regex-matchers-work
  (testing "Two regexes conjoined functions properly."
    (let
      [q "select * from obs where e[\"prop1\"] ==~ /^value1.*/ && e[\"prop2\"] ==~ /^value2.*/"
       datum {"prop1" "value1-and_some_extra"
              "prop2" "value2"}]
      (is (= datum (first (rxb/into [] (eval-mql q {"obs" (Observable/just datum)}))))))))

(deftest
  matchers-ignore-missing-properties
  (testing "A matcher fails to match a property if said property doesn't exist."
    (let
      [q "SELECT * FROM obs WHERE e[\"identity.matcher.1\"] == \"mismatch\""
       datum {"a" 1}]
      (is (= 0 (count (rxb/into [] (eval-mql q {"obs" (Observable/just datum)}))))))))

(defmacro assert-mql-behavior
  [query data expectation]
  (let
    [parsed (parser query)
     context {"obs" (if (map? data)
               (Observable/just data)
               (Observable/from data))}]
    (is (not (insta/failure? parsed)) (insta/get-failure parsed))
    (is (= expectation (if (map? expectation)
                         (first (rxb/into [] (eval-mql query context)))
                         (rxb/into [] (eval-mql query context)))))))

(deftest
  regular-expressions-meet-specifications
  (testing "Empty regular expression matches empty regex."
    (assert-mql-behavior
      "select * from obs where e['prop1'] ==~ //"
      [{"prop1" ""} {"prop1" "bacon"}]
      [{"prop1" ""}]))
  (testing "Start and end line markers match only whole strings."
    (assert-mql-behavior
      "select * from obs where e['a'] ==~ /^bacon$/"
      [{"a" "bacon"} {"a" "test bacon test"}]
      {"a" "bacon"}))
  (testing "Partial and whole strings match when start/end unspecified."
    (assert-mql-behavior
      "select * from obs where e['a'] ==~ /.*bacon.*/"
      [{"a" "bacon"} {"a" "test bacon test"}]
      [{"a" "bacon"} {"a" "test bacon test"}]))
  (testing "Unreserved non-alphabetic characters function unescaped."
    (assert-mql-behavior
      "select * from obs where e['prop'] ==~ /test:.*this/"
      [{"prop" "test:anythingthis"} {"prop" "test:this"}]
      [{"prop" "test:anythingthis"} {"prop" "test:this"}]))
  (testing "Unreserved non-alphabetic characters function when escaped. MANTIS-42 Related."
    (assert-mql-behavior
      "select * from obs where e['prop'] ==~ /test\\:.*this/"
      [{"prop" "test:anythingthis"} {"prop" "test:this"}]
      [{"prop" "test:anythingthis"} {"prop" "test:this"}])
    (assert-mql-behavior
      "SELECT * FROM obs WHERE e[\"msg\"] ==~ /.*SurfaceCache\\: over budget\\!.*/ && e[\"ui_version\"] ==~ /^UI-release-20161202_3661_26.*/"
      {"msg" "blah blah SurfaceCache: over budget! more stuff" "ui_version" "UI-release-20161202_3661_26--more"}
      {"msg" "blah blah SurfaceCache: over budget! more stuff" "ui_version" "UI-release-20161202_3661_26--more"}))
  (testing "Regex operators function as literals when escaped."
    (assert-mql-behavior
      "select * from obs where e['msg'] ==~ /\\.\\*SurfaceCache\\: over budget\\!.*/"
      {"msg" ".*SurfaceCache: over budget! more stuff" "ui_version" "UI-release-20161202_3661_26--more"}
      {"msg" ".*SurfaceCache: over budget! more stuff" "ui_version" "UI-release-20161202_3661_26--more"}))
  (testing "Escaping slashes allows them to function correctly."
    (assert-mql-behavior
      "select * from obs where e['endpoint'] ==~ /\\/nccp\\/controller\\/license/"
      [{"endpoint" "/nccp/controller/license"} {"endpoint" "/nccp/controller/license/"}]
      {"endpoint" "/nccp/controller/license"})))


(comment (deftest
  sticky-sampler-works
  (testing "Sticky sampler with regular query mode."
    (assert-mql-behavior
      "SELECT esn,mantis.meta.sourceName from obs SAMPLE {\"strategy\":\"STICKY\",\"threshold\":360000,\"keys\":[\"esn\"],\"salt\":1,\"factor\":1000000}"
      [{"esn" "TESTTWOTHREE"} {"esn" "TEST"}]
      [{"esn" "TEST"}]))
  (testing "Sticky sampler works with MQLQuery mode."
    (let
      [q "SELECT esn,mantis.meta.sourceName from obs SAMPLE {\"strategy\":\"STICKY\",\"threshold\":360000,\"keys\":[\"esn\"],\"salt\":1,\"factor\":1000000}"
       mql-query (c/make-query "id" q)]
      (is (= true (.matches mql-query {"esn" "TESTTWOTHREE"})))
      (is (= false (.matches mql-query {"esn" "TEST"})))))
  (testing "Sticky sampler with single quotes."
    (assert-mql-behavior
      "SELECT esn,mantis.meta.sourceName from obs SAMPLE {'strategy':'STICKY','threshold':360000,'keys':['esn'],'salt':1,'factor':1000000}"
      [{"esn" "TESTTWOTHREE"} {"esn" "TEST"}]
      [{"esn" "TEST"}]))))

(comment (deftest
  regex-works-against-nested-lists
  (testing ""
    (assert-mql-behavior
      "SELECT * from obs where e['a']['b'] ==~ /.*bacon.*/"
      {"a" {"b" ["one" "two" "bacon"]}}
      {"a" {"b" ["one" "two" "bacon"]}})
    (assert-mql-behavior
      "select * from obs where e['a'] ==~ /.*bacon.*/"
      {"a" {"b" 14 "c" "bacon"}}
      {"a" {"b" 14 "c" "bacon"}})
    (assert-mql-behavior
      "select * from obs where e['a'] ==~ /.*bacon.*/"
      [ {"b" {"c" "bacon"}}]
      []))))

(comment (deftest
  projections-with-superset-properties
  (testing "A select statement which selects both subproperties such as e['req']['url'] and supersets of this
            such as e['req'] should function regardless of order.
            We experienced a regression of 03/03/2017 in which selecting a top level property e['req'] first
            selected a structure which we could not mutate into the 'res' key. Consequently attempting to insert
            e['res']['url'] next resulted in an exception.
            The solution was to implement a check for these supersets as we don't even need to select the sub
            property if we're taking the whole nested tree."
    (let
      [q "select a, e['a']['b']['c'], d from observable"
       datum {"a" {"b" {"c" 1}} "d" 2 "c" 3}
       mql-query (c/make-query "id" q)
       projected (.project mql-query datum)]
      (is (= {"a" {"b" {"c" 1}} "d" 2}))))))

(comment (deftest order-by-with-group-by
  (testing
    "A query with both a group by and order by clause such as
     select MAX(latency), asg from stream window 1 group by asg order by e['MAX(latency)']
     should produce a series of windows with groups, ordered such that MAX(latency) values
     are sorted."
    (let
      [q "select MAX(latency), node from servo window 1 group by node order by e['MAX(latency)']"
       data [{"latency" 525.0 "node" "c"}
             {"latency" 100.0 "node" "a"}
             {"latency" 250.0 "node" "a"}
             {"latency" 321.5 "node" "b"}
             {"latency" 0.0 "node" "wont-be-in-data"}]
       expected [{"MAX(latency)" 250.0 "node" "a"}
                 {"MAX(latency)" 321.5 "node" "b"}
                 {"MAX(latency)" 525.0 "node" "c"}]
       context {"servo" (->> (Observable/interval 200 TimeUnit/MILLISECONDS)
                            (rx/take 4)
                            (rx/map #(nth data %)))}
       result (rxb/into [] (eval-mql q context))]
      (is (= result expected))))))
