{"version":3,"file":"cljs.tools.reader.reader_types.js","sources":["cljs/tools/reader/reader_types.cljs"],"mappings":"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","names":["cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","reader","cljs.core/update-in","cljs.core/conj","buffer","buf","cljs.core/PROTOCOL_SENTINEL","this__7750__auto__","writer__7751__auto__","opt__7752__auto__","cljs.core/-write","cljs.tools.reader.reader-types/PushbackReader","cljs.tools.reader.reader-types/->PushbackReader","s","c","buf-pos","buf-len","cljs.tools.reader.reader-types/SourceLoggingPushbackReader","cljs.tools.reader.reader-types/->SourceLoggingPushbackReader","cljs.core/deref","ch","cljs.tools.reader.reader-types/IndexingPushbackReader","line","s-or-rdr","line-start?","cljs.tools.reader.impl.utils/newline?","rdr","cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2","frames","char","temp__5457__auto__","x__7812__auto__","m__7813__auto__","cljs/tools.reader.reader-types.read-char","goog/typeOf","cljs.core/missing-protocol","cljs/tools.reader.reader-types.peek-char","cljs.tools.reader.reader-types/Reader","cljs.tools.reader.reader-types/NodeReadableReader","readable","cljs.core.object_array.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.impl.utils/char","prev-column","column","cljs.tools.reader.reader-types/unread","cljs.tools.reader.reader-types/->IndexingPushbackReader","cljs.tools.reader.reader-types/indexing-reader?","js/Error","s-len","s-pos","cljs.core/first","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader-types/drop-last-logged-char","file-name","cljs.tools.reader.reader-types/->NodeReadableReader","cljs.tools.reader.reader-types/normalize-newline","cljs.tools.reader.reader-types/string-reader","obj","m","cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","goog/string.StringBuffer","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/rest","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/StringReader","cljs.core/count","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3","var_args","G__31997","cljs.tools.reader.reader-types/indexing-push-back-reader","prev","cljs.tools.reader.reader-types/node-readable-push-back-reader","cljs.tools.reader.reader-types/merge-meta","ret","cljs.tools.reader.reader-types/peek-source-log","cljs.tools.reader.reader-types/get-column-number","G__31989","cljs.tools.reader.reader-types/string-push-back-reader","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","orig-meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/with-meta","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.reader-types/log-source-char","cljs.tools.reader.reader-types/source-logging-reader?","f","G__32000","cljs.tools.reader.reader-types/source-logging-push-back-reader","cljs.core/meta","cljs.tools.reader.reader-types/peek-char","r","cljs.tools.reader.reader-types/get-file-name","cljs.tools.reader.reader-types/line-start?","cljs/tools.reader.reader-types.unread","cljs.tools.reader.reader-types/IPushbackReader","cljs/tools.reader.reader-types.get-line-number","cljs/tools.reader.reader-types.get-column-number","cljs/tools.reader.reader-types.get-file-name","cljs.tools.reader.reader-types/IndexingReader","cljs.tools.reader.reader-types/log-source*","cljs.tools.reader.reader-types/read-line","cljs.tools.reader.reader-types/->StringReader"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Protocols and default Reader types implementation\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.reader-types\n  (:refer-clojure :exclude [char read-line])\n  (:require [cljs.tools.reader.impl.utils :refer [char whitespace? newline?]]\n            [goog.string])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; reader protocols\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defprotocol Reader\n  (read-char [reader]\n    \"Returns the next char from the Reader, nil if the end of stream has been reached\")\n  (peek-char [reader]\n    \"Returns the next char from the Reader without removing it from the reader stream\"))\n\n(defprotocol IPushbackReader\n  (unread [reader ch]\n    \"Pushes back a single character on to the stream\"))\n\n(defprotocol IndexingReader\n  (get-line-number [reader]\n    \"Returns the line number of the next character to be read from the stream\")\n  (get-column-number [reader]\n    \"Returns the column number of the next character to be read from the stream\")\n  (get-file-name [reader]\n    \"Returns the file name the reader is reading from, or nil\"))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; reader deftypes\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(deftype StringReader\n    [s s-len ^:mutable s-pos]\n  Reader\n  (read-char [reader]\n    (when (> s-len s-pos)\n      (let [r (.charAt s s-pos)]\n        (set! s-pos (inc s-pos))\n        r)))\n  (peek-char [reader]\n    (when (> s-len s-pos)\n      (.charAt s s-pos))))\n\n(deftype NodeReadableReader [readable ^:mutable buf]\n  Reader\n  (read-char [reader]\n    (if buf\n      (let [c (aget buf 0)]\n        (set! buf nil)\n        (char c))\n      (let [c (str (.read readable 1))]\n        (when c\n          (char c)))))\n  (peek-char [reader]\n    (when-not buf\n      (set! buf (str (.read readable 1))))\n    (when buf\n      (char (aget buf 0)))))\n\n(deftype PushbackReader\n  [^not-native rdr buf buf-len ^:mutable buf-pos]\n  Reader\n  (read-char [reader]\n    (let [c (if (< buf-pos buf-len)\n              (aget buf buf-pos)\n              (read-char rdr))]\n      (when (< buf-pos buf-len)\n        (set! buf-pos (inc buf-pos)))\n      (char c)))\n  (peek-char [reader]\n    (let [c (if (< buf-pos buf-len)\n              (aget buf buf-pos)\n              (peek-char rdr))]\n      (char c)))\n  IPushbackReader\n  (unread [reader ch]\n    (when ch\n      (if (zero? buf-pos) (throw (js/Error. \"Pushback buffer is full\")))\n      (set! buf-pos (dec buf-pos))\n      (aset buf buf-pos ch))))\n\n(defn- normalize-newline [^not-native rdr ch]\n  (if (identical? \\return ch)\n    (let [c (peek-char rdr)]\n      (when (or (identical? \\formfeed c)\n                (identical? \\newline c))\n        (read-char rdr))\n      \\newline)\n    ch))\n\n(deftype IndexingPushbackReader\n    [^not-native rdr ^:mutable line ^:mutable column\n     ^:mutable line-start? ^:mutable prev\n     ^:mutable prev-column file-name]\n  Reader\n  (read-char [reader]\n    (when-let [ch (read-char rdr)]\n      (let [ch (normalize-newline rdr ch)]\n        (set! prev line-start?)\n        (set! line-start? (newline? ch))\n        (when line-start?\n          (set! prev-column column)\n          (set! column 0)\n          (set! line (inc line)))\n        (set! column (inc column))\n        ch)))\n\n  (peek-char [reader]\n    (peek-char rdr))\n\n  IPushbackReader\n  (unread [reader ch]\n    (if line-start?\n      (do (set! line (dec line))\n          (set! column prev-column))\n      (set! column (dec column)))\n    (set! line-start? prev)\n    (unread rdr ch))\n\n  IndexingReader\n  (get-line-number [reader] (int line))\n  (get-column-number [reader] (int column))\n  (get-file-name [reader] file-name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Source Logging support\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn merge-meta\n  \"Returns an object of the same type and value as `obj`, with its\nmetadata merged over `m`.\"\n  [obj m]\n  (let [orig-meta (meta obj)]\n    (with-meta obj (merge m (dissoc orig-meta :source)))))\n\n(defn- peek-source-log\n  \"Returns a string containing the contents of the top most source\nlogging frame.\"\n  [frames]\n  (subs (str (:buffer frames)) (first (:offset frames))))\n\n(defn- log-source-char\n  \"Logs `char` to all currently active source logging frames.\"\n  [frames char]\n  (when-let [buffer (:buffer frames)]\n    (.append buffer char)))\n\n(defn- drop-last-logged-char\n  \"Removes the last logged character from all currently active source\nlogging frames. Called when pushing a character back.\"\n  [frames]\n  (when-let [buffer (:buffer frames)]\n    (.set buffer (subs (str buffer) 0 (dec (.getLength buffer))))))\n\n(deftype SourceLoggingPushbackReader\n    [^not-native rdr ^:mutable line ^:mutable column\n     ^:mutable line-start? ^:mutable prev\n     ^:mutable prev-column file-name frames]\n  Reader\n  (read-char [reader]\n    (when-let [ch (read-char rdr)]\n      (let [ch (normalize-newline rdr ch)]\n        (set! prev line-start?)\n        (set! line-start? (newline? ch))\n        (when line-start?\n          (set! prev-column column)\n          (set! column 0)\n          (set! line (inc line)))\n        (set! column (inc column))\n        (log-source-char @frames ch)\n        ch)))\n\n  (peek-char [reader]\n    (peek-char rdr))\n\n  IPushbackReader\n  (unread [reader ch]\n    (if line-start?\n      (do (set! line (dec line))\n          (set! column prev-column))\n      (set! column (dec column)))\n    (set! line-start? prev)\n    (when ch\n      (drop-last-logged-char @frames))\n    (unread rdr ch))\n\n  IndexingReader\n  (get-line-number [reader] (int line))\n  (get-column-number [reader] (int column))\n  (get-file-name [reader] file-name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; fast check for provided implementations\n(defn indexing-reader?\n  \"Returns true if the reader satisfies IndexingReader\"\n  [rdr]\n  (implements? IndexingReader rdr))\n\n(defn string-reader\n  \"Creates a StringReader from a given string\"\n  ([s]\n     (StringReader. s (count s) 0)))\n\n(defn string-push-back-reader\n  \"Creates a PushbackReader from a given string\"\n  ([s]\n     (string-push-back-reader s 1))\n  ([s buf-len]\n     (PushbackReader. (string-reader s) (object-array buf-len) buf-len buf-len)))\n\n(defn node-readable-push-back-reader [readable]\n  (PushbackReader. (NodeReadableReader. readable nil) (object-array 1) 1 1))\n\n(defn indexing-push-back-reader\n  \"Creates an IndexingPushbackReader from a given string or PushbackReader\"\n  ([s-or-rdr]\n     (indexing-push-back-reader s-or-rdr 1))\n  ([s-or-rdr buf-len]\n     (indexing-push-back-reader s-or-rdr buf-len nil))\n  ([s-or-rdr buf-len file-name]\n     (IndexingPushbackReader.\n      (if (string? s-or-rdr) (string-push-back-reader s-or-rdr buf-len) s-or-rdr) 1 1 true nil 0 file-name)))\n\n(defn source-logging-push-back-reader\n  \"Creates a SourceLoggingPushbackReader from a given string or PushbackReader\"\n  ([s-or-rdr]\n     (source-logging-push-back-reader s-or-rdr 1))\n  ([s-or-rdr buf-len]\n     (source-logging-push-back-reader s-or-rdr buf-len nil))\n  ([s-or-rdr buf-len file-name]\n     (SourceLoggingPushbackReader.\n      (if (string? s-or-rdr) (string-push-back-reader s-or-rdr buf-len) s-or-rdr)\n      1\n      1\n      true\n      nil\n      0\n      file-name\n      (atom {:buffer (StringBuffer.) :offset '(0)}))))\n\n(defn read-line\n  \"Reads a line from the reader or from *in* if no reader is specified\"\n  ([^not-native rdr]\n     (loop [c (read-char rdr) s (StringBuffer.)]\n       (if (newline? c)\n         (str s)\n         (recur (read-char rdr) (.append s c))))))\n\n(defn ^boolean source-logging-reader?\n  [rdr]\n  (instance? SourceLoggingPushbackReader rdr))\n\n(defn ^boolean line-start?\n  \"Returns true if rdr is an IndexingReader and the current char starts a new line\"\n  [^not-native rdr]\n  (when (indexing-reader? rdr)\n    (== 1 (get-column-number rdr))))\n\n(defn log-source*\n  [reader f]\n  (let [buffer (:buffer @(.-frames reader))]\n    (try\n      (swap! (.-frames reader) update-in [:offset] conj (.getLength buffer))\n      (let [ret (f)]\n        (if (implements? IMeta ret)\n          (merge-meta ret {:source (peek-source-log @ (.-frames reader))})\n          ret))\n      (finally\n        (swap! (.-frames reader) update-in [:offset] rest)))))\n\n"]}