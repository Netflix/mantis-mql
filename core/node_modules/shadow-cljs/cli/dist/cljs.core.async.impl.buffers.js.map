{"version":3,"file":"cljs.core.async.impl.buffers.js","sources":["cljs/core/async/impl/buffers.cljs"],"mappings":"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","names":["buf","arr","new-arr","keep?","v","tail","head","js/Error","n","length","itm","_","cnt","this","cljs.core.async.impl.buffers/NO-VAL","js/Object","new-arr-size","cljs.core.async.impl.buffers/promise-buffer","val","cljs.core.async.impl.buffers/acopy","cljs.core.async.impl.buffers/RingBuffer","js/Array","cljs.core.async.impl.buffers/DroppingBuffer","cljs.core.async.impl.buffers/ring-buffer","x","cljs.core.async.impl.buffers/undelivered?","cljs.core/PROTOCOL_SENTINEL","this__7750__auto__","writer__7751__auto__","opt__7752__auto__","cljs.core/-write","cljs.core.async.impl.buffers/PromiseBuffer","cljs.core.async.impl.buffers/->PromiseBuffer","cljs.core.async.impl.buffers/->RingBuffer","cljs.core.async.impl.buffers/fixed-buffer","dest","src","src-start","n__8124__auto__","cljs.core.async.impl.buffers/SlidingBuffer","cljs.core.async.impl.buffers/->SlidingBuffer","cljs.core.async.impl.buffers/dropping-buffer","dest-start","len","cljs.core.async.impl.buffers/sliding-buffer","cljs.core.async.impl.buffers/FixedBuffer","cljs.core.async.impl.buffers/->FixedBuffer","cljs.core.async.impl.protocols/remove!","cljs.core.async.impl.buffers/->DroppingBuffer"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.buffers\n  (:require [cljs.core.async.impl.protocols :as impl]))\n\n;; -----------------------------------------------------------------------------\n;; DO NOT USE, this is internal buffer representation\n\n(defn acopy [src src-start dest dest-start len]\n  (loop [cnt 0]\n    (when (< cnt len)\n      (aset dest\n            (+ dest-start cnt)\n            (aget src (+ src-start cnt)))\n      (recur (inc cnt)))))\n\n(deftype RingBuffer [^:mutable head ^:mutable tail ^:mutable length ^:mutable arr]\n  Object\n  (pop [_]\n    (when-not (zero? length)\n      (let [x (aget arr tail)]\n        (aset arr tail nil)\n        (set! tail (js-mod (inc tail) (alength arr)))\n        (set! length (dec length))\n        x)))\n\n  (unshift [_ x]\n    (aset arr head x)\n    (set! head (js-mod (inc head) (alength arr)))\n    (set! length (inc length))\n    nil)\n\n  (unbounded-unshift [this x]\n    (if (== (inc length) (alength arr))\n      (.resize this))\n    (.unshift this x))\n\n  ;; Doubles the size of the buffer while retaining all the existing values\n  (resize\n    [_]\n    (let [new-arr-size (* (alength arr) 2)\n          new-arr (make-array new-arr-size)]\n      (cond\n       (< tail head)\n       (do (acopy arr tail new-arr 0 length)\n           (set! tail 0)\n           (set! head length)\n           (set! arr new-arr))\n\n       (> tail head)\n       (do (acopy arr tail new-arr 0 (- (alength arr) tail))\n           (acopy arr 0 new-arr (- (alength arr) tail) head)\n           (set! tail 0)\n           (set! head length)\n           (set! arr new-arr))\n\n       (== tail head)\n       (do (set! tail 0)\n           (set! head 0)\n           (set! arr new-arr)))))\n\n  (cleanup [this keep?]\n    (dotimes [x length]\n      (let [v (.pop this)]\n        (when ^boolean (keep? v)\n          (.unshift this v))))))\n\n(defn ring-buffer [n]\n  (assert (> n 0) \"Can't create a ring buffer of size 0\")\n  (RingBuffer. 0 0 0 (make-array n)))\n\n;; -----------------------------------------------------------------------------\n\n(deftype FixedBuffer [buf n]\n  impl/Buffer\n  (full? [this]\n    (== (.-length buf) n))\n  (remove! [this]\n    (.pop buf))\n  (add!* [this itm]\n    (.unbounded-unshift buf itm)\n    this)\n  (close-buf! [this])\n  cljs.core/ICounted\n  (-count [this]\n    (.-length buf)))\n\n(defn fixed-buffer [n]\n  (FixedBuffer. (ring-buffer n) n))\n\n(deftype DroppingBuffer [buf n]\n  impl/UnblockingBuffer\n  impl/Buffer\n  (full? [this]\n    false)\n  (remove! [this]\n    (.pop buf))\n  (add!* [this itm]\n    (when-not (== (.-length buf) n)\n      (.unshift buf itm))\n    this)\n  (close-buf! [this])\n  cljs.core/ICounted\n  (-count [this]\n    (.-length buf)))\n\n(defn dropping-buffer [n]\n  (DroppingBuffer. (ring-buffer n) n))\n\n(deftype SlidingBuffer [buf n]\n  impl/UnblockingBuffer\n  impl/Buffer\n  (full? [this]\n    false)\n  (remove! [this]\n    (.pop buf))\n  (add!* [this itm]\n    (when (== (.-length buf) n)\n      (impl/remove! this))\n    (.unshift buf itm)\n    this)\n  (close-buf! [this])\n  cljs.core/ICounted\n  (-count [this]\n    (.-length buf)))\n\n(defn sliding-buffer [n]\n  (SlidingBuffer. (ring-buffer n) n))\n\n(defonce ^:private NO-VAL (js/Object.))\n(defn- undelivered? [val]\n  (identical? NO-VAL val))\n\n(deftype PromiseBuffer [^:mutable val]\n  impl/UnblockingBuffer\n  impl/Buffer\n  (full? [_]\n    false)\n  (remove! [_]\n    val)\n  (add!* [this itm]\n    (when (undelivered? val)\n      (set! val itm))\n    this)\n  (close-buf! [_]\n    (when (undelivered? val)\n      (set! val nil)))\n  cljs.core/ICounted\n  (-count [_]\n    (if (undelivered? val) 0 1)))\n\n(defn promise-buffer []\n  (PromiseBuffer. NO-VAL))\n"]}