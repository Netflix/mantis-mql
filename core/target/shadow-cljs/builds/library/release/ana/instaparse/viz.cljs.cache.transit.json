["^ ","~:output",["^ ","~:js","goog.provide('instaparse.viz');\n/**\n * Takes a subtree of the parse tree and returns a [start-index end-index] pair\n * indicating the span of text parsed by this subtree.\n * start-index is inclusive and end-index is exclusive, as is customary\n * with substrings.\n * Returns nil if no span metadata is attached.\n */\ninstaparse.viz.span = (function instaparse$viz$span(tree){\nvar m = cljs.core.meta(tree);\nvar s = new cljs.core.Keyword(\"instaparse.gll\",\"start-index\",\"instaparse.gll/start-index\",404653620).cljs$core$IFn$_invoke$arity$1(m);\nvar e = new cljs.core.Keyword(\"instaparse.gll\",\"end-index\",\"instaparse.gll/end-index\",-1851404441).cljs$core$IFn$_invoke$arity$1(m);\nif(cljs.core.truth_((function (){var and__5114__auto__ = s;\nif(cljs.core.truth_(and__5114__auto__)){\nreturn e;\n} else {\nreturn and__5114__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s,e], null);\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ "],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.viz","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^?","~$goog","^@"],"~:seen",["^8",[]],"~:uses",null,"~:require-macros",["^ ","^?","^?"],"~:form",["~#list",["~$ns","^:"]],"~:js-deps",["^ "],"~:deps",["^@","^?"]],"^<","^:","~:resource-id",["~:shadow.build.classpath/resource","instaparse/viz.cljs"],"~:compiled-at",1516732932149,"~:resource-name","instaparse/viz.cljs","~:warnings",[],"~:source","(ns instaparse.viz)   \r\n\r\n(defn span\r\n  \"Takes a subtree of the parse tree and returns a [start-index end-index] pair\r\n   indicating the span of text parsed by this subtree.\r\n   start-index is inclusive and end-index is exclusive, as is customary\r\n   with substrings.\r\n   Returns nil if no span metadata is attached.\"\r\n  [tree]\r\n  (let [m (meta tree)\r\n        s (:instaparse.gll/start-index m)\r\n        e (:instaparse.gll/end-index m)]\r\n    (when (and s e)\r\n      [s e])))\r\n\r\n","~:reader-features",["^8",["~:cljs"]],"~:source-map",["^ ","~i2",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",1],["^ ","^R",22,"^S",8],["^ ","^R",0,"^S",9]],"~i6",[["^ ","^R",0,"^S",8,"^9","instaparse.viz/span"]]],"~i8",["^ ","~i3",[["^ ","^R",52,"^S",8,"^9","tree"]]],"~i9",["^ ","~i2",[["^ ","^R",0,"^S",9],["^ ","^R",0,"^S",12]],"~i8",[["^ ","^R",4,"^S",9,"^9","m"]],"~i10",[["^ ","^R",8,"^S",9]],"~i11",[["^ ","^R",8,"^S",9,"^9","cljs.core/meta"]],"~i16",[["^ ","^R",23,"^S",9,"^9","tree"]]],"^T",["^ ","~i8",[["^ ","^R",4,"^S",10,"^9","s"]],"^T",[["^ ","^R",8,"^S",10],["^ ","^R",8,"^S",10]],"~i39",[["^ ","^R",131,"^S",10,"^9","m"]]],"^U",["^ ","~i8",[["^ ","^R",4,"^S",11,"^9","e"]],"^T",[["^ ","^R",8,"^S",11],["^ ","^R",8,"^S",11]],"~i37",[["^ ","^R",129,"^S",11,"^9","m"]]],"~i12",["^ ","~i4",[["^ ","^R",0,"^S",12],["^ ","^R",0,"^S",19],["^ ","^R",0,"^S",19],["^ ","^R",0,"^S",21]],"^T",[["^ ","^R",20,"^S",12],["^ ","^R",37,"^S",12,"^9","and__5114__auto__"],["^ ","^R",0,"^S",13],["^ ","^R",0,"^S",13],["^ ","^R",20,"^S",13,"^9","and__5114__auto__"],["^ ","^R",0,"^S",16,"^9","and__5114__auto__"]],"~i15",[["^ ","^R",57,"^S",12,"^9","s"]],"~i17",[["^ ","^R",0,"^S",14,"^9","e"]]],"~i13",["^ ","~i7",[["^ ","^R",90,"^S",19,"^9","s"]],"~i9",[["^ ","^R",92,"^S",19,"^9","e"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^?"],1516731430000,["^J","goog/math/math.js"],1516731431000,["^J","goog/array/array.js"],1516731431000,["^J","goog/debug/error.js"],1516731431000,["^J","goog/dom/nodetype.js"],1516731431000,["^J","instaparse/viz.cljs"],1516731432000,["^J","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^J","goog/math/long.js"],1516731431000,["^J","goog/functions/functions.js"],1516731431000,["^J","goog/structs/map.js"],1516731431000,["^J","goog/asserts/asserts.js"],1516731431000,["^J","goog/uri/uri.js"],1516731431000,["^J","goog/base.js"],1516731431000,["^J","goog/structs/structs.js"],1516731431000,["^J","goog/string/string.js"],1516731431000,["^J","goog/reflect/reflect.js"],1516731431000,["^J","goog/string/stringbuffer.js"],1516731431000,["^J","goog/iter/iter.js"],1516731431000,["^J","cljs/core.cljs"],1516731430000,["^J","goog/math/integer.js"],1516731431000,["^J","goog/uri/utils.js"],1516731431000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ "],"^6",null,"^7",["^8",[]],"^9","^:","^=",null,"^>",["^ ","^?","^?","^@","^@"],"^A",["^8",[]],"^B",null,"~:defs",["^ ","~$span",["^ ","~:protocol-inline",null,"^5",["^ ","~:file","instaparse/viz.cljs","~:line",3,"~:column",7,"~:end-line",3,"~:end-column",11,"~:arglists",["^E",["~$quote",["^E",[["~$tree"]]]]],"~:doc","Takes a subtree of the parse tree and returns a [start-index end-index] pair\n   indicating the span of text parsed by this subtree.\n   start-index is inclusive and end-index is exclusive, as is customary\n   with substrings.\n   Returns nil if no span metadata is attached."],"^9","~$instaparse.viz/span","~:variadic",false,"^1:","instaparse/viz.cljs","^1>",11,"~:method-params",["^E",[["^1A"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^1<",1,"^1;",3,"^1=",3,"~:max-fixed-arity",1,"~:fn-var",true,"^1?",["^E",["^1@",["^E",[["^1A"]]]]],"^1B","Takes a subtree of the parse tree and returns a [start-index end-index] pair\n   indicating the span of text parsed by this subtree.\n   start-index is inclusive and end-index is exclusive, as is customary\n   with substrings.\n   Returns nil if no span metadata is attached."]],"^C",["^ ","^?","^?"],"~:cljs.analyzer/constants",["^ ","^A",["^8",["~:instaparse.gll/end-index","~:instaparse.gll/start-index"]],"~:order",["^1L","^1K"]],"^G",["^ "],"^H",["^@","^?"]],"^<","^:","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^13",[["^1P","~:static-fns"],true,["^1P","~:elide-asserts"],true,["^1P","~:optimize-constants"],null,["^1P","~:emit-constants"],null,["^1P","~:infer-externs"],true,["^1P","^O"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:release",["^1P","~:fn-invoke-direct"],null,["^1P","^Q"],null]]]