buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:9.4.2'
        classpath 'io.mantisrx:mantis-gradle-plugin:1.2.+'
        classpath "io.freefair.gradle:lombok-plugin:5.3.3.3"
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.0.0'
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.0'
        classpath 'com.netflix.nebula:nebula-clojure-plugin:11.0.1'
    }
}

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'nebula.release'
    apply plugin: 'nebula.clojure'
    apply plugin: 'com.github.johnrengelman.shadow'

    // Disable license check for netflixoss gradle 7.x compatibility
    gradle.startParameter.excludedTaskNames += "licenseMain"
    gradle.startParameter.excludedTaskNames += "licenseTest"

    clojure {
        warnOnReflection = true
        aotCompile = true
    }
}


repositories {
    mavenCentral()
    maven { url "https://clojars.org/repo" }
}

group = "io.mantisrx"


subprojects {
    apply plugin: 'java-library'
    apply plugin: 'pmd'

    group = 'io.mantisrx'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    if (project.hasProperty('useMavenLocal')) {
        repositories {
            mavenCentral()
                exclusiveContent {
                    forRepository {
                        maven {
                            url "https://artifactory-oss.prod.netflix.net/artifactory/required-jcenter-modules-backup"
                        }
                    }
                    filter {
                        includeGroupByRegex "net\\.andreinc.*"
                    }
                }
        }


        repositories {
            mavenCentral()
        }

        tasks.withType(Javadoc).all {
            enabled = false
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }

    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}
