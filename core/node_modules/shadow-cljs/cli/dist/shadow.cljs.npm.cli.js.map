{"version":3,"file":"shadow.cljs.npm.cli.js","sources":["shadow/cljs/npm/cli.cljs"],"mappings":"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","names":["var_args","args__17428__auto__","len__17421__auto__","i__17422__auto__","argseq__17429__auto__","cljs.core/IndexedSeq","shadow.cljs.npm.cli/log","seq31441","cljs.core/seq","args","G__31442","js/process.stderr.write","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/jar-version","js/require","G__31446","G__31447","goog.object/get","shadow.cljs.npm.cli/file-older-than","a","b","xa","js/shadow.js.shim.module$fs.statSync","xb","shadow.cljs.npm.cli/ensure-dir","dir","js/shadow.js.shim.module$fs.existsSync","js/shadow.js.shim.module$fs.mkdirSync","shadow.cljs.npm.cli/cp-separator","clojure.string/starts-with?","js/process.platform","shadow.cljs.npm.cli/is-directory?","path","js/shadow.js.shim.module$fs.lstatSync","shadow.cljs.npm.cli/run","project-root","cmd","proc-opts","spawn-opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/clj->js","G__31448","G__31449","G__31450","js/shadow.js.shim.module$child_process.spawnSync","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/run-java","opts","result","status","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","and__16130__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli.log.cljs$core$IFn$_invoke$arity$variadic","js/process.exit","shadow.cljs.npm.cli/default-config-str","shadow.cljs.npm.util/slurp","js/shadow.js.shim.module$path.resolve","js/__dirname","shadow.cljs.npm.cli/default-config","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/ensure-config","root","config","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/run-init","js/shadow.js.shim.module$readline_sync.keyInYN","js/shadow.js.shim.module$fs.writeFileSync","shadow.cljs.npm.cli/modified-dependencies?","cp-file","cp","shadow.cljs.npm.cli/unwanted-deps","shadow.cljs.npm.cli/drop-unwanted-deps","dependencies","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__31452","vec__31453","seq__31454","first__31455","cljs.core/first","cljs.core/next","dep-id","_","cljs.core/contains?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/add-exclusions","p__31456","vec__31457","seq__31458","first__31459","version","modifiers","dep","mods","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.update.cljs$core$IFn$_invoke$arity$3","excl","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/reduce-kv","cljs.core/conj","p__31461","map__31462","cljs.core/PROTOCOL_SENTINEL","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/get-classpath","cache-root","classpath-config","p1__31460#","updated?","or__16142__auto__","cljs.core/not","jar","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/process.stdout","js/process.stderr","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.npm.cli/remove-class-files","seq__31464","chunk__31466","count__31467","i__31468","temp__5457__auto__","cljs.core/chunked-seq?","c__17073__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","file","js/shadow.js.shim.module$fs.readdirSync","clojure.string/ends-with?","e31470","e31471","js/shadow.js.shim.module$fs.unlinkSync","e","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.npm.cli/print-error","ex","map__31488","tag","data","cljs.core/ex-data","p__31490","map__31491","shadow.cljs.npm.cli/logging-config","log-config-path","G__31493","G__31494","shadow.cljs.npm.cli/get-shared-home","G__31497","G__31498","G__31499","js/shadow.js.shim.module$os.homedir","shadow.cljs.npm.cli/aot-compile","home-dir","aot-lock-file","aot-classes","aot-config","js/shadow.js.shim.module$mkdirp.sync","map__31500","files","jvm-args","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","p__31503","map__31504","shadow.cljs.npm.cli/get-jvm-opts","source-paths","jvm-opts","aot-path","classpath","classpath-str","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.npm.cli/run-standalone","cli-args","p__31506","map__31507","shadow.cljs.npm.cli/get-lein-args","lein","map__31509","profile","lein-config","cljs.core/map?","G__31511","shadow.cljs.npm.cli/run-lein","lein-args","shadow.cljs.npm.cli/wait-for-server-start!","port-file","proc","G__31512","G__31513","js/setTimeout","p__31514","map__31515","shadow.cljs.npm.cli/server-start","vec__31517","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","server-cmd","server-args","cache-dir","out-path","err-path","out","js/shadow.js.shim.module$fs.openSync","err","pid-path","G__31520","G__31521","G__31522","js/shadow.js.shim.module$child_process.spawn","G__31523","G__31524","shadow.cljs.npm.cli/server-stop","server-pid-file","signal","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","cli-repl","G__31527","G__31528","js/parseInt","socket","G__31529","js/shadow.js.shim.module$net.connect","cljs.core.async/close!","shadow.cljs.npm.cli/defaults","p__31530","map__31531","shadow.cljs.npm.cli/merge-config-with-cli-opts","options","map__31533","G__31535","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","shadow.cljs.npm.cli/prettier-m2-path","temp__5455__auto__","idx","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p__31536","map__31537","shadow.cljs.npm.cli/print-cli-info","config-path","G__31539","G__31540","cljs.core/println","js/__filename","seq__31541","chunk__31542","count__31543","i__31544","source-path","map__31545","cp-data","seq__31547","chunk__31548","count__31549","i__31550","shadow.cljs.npm.cli/getenv","envname","js/process.env","shadow.cljs.npm.cli/read-config","e31599","G__31601","fexpr__31600","p1__31598#","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","goog.string/format","shadow.cljs.npm.cli/guess-node-package-manager","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","yarn-lock","shadow.cljs.npm.cli/check-project-install!","package-json-file","G__31603","pkg","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","vec__31604","pkg-cmd","pkg-args","G__31607","cljs.core/Keyword","js/Error","G__31608","G__31609","G__31610","shadow.cljs.npm.cli/generate-xml","struct","cljs.core/vector?","vec__31615","seq__31616","first__31617","attrs","more","cljs.core/name","p__31618","vec__31619","key","value","ns","cljs.core/namespace","cljs.core/rest","p__31622","map__31623","shadow.cljs.npm.cli/generate-pom","pom-path","G__31626","project-name","js/shadow.js.shim.module$path.basename","G__31627","G__31628","p__31629","vec__31630","seq__31631","first__31632","dep-sym","dep-version","id","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__31633","shadow.cljs.npm.cli/main","onExit","G__31634","code","e31635","map__31636","action","builds","summary","errors","shadow.cljs.devtools.cli-opts/parse","shadow.cljs.devtools.cli-opts/help","e31638","js/shadow.js.shim.module$path.dirname","map__31639","server-pid","server-running?","c__28360__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__28361__auto__","switch__28322__auto__","state_31650","state_val_31651","statearr-31652","statearr-31653","inst_31642","cljs.core.async.impl.ioc-helpers/take!","statearr-31654","inst_31647","inst_31648","statearr-31655","cljs.core.async.impl.ioc-helpers/return-chan","inst_31644","statearr-31656","statearr-31657","state-machine__28323__auto__","ret-value__28324__auto__","result__28325__auto__","cljs.core/keyword-identical?","e31658","js/Object","ex__28326__auto__","statearr-31659","cljs.core.async.impl.ioc-helpers/process-exception","state__28362__auto__","statearr-31660","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","shadow.cljs.npm.client/run"],"sourcesContent":["(ns shadow.cljs.npm.cli\n  (:require\n    [\"path\" :as path]\n    [\"fs\" :as fs]\n    [\"os\" :as os]\n    [\"child_process\" :as cp]\n    [\"readline-sync\" :as rl-sync] ;; FIXME: drop this?\n    [\"mkdirp\" :as mkdirp]\n    [\"net\" :as node-net]\n    [cljs.core.async :as async :refer (go go-loop alt!)]\n    #_[cljs.tools.reader :as reader]\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.object :as gobj]\n    [goog.string.format]\n    [goog.string :refer (format)]\n    [shadow.cljs.npm.util :as util]\n    [shadow.cljs.npm.client :as client]\n    [shadow.cljs.devtools.cli-opts :as opts]\n    ))\n\n(defn log [& args]\n  (js/process.stderr.write (str (->> args (map str) (str/join \" \")) \"\\n\")))\n\n(def jar-version\n  (-> (js/require \"../../package.json\")\n      (gobj/get \"jar-version\")))\n\n(defn file-older-than [a b]\n  (let [xa (fs/statSync a)\n        xb (fs/statSync b)]\n    (> (.-mtime xa) (.-mtime xb))))\n\n(defn ensure-dir [dir]\n  (when-not (fs/existsSync dir)\n    (fs/mkdirSync dir)))\n\n(def cp-separator\n  (if (str/starts-with? js/process.platform \"win\")\n    \";\"\n    \":\"))\n\n(defn is-directory? [path]\n  (-> (fs/lstatSync path)\n      (.isDirectory)))\n\n(defn run [project-root cmd args proc-opts]\n  (let [spawn-opts\n        (-> {:cwd project-root\n             :stdio \"inherit\"}\n            (merge proc-opts)\n            (clj->js))]\n\n    (cp/spawnSync cmd (into-array args) spawn-opts)))\n\n(defn run-java [project-root args opts]\n  (let [^js result\n        (run project-root \"java\" args opts)\n\n        status\n        (.-status result)]\n\n    (cond\n      (zero? status)\n      true\n\n      (pos? status)\n      (throw (ex-info \"java process exit with non-zero exit code\" {:tag :java-exit :status status :result result}))\n\n      (and (.-error result) (= \"ENOENT\" (.. result -error -errno)))\n      (do (log \"shadow-cljs - java not found, please install a Java8 SDK. (OpenJDK or Oracle)\")\n          (js/process.exit 1)\n          ))))\n\n(def default-config-str\n  (util/slurp (path/resolve js/__dirname \"..\" \"default-config.edn\")))\n\n(def default-config\n  (reader/read-string default-config-str))\n\n(defn ensure-config []\n  (loop [root (path/resolve)]\n    (let [config (path/resolve root \"shadow-cljs.edn\")]\n      (cond\n        (fs/existsSync config)\n        config\n\n        ;; check parent directory\n        ;; might be in $PROJECT/src/demo it should find $PROJECT/shadow-cljs.edn\n        (not= root (path/resolve root \"..\"))\n        (recur (path/resolve root \"..\"))\n\n        :else ;; ask to create default config in current dir\n        false\n        ))))\n\n(defn run-init [opts]\n  (let [config (path/resolve \"shadow-cljs.edn\")]\n    (log \"shadow-cljs - init\")\n    (log (str \"- \" config))\n\n    (when (rl-sync/keyInYN \"Create?\")\n      ;; FIXME: ask for default source path, don't just use one\n      (fs/writeFileSync config default-config-str)\n      (log \"shadow-cljs - created default configuration\")\n      config\n      )))\n\n(defn modified-dependencies? [cp-file config]\n  (let [cp (-> (util/slurp cp-file)\n               (reader/read-string))]\n\n    (or (not= (:version cp) (:version config))\n        (not= (:dependencies cp) (:dependencies config))\n        )))\n\n;; these might cause trouble when using different versions\n;; than expected by shadow-cljs.\n(def unwanted-deps\n  '#{org.clojure/clojurescript ;; we will always be on the latest version\n     org.clojure/clojure ;; can't run on 1.8\n     thheller/shadow-cljs ;; just in case, added later\n     })\n\n(defn drop-unwanted-deps [dependencies]\n  (->> dependencies\n       (remove (fn [[dep-id & _]]\n                 (contains? unwanted-deps dep-id)))\n       (into [])))\n\n(defn add-exclusions [dependencies]\n  (->> dependencies\n       (map (fn [[dep-id version & modifiers :as dep]]\n              (let [mods\n                    (-> (apply hash-map modifiers)\n                        (update :exclusions (fn [excl]\n                                              (->> excl\n                                                   (concat unwanted-deps)\n                                                   (distinct)\n                                                   (into [])))))]\n                (reduce-kv conj [dep-id version] mods))))\n       (into [])))\n\n(defn get-classpath [project-root {:keys [cache-root version] :as config}]\n  (let [cp-file\n        (path/resolve project-root cache-root \"classpath.edn\")\n\n        classpath-config\n        (-> config\n            (update :dependencies drop-unwanted-deps)\n            (update :dependencies add-exclusions)\n            (update :dependencies #(into [['thheller/shadow-cljs jar-version]] %)))\n\n        ;; only need to rebuild the classpath if :dependencies\n        ;; or the version changed\n        updated?\n        (when (or (not (fs/existsSync cp-file))\n                  (modified-dependencies? cp-file classpath-config))\n          ;; re-create classpath by running the java helper\n          (let [jar (js/require \"shadow-cljs-jar/path\")]\n            (run-java project-root [\"-jar\" jar] {:input (pr-str classpath-config)\n                                                 :stdio [nil js/process.stdout js/process.stderr]})\n            true))]\n\n    ;; only return :files since the rest is just cache info\n    (-> (util/slurp cp-file)\n        (reader/read-string)\n        (assoc :updated? updated?))))\n\n(defn remove-class-files [path]\n  (when (fs/existsSync path)\n    ;; shadow-cljs - error ENOENT: no such file or directory, unlink '...'\n    ;; I have no idea how readdir can find a file but then not find it when\n    ;; trying to delete it?\n    (doseq [file (into [] (fs/readdirSync path))\n            :let [file (path/resolve path file)]]\n      (cond\n        (str/ends-with? file \".class\")\n        (when (fs/existsSync file)\n          (try\n            (fs/unlinkSync file)\n            (catch :default e\n              (prn [:failed-to-delete file]))))\n\n        (is-directory? file)\n        (remove-class-files file)\n\n        :else\n        nil\n        ))))\n\n(defn print-error [ex]\n  (let [{:keys [tag] :as data}\n        (ex-data ex)]\n\n    (when (not= tag :java-exit)\n      (log \"shadow-cljs - error\" (.-message ex)))\n    ))\n\n(defn logging-config [project-root {:keys [cache-root] :as config}]\n  (if (false? (:log config))\n    []\n    (let [log-config-path\n          (path/resolve project-root cache-root \"logging.properties\")]\n\n      (when-not (fs/existsSync log-config-path)\n        (fs/writeFileSync log-config-path\n          (str (util/slurp (path/resolve js/__dirname \"..\" \"default-log.properties\"))\n               \"\\njava.util.logging.FileHandler.pattern=\" (path/resolve cache-root \"shadow-cljs.log\") \"\\n\")))\n\n      [(str \"-Djava.util.logging.config.file=\" log-config-path)]\n      )))\n\n(defn get-shared-home []\n  (path/resolve (os/homedir) \".shadow-cljs\" jar-version))\n\n(defn aot-compile []\n  (let [home-dir\n        (get-shared-home)\n\n        cp-file\n        (path/resolve home-dir \"classpath.edn\")\n\n        aot-lock-file\n        (path/resolve home-dir \"aot.edn\")\n\n        aot-classes\n        (path/resolve home-dir \"aot\")\n\n        aot-config\n        {:cache-root home-dir\n         :version jar-version\n         :dependencies [['thheller/shadow-cljs jar-version]]}]\n\n    (when (not (fs/existsSync cp-file))\n      ;; re-create classpath by running the java helper\n      (let [jar (js/require \"shadow-cljs-jar/path\")]\n        (mkdirp/sync home-dir)\n        (run-java home-dir [\"-jar\" jar] {:input (pr-str aot-config)\n                                         :stdio [nil js/process.stdout js/process.stderr]})\n        true))\n\n    ;; FIXME: should actually treat this as a lockfile but there should not be 2 separate instances doing this at the same time\n    ;; FIXME: could probably rework so that the jar downloader also builds AOT\n\n    (when (not (fs/existsSync aot-lock-file))\n      (mkdirp/sync aot-classes)\n\n      (let [{:keys [files] :as classpath-config}\n            (-> (util/slurp cp-file)\n                (reader/read-string))\n\n            jvm-args\n            [\"-cp\" (str/join cp-separator files)\n             (str \"-Dclojure.compile.path=\" aot-classes)\n             \"clojure.main\"\n             \"-m\" \"shadow.cljs.aot-helper\"]]\n\n        ;; println since this runs during npm install\n        (println \"shadow-cljs - aot compile\")\n        (run-java home-dir jvm-args {})\n        (fs/writeFileSync aot-lock-file \"true\")\n        (println \"shadow-cljs - aot compilation finished\")\n        ))))\n\n(defn get-jvm-opts [project-root {:keys [source-paths jvm-opts] :as config}]\n  (let [home-dir\n        (get-shared-home)\n\n        aot-path\n        (path/resolve home-dir \"aot\")\n\n        classpath\n        (get-classpath project-root config)\n\n        classpath-str\n        (->> (:files classpath)\n             (concat [aot-path])\n             (concat source-paths)\n             (str/join cp-separator))]\n\n    (-> []\n        (into jvm-opts)\n        (into (logging-config project-root config))\n        (conj \"-cp\" classpath-str)\n        )))\n\n(defn run-standalone [project-root config args opts]\n  (aot-compile) ;; should be cached already\n\n  (let [cli-args\n        (-> (get-jvm-opts project-root config)\n            (conj \"clojure.main\" \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    (log \"shadow-cljs - starting ...\")\n    (run-java project-root cli-args {})))\n\n(defn get-lein-args [{:keys [lein] :as config}]\n  (let [{:keys [profile] :as lein-config}\n        (cond\n          (map? lein)\n          lein\n          (true? lein)\n          {})]\n\n    (-> []\n        (cond->\n          profile\n          (conj \"with-profile\" profile)\n          ))))\n\n(defn run-lein [project-root config args opts]\n  (let [lein-args\n        (-> (get-lein-args config)\n            (conj \"run\" \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    (log \"shadow-cljs - running: lein\" (str/join \" \" lein-args))\n    (run project-root \"lein\" lein-args {})))\n\n(defn wait-for-server-start! [port-file ^js proc]\n  (if (fs/existsSync port-file)\n    (do (js/process.stderr.write \" ready!\\n\")\n        (.unref proc))\n    (do (js/process.stderr.write \".\")\n        (js/setTimeout #(wait-for-server-start! port-file proc) 250))\n    ))\n\n(defn server-start [project-root {:keys [lein cache-root] :as config} args opts]\n  (let [[server-cmd server-args]\n        (if-not lein\n          [\"java\"\n           (-> (get-jvm-opts project-root config)\n               (conj \"clojure.main\" \"-m\"))]\n          [\"lein\"\n           (-> (get-lein-args config)\n               (conj \"run\" \"-m\"))])\n\n        server-args\n        (conj server-args \"shadow.cljs.devtools.cli\" \"--npm\" \"server\")]\n\n    (js/process.stderr.write \"shadow-cljs - server starting \")\n\n    (let [cache-dir\n          (path/resolve project-root cache-root)\n\n          out-path\n          (path/resolve cache-dir \"server.stdout.log\")\n\n          err-path\n          (path/resolve cache-dir \"server.stderr.log\")\n\n          out\n          (fs/openSync out-path \"a\")\n\n          err\n          (fs/openSync err-path \"a\")\n\n          pid-path\n          (path/resolve cache-dir \"server.pid\")\n\n          proc\n          (cp/spawn server-cmd (into-array server-args)\n            #js {:detached true\n                 :stdio #js [\"ignore\", out, err]})]\n\n      (fs/writeFileSync pid-path (str (.-pid proc)))\n\n      (wait-for-server-start! (path/resolve cache-dir \"cli-repl.port\") proc)\n\n      #_(.unref proc)\n      )))\n\n(defn server-stop [project-root config server-pid-file args opts]\n  (let [signal (async/chan)\n\n        cli-repl\n        (-> (util/slurp server-pid-file)\n            (js/parseInt 10))\n\n        socket\n        (node-net/connect\n          #js {:port cli-repl\n               :host \"localhost\"\n               :timeout 1000})]\n\n    (.on socket \"connect\" #(.write socket \"(shadow.cljs.devtools.server/remote-stop!)\\n:repl/quit\\n\"))\n    (.on socket \"error\" #(fs/unlinkSync server-pid-file))\n    (.on socket \"close\" #(async/close! signal))\n\n    signal))\n\n(def defaults\n  {:cache-root \"target/shadow-cljs\"\n   :version jar-version\n   :dependencies []})\n\n(defn merge-config-with-cli-opts [config {:keys [options] :as opts}]\n  (let [{:keys [dependencies]} options]\n    (-> config\n        (cond->\n          (seq dependencies)\n          (update :dependencies into dependencies)\n          ))))\n\n(defn prettier-m2-path [path]\n  (if-let [idx (str/index-of path \".m2\")]\n    ;; strip .m2/repository/\n    (str \"[maven] \" (subs path (+ idx 15)))\n    path\n    ))\n\n(defn print-cli-info [project-root config-path {:keys [cache-root source-paths] :as config} opts]\n  (println \"=== Version\")\n  (println \"cli:           \" (-> (js/require \"../../package.json\")\n                                 (gobj/get \"version\")))\n  (println \"jar-version:   \" jar-version)\n  (println \"config-version:\" (:version config))\n  (println)\n\n  (println \"=== Paths\")\n  (println \"cli:    \" js/__filename)\n  (println \"config: \" config-path)\n  (println \"project:\" project-root)\n  (println \"cache:  \" cache-root)\n  (println)\n\n  (println \"=== Java\")\n  (run-java project-root [\"-version\"] {})\n  (println)\n\n  (println \"=== Source Paths\")\n  (doseq [source-path source-paths]\n    (println (path/resolve project-root source-path)))\n  (println)\n\n  (println \"=== Dependencies\")\n  (let [cp-file (path/resolve project-root cache-root \"classpath.edn\")]\n    (println \"cache-file:\" cp-file)\n    (when (fs/existsSync cp-file)\n      (let [{:keys [files] :as cp-data}\n            (-> (util/slurp cp-file)\n                (reader/read-string))]\n\n        (doseq [file files]\n          (println (prettier-m2-path file)))\n        )))\n  (println))\n\n(defn- getenv [envname]\n  (str (aget js/process.env envname)))\n\n(defn read-config [config-path opts]\n  (try\n    (-> (util/slurp config-path)\n        (#(reader/read-string {:readers {'shadow/env getenv}} %))\n        (merge-config-with-cli-opts opts))\n    (catch :default ex\n      ;; FIXME: missing tools.reader location information\n      ;; FIXME: show error location with excerpt like other warnings\n      (throw (ex-info (format \"failed reading config file: %s\" config-path) {:config-path config-path} ex)))))\n\n(defn guess-node-package-manager [project-root config]\n  (or (get-in config [:node-modules :managed-by])\n      (let [yarn-lock (path/resolve project-root \"yarn.lock\")]\n        (when (fs/existsSync yarn-lock)\n          :yarn))\n      :npm))\n\n(defn check-project-install! [project-root config]\n  (let [package-json-file\n        (path/resolve project-root \"package.json\")]\n\n    (or (fs/existsSync (path/resolve \"node_modules\" \"shadow-cljs\"))\n        (and (fs/existsSync package-json-file)\n             (let [pkg (js->clj (js/require package-json-file))]\n               (or (get-in pkg [\"devDependencies\" \"shadow-cljs\"])\n                   (get-in pkg [\"dependencies\" \"shadow-cljs\"]))))\n\n        ;; not installed\n        (do (log \"shadow-cljs not installed in project.\")\n            (log \"\")\n\n            (if-not (rl-sync/keyInYN \"Add it now?\")\n              false\n              (let [[pkg-cmd pkg-args]\n                    (case (guess-node-package-manager project-root config)\n                      :yarn\n                      [\"yarn\" [\"add\" \"--dev\" \"shadow-cljs\"]]\n                      :npm\n                      [\"npm\" [\"install\" \"--save-dev\" \"shadow-cljs\"]])]\n\n                (log (str \"Running: \" pkg-cmd \" \" (str/join \" \" pkg-args)))\n\n                ;; npm installs into wrong location if no package.json is present\n                (when-not (fs/existsSync package-json-file)\n                  (fs/writeFileSync package-json-file \"{}\"))\n\n                (cp/spawnSync pkg-cmd (into-array pkg-args) #js {:cwd project-root\n                                                                 :stdio \"inherit\"})\n                true))))))\n\n;; FIXME: couldn't find a \"nice\" xml library to d this for me which wasn't total overkill\n;; only nice to have would be prettier output but since its for cursive to look at\n;; I don't really care.\n(defn generate-xml [struct]\n  (cond\n    (string? struct)\n    struct\n\n    (vector? struct)\n    (let [[tag attrs & more] struct\n          tag (name tag)]\n      (str \"<\" tag\n           (when (map? attrs)\n             (->> attrs\n                  (map (fn [[key value]]\n                         (let [ns (namespace key)]\n                           (str ns (when ns \":\") (name key) \"=\\\"\" value \"\\\"\")\n                           )))\n                  (str/join \" \")\n                  (str \" \")))\n           \">\"\n           (->> (if (map? attrs) more (rest struct))\n                (map generate-xml)\n                (str/join \"\"))\n           \"</\" tag \">\"))))\n\n(defn generate-pom [project-root config-path {:keys [source-paths dependencies] :as config} opts]\n  (let [pom-path\n        (path/resolve project-root \"pom.xml\")]\n\n    (when (or (not (fs/existsSync pom-path))\n              (rl-sync/keyInYN (str pom-path \" already exists. Overwrite?\")))\n\n      ;; FIXME: allow setting this in shadow-cljs.edn\n      (let [project-name (path/basename project-root)]\n\n        (fs/writeFileSync pom-path\n          (str \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n               \"<!-- generated by shadow-cljs pom, do not edit -->\\n\"\n               (generate-xml\n                 [:project {:xmlns \"http://maven.apache.org/POM/4.0.0\"\n                            :xmlns/xsi \"http://www.w3.org/2001/XMLSchema-instance\"\n                            :xsi/schemaLocation \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"}\n                  [:modelVersion \"4.0.0\"]\n                  [:groupId project-name]\n                  [:artifactId project-name]\n                  [:version \"0.0.1\"]\n                  [:name project-name]\n\n                  ;; FIXME: need config for this at some point, defaults from lein\n                  [:repositories\n                   [:repository\n                    [:id \"central\"]\n                    [:url \"https://repo1.maven.org/maven2/\"]\n                    [:snapshots [:enabled \"false\"]]\n                    [:releases [:enabled \"true\"]]]\n                   [:repository\n                    [:id \"clojars\"]\n                    [:url \"https://repo.clojars.org/\"]\n                    [:snapshots [:enabled \"true\"]]\n                    [:releases [:enabled \"true\"]]]]\n\n                  (->> (into [['thheller/shadow-cljs jar-version]] dependencies)\n                       (map (fn [[dep-sym dep-version & more]]\n                              (let [id (name dep-sym)\n                                    ns (or (namespace dep-sym) id)]\n                                [:dependency\n                                 [:groupId ns]\n                                 [:artifactId id]\n                                 [:version dep-version]])))\n                       (into [:dependencies]))\n\n                  (-> [:build]\n                      (conj [:sourceDirectory (first source-paths)])\n                      (cond->\n                        (seq (rest source-paths))\n                        (conj [:plugins\n                               [:plugin\n                                [:groupId \"org.codehaus.mojo\"]\n                                [:artifactId \"build-helper-maven-plugin\"]\n                                [:executions\n                                 [:execution\n                                  [:phase \"generate-sources\"]\n                                  [:goals [:goal \"add-source\"]]\n                                  [:configuration\n                                   (->> source-paths\n                                        (map (fn [path]\n                                               [:source path]))\n                                        (into [:sources]))]]]]])))])))))))\n\n(defn ^:export main [args]\n\n  ;; https://github.com/tapjs/signal-exit\n  ;; without this the shadow-cljs process leaves orphan java processes\n  ;; that do not exit when the node process is killed (by closing the terminal)\n  ;; just adding this causes the java processes to exit properly ...\n  ;; I do not understand why ... but I can still use spawnSync this way so I'll take it\n  (let [onExit (js/require \"signal-exit\")]\n    (onExit (fn [code signal])))\n\n  (try\n    (let [{:keys [action builds options summary errors] :as opts}\n          (opts/parse args)]\n\n      (cond\n        (or (:help options)\n            (= action :help))\n        (opts/help opts)\n\n        (= action :init)\n        (run-init opts)\n\n        (= action :aot)\n        (try\n          (aot-compile)\n          (catch :default e\n            (println \"shadow-cljs - aot compilation failed\")))\n\n        :else\n        (let [config-path (ensure-config)]\n          (if-not config-path\n            (do (println \"Could not find shadow-cljs.edn config file.\")\n                (println \"To create one run:\")\n                (println \"  shadow-cljs init\"))\n\n            (let [project-root\n                  (path/dirname config-path)\n\n                  args\n                  (into [] args) ;; starts out as JS array\n\n                  config\n                  (read-config config-path opts)]\n\n              (when (check-project-install! project-root config)\n\n                (let [{:keys [cache-root version] :as config}\n                      (merge defaults config)\n\n                      server-pid\n                      (path/resolve project-root cache-root \"cli-repl.port\")\n\n                      server-running?\n                      (fs/existsSync server-pid)]\n\n                  (log \"shadow-cljs - config:\" config-path \"version:\" version)\n\n                  (cond\n                    (or (:cli-info options)\n                        (= :info action))\n                    (print-cli-info project-root config-path config opts)\n\n                    (= :pom action)\n                    (generate-pom project-root config-path config opts)\n\n                    (= :start action)\n                    (if server-running?\n                      (log \"shadow-cljs - server already running\")\n                      (server-start project-root config args opts))\n\n                    (= :stop action)\n                    (if-not server-running?\n                      (log \"shadow-cljs - server not running\")\n                      (server-stop project-root config server-pid args opts))\n\n                    (= :restart action)\n                    (go (when server-running?\n                          (<! (server-stop project-root config server-pid args opts)))\n                        (server-start project-root config args opts))\n\n                    server-running?\n                    (client/run project-root config server-pid opts args)\n\n                    (:lein config)\n                    (run-lein project-root config args opts)\n\n                    :else\n                    (run-standalone project-root config args opts)\n                    ))))))))\n    (catch :default ex\n      (print-error ex)\n      (js/process.exit 1))))\n"]}