["^ ","~:output",["^ ","~:js","goog.provide('instaparse.auto_flatten_seq');\ninstaparse.auto_flatten_seq.threshold = (32);\n\n/**\n * @interface\n */\ninstaparse.auto_flatten_seq.ConjFlat = function(){};\n\ninstaparse.auto_flatten_seq.conj_flat = (function instaparse$auto_flatten_seq$conj_flat(self,obj){\nif((!((self == null))) && (!((self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 == null)))){\nreturn self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self,obj);\n} else {\nvar x__5859__auto__ = (((self == null))?null:self);\nvar m__5860__auto__ = (instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__5859__auto__)]);\nif(!((m__5860__auto__ == null))){\nreturn (m__5860__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5860__auto__.cljs$core$IFn$_invoke$arity$2(self,obj) : m__5860__auto__.call(null,self,obj));\n} else {\nvar m__5860__auto____$1 = (instaparse.auto_flatten_seq.conj_flat[\"_\"]);\nif(!((m__5860__auto____$1 == null))){\nreturn (m__5860__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5860__auto____$1.cljs$core$IFn$_invoke$arity$2(self,obj) : m__5860__auto____$1.call(null,self,obj));\n} else {\nthrow cljs.core.missing_protocol(\"ConjFlat.conj-flat\",self);\n}\n}\n}\n});\n\ninstaparse.auto_flatten_seq.cached_QMARK_ = (function instaparse$auto_flatten_seq$cached_QMARK_(self){\nif((!((self == null))) && (!((self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 == null)))){\nreturn self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);\n} else {\nvar x__5859__auto__ = (((self == null))?null:self);\nvar m__5860__auto__ = (instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__5859__auto__)]);\nif(!((m__5860__auto__ == null))){\nreturn (m__5860__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto__.call(null,self));\n} else {\nvar m__5860__auto____$1 = (instaparse.auto_flatten_seq.cached_QMARK_[\"_\"]);\nif(!((m__5860__auto____$1 == null))){\nreturn (m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto____$1.call(null,self));\n} else {\nthrow cljs.core.missing_protocol(\"ConjFlat.cached?\",self);\n}\n}\n}\n});\n\n\n\n\n/**\n * Returns the hash code, consistent with =, for an external ordered\n *   collection implementing Iterable.\n *   See http://clojure.org/data_structures#hash for full algorithms.\n */\ninstaparse.auto_flatten_seq.hash_conj = (function instaparse$auto_flatten_seq$hash_conj(unmixed_hash,item){\nreturn (cljs.core.imul((31),unmixed_hash) + cljs.core.hash(item));\n});\ninstaparse.auto_flatten_seq.expt = (function instaparse$auto_flatten_seq$expt(base,pow){\nif((pow === (0))){\nreturn (1);\n} else {\nvar n = (pow | (0));\nvar y = ((1) | (0));\nvar z = (base | (0));\nwhile(true){\nvar t = cljs.core.even_QMARK_(n);\nvar n__$1 = cljs.core.quot(n,(2));\nif(t){\nvar G__29179 = n__$1;\nvar G__29180 = y;\nvar G__29181 = cljs.core.imul(z,z);\nn = G__29179;\ny = G__29180;\nz = G__29181;\ncontinue;\n} else {\nif((n__$1 === (0))){\nreturn cljs.core.imul(z,y);\n} else {\nvar G__29182 = n__$1;\nvar G__29183 = cljs.core.imul(z,y);\nvar G__29184 = cljs.core.imul(z,z);\nn = G__29182;\ny = G__29183;\nz = G__29184;\ncontinue;\n\n}\n}\nbreak;\n}\n}\n});\ninstaparse.auto_flatten_seq.delve = (function instaparse$auto_flatten_seq$delve(v,index){\nvar v__$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,index);\nvar index__$1 = index;\nwhile(true){\nif(cljs.core.truth_((instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1(v__$1) : instaparse.auto_flatten_seq.afs_QMARK_.call(null,v__$1)))){\nvar G__29186 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(v__$1,(0));\nvar G__29187 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(index__$1,(0));\nv__$1 = G__29186;\nindex__$1 = G__29187;\ncontinue;\n} else {\nreturn index__$1;\n}\nbreak;\n}\n});\ninstaparse.auto_flatten_seq.advance = (function instaparse$auto_flatten_seq$advance(v,index){\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(index),(1))){\nif((cljs.core.peek(index) < ((instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1(v) : instaparse.auto_flatten_seq.true_count.call(null,v)) - (1)))){\nreturn instaparse.auto_flatten_seq.delve(v,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.peek(index) + (1))], null));\n} else {\nreturn null;\n}\n} else {\nif((cljs.core.peek(index) < ((function (){var G__29188 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,cljs.core.pop(index));\nreturn (instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1(G__29188) : instaparse.auto_flatten_seq.true_count.call(null,G__29188));\n})() - (1)))){\nreturn instaparse.auto_flatten_seq.delve(v,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.pop(index),(cljs.core.peek(index) + (1))));\n} else {\nvar G__29189 = v;\nvar G__29190 = cljs.core.pop(index);\nv = G__29189;\nindex = G__29190;\ncontinue;\n\n}\n}\nbreak;\n}\n});\ninstaparse.auto_flatten_seq.flat_seq = (function instaparse$auto_flatten_seq$flat_seq(var_args){\nvar G__29192 = arguments.length;\nswitch (G__29192) {\ncase 1:\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1 = (function (v){\nif((cljs.core.count(v) > (0))){\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(v,instaparse.auto_flatten_seq.delve(v,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null)));\n} else {\nreturn null;\n}\n});\n\ninstaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2 = (function (v,index){\nreturn (new cljs.core.LazySeq(null,(function (){\nreturn cljs.core.cons(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,index),(function (){var temp__5457__auto__ = instaparse.auto_flatten_seq.advance(v,index);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar next_index = temp__5457__auto__;\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(v,next_index);\n} else {\nreturn null;\n}\n})());\n}),null,null));\n});\n\ninstaparse.auto_flatten_seq.flat_seq.cljs$lang$maxFixedArity = 2;\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeq}\n * @implements {cljs.core.INext}\n * @implements {instaparse.auto_flatten_seq.ConjFlat}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.ILookup}\n*/\ninstaparse.auto_flatten_seq.AutoFlattenSeq = (function (v,premix_hashcode,hashcode,cnt,dirty,cached_seq){\nthis.v = v;\nthis.premix_hashcode = premix_hashcode;\nthis.hashcode = hashcode;\nthis.cnt = cnt;\nthis.dirty = dirty;\nthis.cached_seq = cached_seq;\nthis.cljs$lang$protocol_mask$partition0$ = 31850958;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.toString = (function (){\nvar self__ = this;\nvar self = this;\nreturn cljs.core.pr_str_STAR_(cljs.core.seq(self));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (self,key){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.v,key);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (self,key,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.v,key,not_found);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.meta(self__.v);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.next(cljs.core.seq(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cnt;\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.hashcode;\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (self,other){\nvar self__ = this;\nvar self__$1 = this;\nreturn (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.hashcode,cljs.core.hash(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,cljs.core.count(other))) && ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,(0))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.seq(self__$1),other)));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.with_meta(instaparse.auto_flatten_seq.EMPTY,cljs.core.meta(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.first(cljs.core.seq(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.rest(cljs.core.seq(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(self__.cached_seq)){\nreturn self__.cached_seq;\n} else {\nself__.cached_seq = ((self__.dirty)?instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1(self__.v):cljs.core.seq(self__.v));\n\nreturn self__.cached_seq;\n}\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (self,metamap){\nvar self__ = this;\nvar self__$1 = this;\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta(self__.v,metamap),self__.premix_hashcode,self__.hashcode,self__.cnt,self__.dirty,null));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (self,o){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.cons(o,self__$1);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = (function (self,obj){\nvar self__ = this;\nvar self__$1 = this;\nif((obj == null)){\nreturn self__$1;\n} else {\nif(cljs.core.truth_((instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1(obj) : instaparse.auto_flatten_seq.afs_QMARK_.call(null,obj)))){\nif((self__.cnt === (0))){\nreturn obj;\n} else {\nif((cljs.core.count(obj) <= (32))){\nvar phc = (instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2(self__$1,obj) : instaparse.auto_flatten_seq.hash_cat.call(null,self__$1,obj));\nvar new_cnt = (self__.cnt + cljs.core.count(obj));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,(function (){var or__5126__auto__ = self__.dirty;\nif(or__5126__auto__){\nreturn or__5126__auto__;\n} else {\nreturn obj.dirty;\n}\n})(),null));\n} else {\nvar phc = (instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2(self__$1,obj) : instaparse.auto_flatten_seq.hash_cat.call(null,self__$1,obj));\nvar new_cnt = (self__.cnt + cljs.core.count(obj));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,true,null));\n\n}\n}\n} else {\nvar phc = instaparse.auto_flatten_seq.hash_conj(self__.premix_hashcode,obj);\nvar new_cnt = (self__.cnt + (1));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,self__.dirty,null));\n\n}\n}\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cached_seq;\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,\"v\",\"v\",1661996586,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"PersistentVector\",\"PersistentVector\",-837570443,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"premix-hashcode\",\"premix-hashcode\",-1918840795,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"hashcode\",\"hashcode\",1350412446,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"dirty\",\"dirty\",-1924882488,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cached-seq\",\"cached-seq\",1369780142,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"ISeq\",\"ISeq\",1517365813,null),new cljs.core.Keyword(null,\"unsynchronized-mutable\",\"unsynchronized-mutable\",-164143950),true], null))], null);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = \"instaparse.auto-flatten-seq/AutoFlattenSeq\";\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = (function (this__5797__auto__,writer__5798__auto__,opt__5799__auto__){\nreturn cljs.core._write(writer__5798__auto__,\"instaparse.auto-flatten-seq/AutoFlattenSeq\");\n});\n\ninstaparse.auto_flatten_seq.__GT_AutoFlattenSeq = (function instaparse$auto_flatten_seq$__GT_AutoFlattenSeq(v,premix_hashcode,hashcode,cnt,dirty,cached_seq){\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(v,premix_hashcode,hashcode,cnt,dirty,cached_seq));\n});\n\ninstaparse.auto_flatten_seq.hash_cat = (function instaparse$auto_flatten_seq$hash_cat(v1,v2){\nvar c = cljs.core.count(v2);\nvar e = (instaparse.auto_flatten_seq.expt((31),c) | (0));\nreturn (cljs.core.imul(e,v1.premix_hashcode) + (v2.premix_hashcode - e));\n});\n/**\n * Returns the partially calculated hash code, still requires a call to mix-collection-hash\n */\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix = (function instaparse$auto_flatten_seq$hash_ordered_coll_without_mix(var_args){\nvar G__29216 = arguments.length;\nswitch (G__29216) {\ncase 1:\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = (function (coll){\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2((1),coll);\n});\n\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = (function (existing_unmixed_hash,coll){\nvar unmixed_hash = existing_unmixed_hash;\nvar coll__$1 = cljs.core.seq(coll);\nwhile(true){\nif(!((coll__$1 == null))){\nvar G__29221 = ((cljs.core.imul((31),unmixed_hash) + cljs.core.hash(cljs.core.first(coll__$1))) | (0));\nvar G__29222 = cljs.core.next(coll__$1);\nunmixed_hash = G__29221;\ncoll__$1 = G__29222;\ncontinue;\n} else {\nreturn unmixed_hash;\n}\nbreak;\n}\n});\n\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$lang$maxFixedArity = 2;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (afs,writer,opts){\nvar afs__$1 = this;\nreturn cljs.core._pr_writer(cljs.core.seq(afs__$1),writer,opts);\n});\ninstaparse.auto_flatten_seq.auto_flatten_seq = (function instaparse$auto_flatten_seq$auto_flatten_seq(v){\nvar v__$1 = cljs.core.vec(v);\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1,instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1(v__$1),cljs.core.hash(v__$1),cljs.core.count(v__$1),false,null));\n});\ninstaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq(cljs.core.PersistentVector.EMPTY);\ninstaparse.auto_flatten_seq.afs_QMARK_ = (function instaparse$auto_flatten_seq$afs_QMARK_(s){\nreturn (s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq);\n});\ninstaparse.auto_flatten_seq.true_count = (function instaparse$auto_flatten_seq$true_count(v){\nif(cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_(v))){\nreturn cljs.core.count(v.v);\n} else {\nreturn cljs.core.count(v);\n}\n});\ninstaparse.auto_flatten_seq.flat_vec_helper = (function instaparse$auto_flatten_seq$flat_vec_helper(acc,v){\nwhile(true){\nvar temp__5455__auto__ = cljs.core.seq(v);\nif(temp__5455__auto__){\nvar s = temp__5455__auto__;\nvar fst = cljs.core.first(v);\nif(cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_(fst))){\nvar G__29223 = (instaparse.auto_flatten_seq.flat_vec_helper.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.flat_vec_helper.cljs$core$IFn$_invoke$arity$2(acc,fst) : instaparse.auto_flatten_seq.flat_vec_helper.call(null,acc,fst));\nvar G__29224 = cljs.core.next(v);\nacc = G__29223;\nv = G__29224;\ncontinue;\n} else {\nvar G__29225 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,fst);\nvar G__29226 = cljs.core.next(v);\nacc = G__29225;\nv = G__29226;\ncontinue;\n}\n} else {\nreturn acc;\n}\nbreak;\n}\n});\n/**\n * Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\n */\ninstaparse.auto_flatten_seq.flat_vec = (function instaparse$auto_flatten_seq$flat_vec(v){\nreturn cljs.core.persistent_BANG_(instaparse.auto_flatten_seq.flat_vec_helper(cljs.core.transient$(cljs.core.PersistentVector.EMPTY),v));\n});\n\n/**\n * @interface\n */\ninstaparse.auto_flatten_seq.GetVec = function(){};\n\ninstaparse.auto_flatten_seq.get_vec = (function instaparse$auto_flatten_seq$get_vec(self){\nif((!((self == null))) && (!((self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 == null)))){\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);\n} else {\nvar x__5859__auto__ = (((self == null))?null:self);\nvar m__5860__auto__ = (instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__5859__auto__)]);\nif(!((m__5860__auto__ == null))){\nreturn (m__5860__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto__.call(null,self));\n} else {\nvar m__5860__auto____$1 = (instaparse.auto_flatten_seq.get_vec[\"_\"]);\nif(!((m__5860__auto____$1 == null))){\nreturn (m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto____$1.call(null,self));\n} else {\nthrow cljs.core.missing_protocol(\"GetVec.get-vec\",self);\n}\n}\n}\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IIndexed}\n * @implements {cljs.core.IVector}\n * @implements {cljs.core.IReversible}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {instaparse.auto_flatten_seq.GetVec}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IStack}\n * @implements {cljs.core.IComparable}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.ILookup}\n*/\ninstaparse.auto_flatten_seq.FlattenOnDemandVector = (function (v,hashcode,cnt,flat){\nthis.v = v;\nthis.hashcode = hashcode;\nthis.cnt = cnt;\nthis.flat = flat;\nthis.cljs$lang$protocol_mask$partition0$ = 167142175;\nthis.cljs$lang$protocol_mask$partition1$ = 2048;\n});\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = (function (){\nvar self__ = this;\nvar self = this;\nreturn cljs.core.pr_str_STAR_(instaparse.auto_flatten_seq.get_vec(self));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (self,key){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),key);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (self,key,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self__$1),key,not_found);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.not(cljs.core.deref(self__.flat))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.flat,((function (self__$1){\nreturn (function (_){\nreturn cljs.core.with_meta(instaparse.auto_flatten_seq.flat_vec(cljs.core.deref(self__.v)),cljs.core.meta(cljs.core.deref(self__.v)));\n});})(self__$1))\n);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.v,((function (self__$1){\nreturn (function (_){\nreturn null;\n});})(self__$1))\n);\n} else {\n}\n\nreturn cljs.core.deref(self__.flat);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (self,f,init){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._kv_reduce(instaparse.auto_flatten_seq.get_vec(self__$1),f,init);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (self,i){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._nth.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),i);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (self,i,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._nth.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self__$1),i,not_found);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (self,i,val){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._assoc_n(instaparse.auto_flatten_seq.get_vec(self__$1),i,val);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(cljs.core.deref(self__.flat))){\nreturn cljs.core.meta(cljs.core.deref(self__.flat));\n} else {\nreturn cljs.core.meta(cljs.core.deref(self__.v));\n}\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cnt;\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._peek(instaparse.auto_flatten_seq.get_vec(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._pop(instaparse.auto_flatten_seq.get_vec(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif((self__.cnt > (0))){\nreturn cljs.core.rseq(instaparse.auto_flatten_seq.get_vec(self__$1));\n} else {\nreturn null;\n}\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.hashcode;\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (self,other){\nvar self__ = this;\nvar self__$1 = this;\nreturn (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.hashcode,cljs.core.hash(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,cljs.core.count(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),other));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,cljs.core.meta(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (self,i,val){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self__$1),i,val);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (self,k){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._contains_key_QMARK_(instaparse.auto_flatten_seq.get_vec(self__$1),k);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.seq(instaparse.auto_flatten_seq.get_vec(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (self,metamap){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(cljs.core.deref(self__.flat))){\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.v)),self__.hashcode,self__.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.deref(self__.flat),metamap))));\n} else {\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.deref(self__.v),metamap)),self__.hashcode,self__.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.flat))));\n}\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (self,obj){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),obj);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = (function() {\nvar G__29228 = null;\nvar G__29228__2 = (function (self__,arg){\nvar self__ = this;\nvar self____$1 = this;\nvar self = self____$1;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self),arg);\n});\nvar G__29228__3 = (function (self__,arg,not_found){\nvar self__ = this;\nvar self____$1 = this;\nvar self = self____$1;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self),arg,not_found);\n});\nG__29228 = function(self__,arg,not_found){\nswitch(arguments.length){\ncase 2:\nreturn G__29228__2.call(this,self__,arg);\ncase 3:\nreturn G__29228__3.call(this,self__,arg,not_found);\n}\nthrow(new Error('Invalid arity: ' + (arguments.length - 1)));\n};\nG__29228.cljs$core$IFn$_invoke$arity$2 = G__29228__2;\nG__29228.cljs$core$IFn$_invoke$arity$3 = G__29228__3;\nreturn G__29228;\n})()\n;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = (function (self__,args29227){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args29227)));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = (function (arg){\nvar self__ = this;\nvar self = this;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self),arg);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = (function (arg,not_found){\nvar self__ = this;\nvar self = this;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self),arg,not_found);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = (function (self,that){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._compare(instaparse.auto_flatten_seq.get_vec(self__$1),that);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"v\",\"v\",1661996586,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"hashcode\",\"hashcode\",1350412446,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),new cljs.core.Symbol(null,\"flat\",\"flat\",-2076841507,null)], null);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = \"instaparse.auto-flatten-seq/FlattenOnDemandVector\";\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = (function (this__5797__auto__,writer__5798__auto__,opt__5799__auto__){\nreturn cljs.core._write(writer__5798__auto__,\"instaparse.auto-flatten-seq/FlattenOnDemandVector\");\n});\n\ninstaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = (function instaparse$auto_flatten_seq$__GT_FlattenOnDemandVector(v,hashcode,cnt,flat){\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(v,hashcode,cnt,flat));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (v,writer,opts){\nvar v__$1 = this;\nreturn cljs.core._pr_writer(instaparse.auto_flatten_seq.get_vec(v__$1),writer,opts);\n});\ninstaparse.auto_flatten_seq.convert_afs_to_vec = (function instaparse$auto_flatten_seq$convert_afs_to_vec(afs){\nif(cljs.core.truth_(afs.dirty)){\nif(cljs.core.truth_(instaparse.auto_flatten_seq.cached_QMARK_(afs))){\nreturn cljs.core.vec(cljs.core.seq(afs));\n} else {\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(afs.v),afs.hashcode,afs.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null)));\n}\n} else {\nreturn afs.v;\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ "],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.auto-flatten-seq","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^?","~$goog","^@"],"~:seen",["^8",[]],"~:uses",null,"~:require-macros",["^ ","^?","^?"],"~:form",["~#list",["~$ns","^:"]],"~:js-deps",["^ "],"~:deps",["^@","^?"]],"^<","^:","~:resource-id",["~:shadow.build.classpath/resource","instaparse/auto_flatten_seq.cljc"],"~:compiled-at",1516732930392,"~:resource-name","instaparse/auto_flatten_seq.cljc","~:warnings",[],"~:source","(ns instaparse.auto-flatten-seq\r\n  #?(:clj (:import clojure.lang.PersistentVector))\r\n  #?(:clj (:require [clojure.core.protocols :refer [IKVReduce]])))\r\n\r\n(def ^:const threshold 32)\r\n\r\n(defprotocol ConjFlat\r\n  (conj-flat [self obj])\r\n  (cached? [self]))\r\n\r\n; Need a backwards compatible version of mix-collection-hash\r\n#?(:clj (defmacro compile-if [test then else]\r\n          (if (eval test)\r\n            then\r\n            else)))\r\n\r\n#?(:clj (defmacro mix-collection-hash-bc [x y]\r\n          ;; backwards-compatible\r\n          `(compile-if (resolve 'clojure.core/mix-collection-hash)\r\n                       (mix-collection-hash ~x ~y)\r\n                       ~x)))\r\n\r\n(declare EMPTY hash-cat afs? true-count)\r\n\r\n#?(:clj\r\n   (defmacro hash-conj [premix-hash-v item]\r\n     `(unchecked-add-int (unchecked-multiply-int 31 ~premix-hash-v) (hash ~item)))\r\n   :cljs\r\n   (defn ^number hash-conj\r\n     \"Returns the hash code, consistent with =, for an external ordered\r\n  collection implementing Iterable.\r\n  See http://clojure.org/data_structures#hash for full algorithms.\"\r\n     [unmixed-hash item]\r\n     (+ (imul 31 unmixed-hash) (hash item))))\r\n\r\n#?(:clj\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (unchecked-multiply-int z z))\r\n             (zero? n) (unchecked-multiply-int z y)\r\n             :else (recur n (unchecked-multiply-int z y) (unchecked-multiply-int z z)))))))\r\n   :cljs\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (imul z z))\r\n             (zero? n) (imul z y)\r\n             :else (recur n (imul z y) (imul z z))))))))\r\n\r\n(defn delve [v index]\r\n  (loop [v (get-in v index)\r\n         index index]\r\n    (if (afs? v)\r\n      (recur (get v 0) (conj index 0))\r\n      index)))\r\n\r\n(defn advance [v index]\r\n  (cond\r\n    (= (count index) 1)\r\n    (when (< (peek index) (dec (true-count v)))\r\n      (delve v [(inc (peek index))]))\r\n    \r\n    (< (peek index) (dec (true-count (get-in v (pop index)))))\r\n    (delve v (conj (pop index) (inc (peek index))))\r\n    \r\n    :else\r\n    (recur v (pop index))))\r\n\r\n(defn flat-seq\r\n  ([v] (if (pos? (count v)) \r\n         (flat-seq v (delve v [0]))\r\n         nil))\r\n  ([v index]\r\n    (lazy-seq\r\n      (cons (get-in v index) \r\n            (when-let [next-index (advance v index)] \r\n              (flat-seq v next-index))))))  \r\n\r\n#?(:clj\r\n(deftype AutoFlattenSeq [^PersistentVector v ^int premix-hashcode ^int hashcode\r\n                         ^int cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^clojure.lang.ISeq cached-seq]\r\n  Object\r\n  (toString [self] (.toString (seq self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? AutoFlattenSeq other)\r\n         (== hashcode (.hashcode ^AutoFlattenSeq other))\r\n         (== cnt (.cnt ^AutoFlattenSeq other))\r\n         (= dirty (.dirty ^AutoFlattenSeq other))\r\n         (= v (.v ^AutoFlattenSeq other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (if-let [^java.util.Collection s (seq self)]\r\n      (.iterator s)\r\n      (let [^java.util.Collection e ()]\r\n        (.iterator e))))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (let [^java.util.Collection s (seq self)]\r\n      (.toArray s)))\r\n  clojure.lang.Sequential\r\n  clojure.lang.ISeq\r\n  (equiv [self other]\r\n    (and (== hashcode (hash other))\r\n         (== cnt (count other))\r\n         (or (== cnt 0)\r\n             (= (seq self) other))))\r\n  (empty [self] (with-meta EMPTY (meta self))) \r\n  (first [self] (first (seq self)))\r\n  (next [self] (next (seq self)))\r\n  (more [self] (rest (seq self)))\r\n  (cons [self obj]\r\n    (cons obj self))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           (or dirty (.dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else \r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.ILookup\r\n  (valAt [self key]    \r\n    (.valAt v key))\r\n  (valAt [self key not-found]\r\n    (.valAt v key not-found))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (meta v))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq))))\r\n:cljs\r\n(deftype AutoFlattenSeq [^PersistentVector v ^number premix-hashcode ^number hashcode ^number cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^ISeq cached-seq]\r\n  Object\r\n  (toString [self] (pr-str* (seq self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  ISequential\r\n  ISeq\r\n  (-first [self] (first (seq self)))\r\n  (-rest [self] (rest (seq self)))\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (and ;(instance? AutoFlattenSeq other)\r\n         (= hashcode (hash other))\r\n         (= cnt (count other))\r\n         (or (= cnt 0)\r\n             (= (seq self) other))))\r\n  ICollection\r\n  (-conj [self o] (cons o self))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta EMPTY (meta self))) \r\n  INext\r\n  (-next [self] (next (seq self)))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           (or dirty (.-dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else\r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  ICounted\r\n  (-count [self] cnt)\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup v key))\r\n  (-lookup [self key not-found]\r\n    (-lookup v key not-found))\r\n  IWithMeta\r\n  (-with-meta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  IMeta\r\n  (-meta [self]\r\n    (meta v))\r\n  ISeqable\r\n  (-seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq)))))\r\n\r\n#?(:clj\r\n   (defn- hash-cat ^long [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (unchecked-add-int\r\n        (unchecked-multiply-int e (.premix-hashcode v1))\r\n        (unchecked-subtract-int (.premix-hashcode v2) e))))\r\n   :cljs\r\n   (defn- hash-cat ^number [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (+ (imul e (.-premix-hashcode v1))\r\n          (- (.-premix-hashcode v2) e)))))\r\n\r\n#?(:clj\r\n   (defn hash-ordered-coll-without-mix ^long [v]\r\n     (compile-if (resolve 'clojure.core/mix-collection-hash)\r\n       (let [thirty-one (int 31)\r\n             cnt (count v)]\r\n         (loop [acc (int 1) i (int 0)]\r\n           (if (< i cnt)\r\n             (recur (unchecked-add-int\r\n                     (unchecked-multiply-int thirty-one acc)\r\n                     (hash (v i)))\r\n                    (inc i))\r\n             acc)))\r\n       (hash v)))\r\n   :cljs\r\n   (defn ^number hash-ordered-coll-without-mix\r\n     \"Returns the partially calculated hash code, still requires a call to mix-collection-hash\"\r\n     ([coll]\r\n      (hash-ordered-coll-without-mix 1 coll))\r\n     ([existing-unmixed-hash coll]\r\n      (loop [unmixed-hash existing-unmixed-hash\r\n             coll (seq coll)]\r\n        (if-not (nil? coll)\r\n          (recur (bit-or (+ (imul 31 unmixed-hash) (hash (first coll))) 0) \r\n                 (next coll))\r\n          unmixed-hash)))))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/AutoFlattenSeq\r\n     (-pr-writer [afs writer opts]\r\n       (-pr-writer (seq afs) writer opts))))\r\n\r\n(defn auto-flatten-seq [v]\r\n  (let [v (vec v)]\r\n    (AutoFlattenSeq. v\r\n                     (hash-ordered-coll-without-mix v)\r\n                     (hash v) (count v)\r\n                     false nil)))\r\n\r\n(def EMPTY (auto-flatten-seq []))\r\n\r\n(defn afs? [s]\r\n  (instance? AutoFlattenSeq s))\r\n\r\n(defn true-count [v]\r\n  (if (afs? v)\r\n    (count (.-v ^AutoFlattenSeq v))\r\n    (count v)))\r\n\r\n;; For hiccup format, we need to be able to convert the seq to a vector.\r\n\r\n(defn flat-vec-helper [acc v]\r\n  (if-let [s (seq v)]\r\n    (let [fst (first v)]\r\n      (if (afs? fst) \r\n        (recur (flat-vec-helper acc fst) (next v))\r\n        (recur (conj! acc fst) (next v))))\r\n    acc))\r\n\r\n(defn flat-vec\r\n  \"Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\"\r\n  [v]\r\n  (persistent! (flat-vec-helper (transient []) v)))\r\n\r\n(defprotocol GetVec\r\n  (^PersistentVector get-vec [self]))\r\n\r\n#?(:clj\r\n(deftype FlattenOnDemandVector [v   ; ref containing PersistentVector or nil \r\n                                ^int hashcode\r\n                                ^int cnt\r\n                                flat] ; ref containing PersistentVector or nil                                \r\n  GetVec\r\n  (get-vec [self] \r\n           (when (not @flat)             \r\n             (dosync\r\n               (when (not @flat)\r\n                 (ref-set flat (with-meta (flat-vec @v) (meta @v))) \r\n                 (ref-set v nil)))) ; clear out v so it can be garbage collected\r\n           @flat)\r\n                    \r\n  Object\r\n  (toString [self] (.toString (get-vec self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? FlattenOnDemandVector other)\r\n         (== hashcode (.hashcode ^FlattenOnDemandVector other))\r\n         (== cnt (.cnt ^FlattenOnDemandVector other))\r\n         (= v (.v ^FlattenOnDemandVector other))\r\n         (= flat (.flat ^FlattenOnDemandVector other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (.iterator (get-vec self)))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (.toArray (get-vec self)))\r\n  clojure.lang.IPersistentCollection\r\n  (equiv [self other]\r\n    (or \r\n      (and (== hashcode (hash other))\r\n           (== cnt (count other))\r\n           (= (get-vec self) other))))\r\n  (empty [self] (with-meta [] (meta self))) \r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.IPersistentVector\r\n  (assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (assocN [self i val]\r\n    (.assocN (get-vec self) i val))\r\n  (length [self]\r\n    cnt)\r\n  (cons [self obj]\r\n    (conj (get-vec self) obj))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (ref @v) hashcode cnt (ref (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (ref (with-meta @v metamap)) hashcode cnt (ref @flat))))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (seq (get-vec self)))\r\n  clojure.lang.ILookup\r\n  (valAt [self key]\r\n    (.valAt (get-vec self) key))\r\n  (valAt [self key not-found]\r\n    (.valAt (get-vec self) key not-found))\r\n  clojure.lang.Indexed\r\n  (nth [self i]\r\n    (.nth (get-vec self) i))\r\n  (nth [self i not-found]\r\n    (.nth (get-vec self) i not-found))\r\n  clojure.lang.IFn\r\n  (invoke [self arg]\r\n    (.invoke (get-vec self) arg))\r\n  (applyTo [self arglist]\r\n    (.applyTo (get-vec self) arglist))\r\n  clojure.lang.Reversible\r\n  (rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  clojure.lang.IPersistentStack\r\n  (peek [self] \r\n    (peek (get-vec self)))\r\n  (pop [self] \r\n    (pop (get-vec self)))\r\n  clojure.lang.Associative\r\n  (containsKey [self k]\r\n    (.containsKey (get-vec self) k))\r\n  (entryAt [self k]\r\n    (.entryAt (get-vec self) k))\r\n  IKVReduce\r\n  (kv-reduce [self f init]\r\n    (.kvreduce (get-vec self) f init))\r\n  java.lang.Comparable\r\n  (compareTo [self that]\r\n    (.compareTo (get-vec self) that))\r\n  java.util.List\r\n  (get [self i] (nth (get-vec self) i))\r\n  (indexOf [self o] (.indexOf (get-vec self) o))\r\n  (lastIndexOf [self o] (.lastIndexOf (get-vec self) o))\r\n  (listIterator [self]\r\n    (.listIterator (get-vec self) 0))\r\n  (listIterator [self i]\r\n    (.listIterator (get-vec self) i))\r\n  (subList [self a z]\r\n    (.subList (get-vec self) a z))\r\n  )\r\n:cljs\r\n(deftype FlattenOnDemandVector [v   ; atom containing PersistentVector or nil \r\n                                ^number hashcode\r\n                                ^number cnt\r\n                                flat] ; atom containing PersistentVector or nil\r\n  GetVec\r\n  (get-vec [self] \r\n    (when (not @flat)             \r\n      (swap! flat (fn [_] (with-meta (flat-vec @v) (meta @v))))\r\n      (swap! v (fn [_] nil))) ; clear out v so it can be garbage collected \r\n    @flat)\r\n  \r\n  Object\r\n  (toString [self]\r\n    (pr-str* (get-vec self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (or \r\n     (and (= hashcode (hash other))\r\n          (= cnt (count other))\r\n          (= (get-vec self) other))))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta [] (meta self))) \r\n  ICounted\r\n  (-count [self] cnt)\r\n  IVector\r\n  (-assoc-n [self i val]\r\n    (-assoc-n (get-vec self) i val))\r\n  ICollection\r\n  (-conj [self obj]\r\n    (conj (get-vec self) obj))\r\n  IWithMeta\r\n  (-with-meta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (atom @v) hashcode cnt (atom (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (atom (with-meta @v metamap)) hashcode cnt (atom @flat))))\r\n  IMeta\r\n  (-meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  ISequential\r\n  ISeqable\r\n  (-seq [self]\r\n    (seq (get-vec self)))\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup (get-vec self) key))\r\n  (-lookup [self key not-found]\r\n    (-lookup (get-vec self) key not-found))\r\n  IIndexed\r\n  (-nth [self i]\r\n    (-nth (get-vec self) i))\r\n  (-nth [self i not-found]\r\n    (-nth (get-vec self) i not-found))\r\n  IFn\r\n  (-invoke [self arg]\r\n    (-invoke (get-vec self) arg))\r\n  (-invoke [self arg not-found]\r\n    (-invoke (get-vec self) arg not-found))\r\n  IReversible\r\n  (-rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  IStack\r\n  (-peek [self] \r\n    (-peek (get-vec self)))\r\n  (-pop [self] \r\n    (-pop (get-vec self)))\r\n  IAssociative\r\n  (-assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (-contains-key? [self k]\r\n    (-contains-key? (get-vec self) k))\r\n  IKVReduce\r\n  (-kv-reduce [self f init]\r\n    (-kv-reduce (get-vec self) f init))\r\n  IComparable\r\n  (-compare [self that]\r\n    (-compare (get-vec self) that))\r\n  ))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/FlattenOnDemandVector\r\n     (-pr-writer [v writer opts]\r\n       (-pr-writer (get-vec v) writer opts))))\r\n\r\n(defn convert-afs-to-vec [^AutoFlattenSeq afs]\r\n  (cond\r\n    (.-dirty afs)\r\n    (if (cached? afs)\r\n      (vec (seq afs))\r\n      #?(:clj\r\n         (FlattenOnDemandVector.\r\n          (ref (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (ref nil))\r\n         :cljs\r\n         (FlattenOnDemandVector.\r\n          (atom (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (atom nil))))\r\n    :else\r\n    (.-v afs)))\r\n","~:reader-features",["^8",["~:cljs"]],"~:source-map",["^ ","~i4",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",1],["^ ","^R",40,"^S",1]],"~i13",[["^ ","^R",0,"^S",1,"^9","instaparse.auto-flatten-seq/threshold"]]],"~i6",["^ ","~i0",[["^ ","^R",0,"^S",2],["^ ","^R",0,"^S",2],["^ ","^R",0,"^S",3],["^ ","^R",39,"^S",6],["^ ","^R",0,"^S",8],["^ ","^R",40,"^S",8],["^ ","^R",0,"^S",9],["^ ","^R",0,"^S",9],["^ ","^R",3,"^S",9],["^ ","^R",4,"^S",9],["^ ","^R",6,"^S",9],["^ ","^R",15,"^S",9],["^ ","^R",27,"^S",9],["^ ","^R",29,"^S",9],["^ ","^R",30,"^S",9],["^ ","^R",93,"^S",9],["^ ","^R",0,"^S",10],["^ ","^R",0,"^S",12],["^ ","^R",4,"^S",12,"^9","x__5859__auto__"],["^ ","^R",22,"^S",12],["^ ","^R",24,"^S",12],["^ ","^R",33,"^S",12],["^ ","^R",40,"^S",12],["^ ","^R",4,"^S",13,"^9","m__5860__auto__"],["^ ","^R",22,"^S",13],["^ ","^R",23,"^S",13,"^9","instaparse/auto-flatten-seq.conj-flat"],["^ ","^R",61,"^S",13],["^ ","^R",61,"^S",13,"^9","goog/typeOf"],["^ ","^R",73,"^S",13,"^9","x__5859__auto__"],["^ ","^R",0,"^S",14],["^ ","^R",0,"^S",14],["^ ","^R",3,"^S",14],["^ ","^R",5,"^S",14],["^ ","^R",6,"^S",14,"^9","m__5860__auto__"],["^ ","^R",25,"^S",14],["^ ","^R",0,"^S",15],["^ ","^R",8,"^S",15,"^9","m__5860__auto__"],["^ ","^R",56,"^S",15,"^9","m__5860__auto__"],["^ ","^R",114,"^S",15,"^9","m__5860__auto__"],["^ ","^R",0,"^S",17],["^ ","^R",4,"^S",17,"^9","m__5860__auto__"],["^ ","^R",26,"^S",17],["^ ","^R",27,"^S",17,"^9","instaparse/auto-flatten-seq.conj-flat"],["^ ","^R",65,"^S",17],["^ ","^R",0,"^S",18],["^ ","^R",0,"^S",18],["^ ","^R",3,"^S",18],["^ ","^R",5,"^S",18],["^ ","^R",6,"^S",18,"^9","m__5860__auto__"],["^ ","^R",29,"^S",18],["^ ","^R",0,"^S",19],["^ ","^R",8,"^S",19,"^9","m__5860__auto__"],["^ ","^R",60,"^S",19,"^9","m__5860__auto__"],["^ ","^R",122,"^S",19,"^9","m__5860__auto__"],["^ ","^R",0,"^S",21],["^ ","^R",6,"^S",21],["^ ","^R",6,"^S",21,"^9","cljs.core/missing-protocol"],["^ ","^R",33,"^S",21],["^ ","^R",0,"^S",27],["^ ","^R",44,"^S",27],["^ ","^R",0,"^S",28],["^ ","^R",0,"^S",28],["^ ","^R",3,"^S",28],["^ ","^R",4,"^S",28],["^ ","^R",6,"^S",28],["^ ","^R",15,"^S",28],["^ ","^R",27,"^S",28],["^ ","^R",29,"^S",28],["^ ","^R",30,"^S",28],["^ ","^R",97,"^S",28],["^ ","^R",0,"^S",29],["^ ","^R",0,"^S",31],["^ ","^R",4,"^S",31,"^9","x__5859__auto__"],["^ ","^R",22,"^S",31],["^ ","^R",24,"^S",31],["^ ","^R",33,"^S",31],["^ ","^R",40,"^S",31],["^ ","^R",4,"^S",32,"^9","m__5860__auto__"],["^ ","^R",22,"^S",32],["^ ","^R",23,"^S",32,"^9","instaparse/auto-flatten-seq.cached?"],["^ ","^R",65,"^S",32],["^ ","^R",65,"^S",32,"^9","goog/typeOf"],["^ ","^R",77,"^S",32,"^9","x__5859__auto__"],["^ ","^R",0,"^S",33],["^ ","^R",0,"^S",33],["^ ","^R",3,"^S",33],["^ ","^R",5,"^S",33],["^ ","^R",6,"^S",33,"^9","m__5860__auto__"],["^ ","^R",25,"^S",33],["^ ","^R",0,"^S",34],["^ ","^R",8,"^S",34,"^9","m__5860__auto__"],["^ ","^R",56,"^S",34,"^9","m__5860__auto__"],["^ ","^R",110,"^S",34,"^9","m__5860__auto__"],["^ ","^R",0,"^S",36],["^ ","^R",4,"^S",36,"^9","m__5860__auto__"],["^ ","^R",26,"^S",36],["^ ","^R",27,"^S",36,"^9","instaparse/auto-flatten-seq.cached?"],["^ ","^R",69,"^S",36],["^ ","^R",0,"^S",37],["^ ","^R",0,"^S",37],["^ ","^R",3,"^S",37],["^ ","^R",5,"^S",37],["^ ","^R",6,"^S",37,"^9","m__5860__auto__"],["^ ","^R",29,"^S",37],["^ ","^R",0,"^S",38],["^ ","^R",8,"^S",38,"^9","m__5860__auto__"],["^ ","^R",60,"^S",38,"^9","m__5860__auto__"],["^ ","^R",118,"^S",38,"^9","m__5860__auto__"],["^ ","^R",0,"^S",40],["^ ","^R",6,"^S",40],["^ ","^R",6,"^S",40,"^9","cljs.core/missing-protocol"],["^ ","^R",33,"^S",40],["^ ","^R",0,"^S",46]],"^T",[["^ ","^R",0,"^S",6,"^9","instaparse.auto-flatten-seq/ConjFlat"]]],"~i7",["^ ","~i3",[["^ ","^R",0,"^S",8,"^9","instaparse.auto-flatten-seq/conj-flat"]],"~i14",[["^ ","^R",88,"^S",8,"^9","self"],["^ ","^R",7,"^S",9,"^9","self"],["^ ","^R",30,"^S",9,"^9","self"],["^ ","^R",7,"^S",10,"^9","self"],["^ ","^R",67,"^S",10,"^9","self"],["^ ","^R",25,"^S",12,"^9","self"],["^ ","^R",45,"^S",12,"^9","self"],["^ ","^R",102,"^S",15,"^9","self"],["^ ","^R",140,"^S",15,"^9","self"],["^ ","^R",110,"^S",19,"^9","self"],["^ ","^R",152,"^S",19,"^9","self"],["^ ","^R",54,"^S",21,"^9","self"]],"~i19",[["^ ","^R",93,"^S",8,"^9","obj"],["^ ","^R",72,"^S",10,"^9","obj"],["^ ","^R",107,"^S",15,"^9","obj"],["^ ","^R",145,"^S",15,"^9","obj"],["^ ","^R",115,"^S",19,"^9","obj"],["^ ","^R",157,"^S",19,"^9","obj"]]],"~i8",["^ ","~i3",[["^ ","^R",0,"^S",27,"^9","instaparse.auto-flatten-seq/cached?"]],"~i12",[["^ ","^R",96,"^S",27,"^9","self"],["^ ","^R",7,"^S",28,"^9","self"],["^ ","^R",30,"^S",28,"^9","self"],["^ ","^R",7,"^S",29,"^9","self"],["^ ","^R",71,"^S",29,"^9","self"],["^ ","^R",25,"^S",31,"^9","self"],["^ ","^R",45,"^S",31,"^9","self"],["^ ","^R",102,"^S",34,"^9","self"],["^ ","^R",136,"^S",34,"^9","self"],["^ ","^R",110,"^S",38,"^9","self"],["^ ","^R",148,"^S",38,"^9","self"],["^ ","^R",52,"^S",40,"^9","self"]]],"~i22",["^ ","~i0",[["^ ","^R",0,"^S",46],["^ ","^R",0,"^S",46],["^ ","^R",0,"^S",47],["^ ","^R",0,"^S",48],["^ ","^R",0,"^S",49]]],"~i28",["^ ","~i3",[["^ ","^R",0,"^S",49],["^ ","^R",40,"^S",54],["^ ","^R",0,"^S",55]],"~i17",[["^ ","^R",0,"^S",54,"^9","instaparse.auto-flatten-seq/hash-conj"]]],"~i32",["^ ","~i6",[["^ ","^R",88,"^S",54,"^9","unmixed-hash"]],"^V",[["^ ","^R",101,"^S",54,"^9","item"]]],"~i33",["^ ","~i5",[["^ ","^R",0,"^S",55]],"~i8",[["^ ","^R",8,"^S",55],["^ ","^R",23,"^S",55]],"~i9",[["^ ","^R",8,"^S",55,"^9","cljs.core/imul"]],"^Z",[["^ ","^R",28,"^S",55,"^9","unmixed-hash"]],"~i31",[["^ ","^R",44,"^S",55]],"^[",[["^ ","^R",44,"^S",55,"^9","cljs.core/hash"]],"~i37",[["^ ","^R",59,"^S",55,"^9","item"]]],"~i46",["^ ","~i3",[["^ ","^R",0,"^S",57],["^ ","^R",35,"^S",57],["^ ","^R",0,"^S",58]],"~i10",[["^ ","^R",0,"^S",57,"^9","instaparse.auto-flatten-seq/expt"]],"~i16",[["^ ","^R",78,"^S",57,"^9","base"]],"~i21",[["^ ","^R",83,"^S",57,"^9","pow"]]],"~i47",["^ ","~i5",[["^ ","^R",0,"^S",58],["^ ","^R",0,"^S",59]],"~i9",[["^ ","^R",3,"^S",58],["^ ","^R",12,"^S",58]],"^15",[["^ ","^R",4,"^S",58,"^9","pow"]]],"~i49",["^ ","~i7",[["^ ","^R",0,"^S",61],["^ ","^R",0,"^S",65]],"^U",[["^ ","^R",4,"^S",61,"^9","n"]],"^15",[["^ ","^R",8,"^S",61],["^ ","^R",15,"^S",61]],"^16",[["^ ","^R",9,"^S",61,"^9","pow"]],"~i27",[["^ ","^R",4,"^S",62,"^9","y"]],"~i29",[["^ ","^R",8,"^S",62],["^ ","^R",9,"^S",62],["^ ","^R",15,"^S",62]],"~i38",[["^ ","^R",4,"^S",63,"^9","z"]],"~i40",[["^ ","^R",8,"^S",63],["^ ","^R",16,"^S",63]],"~i45",[["^ ","^R",9,"^S",63,"^9","base"]]],"~i50",["^ ","~i9",[["^ ","^R",0,"^S",65],["^ ","^R",0,"^S",67]],"~i15",[["^ ","^R",4,"^S",65,"^9","t"]],"^Z",[["^ ","^R",8,"^S",65]],"~i18",[["^ ","^R",8,"^S",65,"^9","cljs.core/even?"]],"~i24",[["^ ","^R",30,"^S",65,"^9","n"]],"^Y",[["^ ","^R",4,"^S",66,"^9","n"]],"~i30",[["^ ","^R",12,"^S",66],["^ ","^R",29,"^S",66]],"^11",[["^ ","^R",12,"^S",66,"^9","cljs.core/quot"]],"~i36",[["^ ","^R",27,"^S",66,"^9","n"]]],"~i51",["^ ","~i11",[["^ ","^R",0,"^S",67],["^ ","^R",0,"^S",76],["^ ","^R",0,"^S",79]]],"~i52",["^ ","^T",[["^ ","^R",3,"^S",67,"^9","t"]],"^1?",[["^ ","^R",0,"^S",68]],"^X",[["^ ","^R",15,"^S",68,"^9","n"]],"^1A",[["^ ","^R",15,"^S",69,"^9","y"]],"~i26",[["^ ","^R",15,"^S",70]],"^19",[["^ ","^R",15,"^S",70,"^9","cljs.core/imul"]],"^[",[["^ ","^R",30,"^S",70,"^9","z"]],"~i34",[["^ ","^R",32,"^S",70,"^9","z"]]],"~i53",["^ ","^T",[["^ ","^R",3,"^S",76],["^ ","^R",14,"^S",76]],"~i20",[["^ ","^R",4,"^S",76,"^9","n"]],"~i23",[["^ ","^R",0,"^S",77]],"^1A",[["^ ","^R",7,"^S",77,"^9","cljs.core/imul"]],"^1:",[["^ ","^R",22,"^S",77,"^9","z"]],"^11",[["^ ","^R",24,"^S",77,"^9","y"]]],"~i54",["^ ","^V",[["^ ","^R",0,"^S",79]],"^1G",[["^ ","^R",15,"^S",79,"^9","n"]],"^Y",[["^ ","^R",15,"^S",80]],"^1:",[["^ ","^R",15,"^S",80,"^9","cljs.core/imul"]],"^1H",[["^ ","^R",30,"^S",80,"^9","z"]],"^1C",[["^ ","^R",32,"^S",80,"^9","y"]],"~i39",[["^ ","^R",15,"^S",81]],"^1<",[["^ ","^R",15,"^S",81,"^9","cljs.core/imul"]],"^1=",[["^ ","^R",30,"^S",81,"^9","z"]],"^17",[["^ ","^R",32,"^S",81,"^9","z"]]],"~i56",["^ ","~i0",[["^ ","^R",0,"^S",93],["^ ","^R",36,"^S",93],["^ ","^R",0,"^S",94]],"~i6",[["^ ","^R",0,"^S",93,"^9","instaparse.auto-flatten-seq/delve"]],"^T",[["^ ","^R",80,"^S",93,"^9","v"]],"^1?",[["^ ","^R",82,"^S",93,"^9","index"]]],"~i57",["^ ","~i2",[["^ ","^R",0,"^S",94],["^ ","^R",0,"^S",97]],"~i9",[["^ ","^R",4,"^S",94,"^9","v"]],"^1E",[["^ ","^R",12,"^S",94]],"^W",[["^ ","^R",12,"^S",94,"^9","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^R",59,"^S",94,"^9","v"]],"^16",[["^ ","^R",61,"^S",94,"^9","index"]]],"~i58",["^ ","~i9",[["^ ","^R",4,"^S",95,"^9","index"]],"^1?",[["^ ","^R",16,"^S",95,"^9","index"]]],"~i59",["^ ","~i4",[["^ ","^R",0,"^S",97]],"~i8",[["^ ","^R",20,"^S",97]],"~i9",[["^ ","^R",21,"^S",97,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",92,"^S",97,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",170,"^S",97,"^9","instaparse.auto-flatten-seq/afs?"]],"^U",[["^ ","^R",161,"^S",97,"^9","v"],["^ ","^R",219,"^S",97,"^9","v"]]],"~i60",["^ ","~i6",[["^ ","^R",0,"^S",98]],"^T",[["^ ","^R",15,"^S",98],["^ ","^R",65,"^S",98]],"^U",[["^ ","^R",15,"^S",98,"^9","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1@",[["^ ","^R",59,"^S",98,"^9","v"]],"^1K",[["^ ","^R",15,"^S",99],["^ ","^R",70,"^S",99]],"^1A",[["^ ","^R",15,"^S",99,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1:",[["^ ","^R",60,"^S",99,"^9","index"]]],"~i61",["^ ","~i6",[["^ ","^R",0,"^S",104,"^9","index"]]],"~i63",["^ ","~i0",[["^ ","^R",0,"^S",109],["^ ","^R",38,"^S",109],["^ ","^R",0,"^S",111]],"~i6",[["^ ","^R",0,"^S",109,"^9","instaparse.auto-flatten-seq/advance"]],"^1?",[["^ ","^R",84,"^S",109,"^9","v"]],"^Z",[["^ ","^R",86,"^S",109,"^9","index"]]],"~i64",["^ ","~i2",[["^ ","^R",0,"^S",111],["^ ","^R",0,"^S",118],["^ ","^R",0,"^S",123]]],"~i65",["^ ","~i4",[["^ ","^R",3,"^S",111],["^ ","^R",71,"^S",111]],"~i5",[["^ ","^R",3,"^S",111,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i7",[["^ ","^R",48,"^S",111]],"~i8",[["^ ","^R",48,"^S",111,"^9","cljs.core/count"]],"^U",[["^ ","^R",64,"^S",111,"^9","index"]]],"~i66",["^ ","~i4",[["^ ","^R",0,"^S",112],["^ ","^R",0,"^S",113],["^ ","^R",0,"^S",115]],"^14",[["^ ","^R",3,"^S",112]],"^T",[["^ ","^R",4,"^S",112]],"^U",[["^ ","^R",4,"^S",112,"^9","cljs.core/peek"]],"^V",[["^ ","^R",19,"^S",112,"^9","index"]],"^1G",[["^ ","^R",28,"^S",112],["^ ","^R",230,"^S",112]],"^11",[["^ ","^R",29,"^S",112]],"^[",[["^ ","^R",30,"^S",112,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",101,"^S",112,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",175,"^S",112,"^9","instaparse.auto-flatten-seq/true-count"]],"~i43",[["^ ","^R",170,"^S",112,"^9","v"],["^ ","^R",224,"^S",112,"^9","v"]]],"~i67",["^ ","~i6",[["^ ","^R",0,"^S",113],["^ ","^R",43,"^S",113]],"~i7",[["^ ","^R",7,"^S",113,"^9","instaparse.auto-flatten-seq/delve"]],"^T",[["^ ","^R",41,"^S",113,"^9","v"]],"^15",[["^ ","^R",126,"^S",113],["^ ","^R",151,"^S",113]],"^16",[["^ ","^R",127,"^S",113]],"^X",[["^ ","^R",127,"^S",113,"^9","cljs.core/peek"]],"^19",[["^ ","^R",142,"^S",113,"^9","index"]]],"~i69",["^ ","~i4",[["^ ","^R",3,"^S",118]],"~i7",[["^ ","^R",4,"^S",118]],"~i8",[["^ ","^R",4,"^S",118,"^9","cljs.core/peek"]],"^T",[["^ ","^R",19,"^S",118,"^9","index"]],"^1J",[["^ ","^R",28,"^S",118],["^ ","^R",7,"^S",120]],"~i25",[["^ ","^R",29,"^S",118],["^ ","^R",46,"^S",118,"^9","G__29188"],["^ ","^R",0,"^S",119],["^ ","^R",0,"^S",119],["^ ","^R",148,"^S",119,"^9","G__29188"],["^ ","^R",209,"^S",119,"^9","G__29188"]],"^1G",[["^ ","^R",8,"^S",119,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",79,"^S",119,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",160,"^S",119,"^9","instaparse.auto-flatten-seq/true-count"]],"^12",[["^ ","^R",57,"^S",118]],"^1;",[["^ ","^R",57,"^S",118,"^9","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1=",[["^ ","^R",104,"^S",118,"^9","v"]],"^17",[["^ ","^R",106,"^S",118]],"~i48",[["^ ","^R",106,"^S",118,"^9","cljs.core/pop"]],"^1F",[["^ ","^R",120,"^S",118,"^9","index"]]],"~i70",["^ ","~i4",[["^ ","^R",0,"^S",121]],"~i5",[["^ ","^R",7,"^S",121,"^9","instaparse.auto-flatten-seq/delve"]],"^1E",[["^ ","^R",41,"^S",121,"^9","v"]],"^T",[["^ ","^R",43,"^S",121]],"^U",[["^ ","^R",43,"^S",121,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^R",88,"^S",121]],"^1J",[["^ ","^R",88,"^S",121,"^9","cljs.core/pop"]],"^1A",[["^ ","^R",102,"^S",121,"^9","index"]],"^11",[["^ ","^R",109,"^S",121],["^ ","^R",134,"^S",121]],"^1C",[["^ ","^R",110,"^S",121]],"^12",[["^ ","^R",110,"^S",121,"^9","cljs.core/peek"]],"~i42",[["^ ","^R",125,"^S",121,"^9","index"]]],"~i73",["^ ","~i4",[["^ ","^R",0,"^S",123]],"^1E",[["^ ","^R",15,"^S",123,"^9","v"]],"^T",[["^ ","^R",15,"^S",124]],"^U",[["^ ","^R",15,"^S",124,"^9","cljs.core/pop"]],"^1@",[["^ ","^R",29,"^S",124,"^9","index"]]],"~i75",["^ ","~i0",[["^ ","^R",0,"^S",134],["^ ","^R",0,"^S",134],["^ ","^R",39,"^S",134],["^ ","^R",86,"^S",134,"^9","var_args"],["^ ","^R",0,"^S",135],["^ ","^R",0,"^S",135],["^ ","^R",4,"^S",135,"^9","G__29192"],["^ ","^R",15,"^S",135],["^ ","^R",15,"^S",135],["^ ","^R",0,"^S",136],["^ ","^R",0,"^S",136],["^ ","^R",8,"^S",136,"^9","G__29192"],["^ ","^R",5,"^S",137],["^ ","^R",0,"^S",138],["^ ","^R",7,"^S",138,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",74,"^S",138],["^ ","^R",75,"^S",138],["^ ","^R",85,"^S",138],["^ ","^R",5,"^S",141],["^ ","^R",0,"^S",142],["^ ","^R",7,"^S",142,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",74,"^S",142],["^ ","^R",75,"^S",142],["^ ","^R",85,"^S",142],["^ ","^R",91,"^S",142],["^ ","^R",92,"^S",142],["^ ","^R",102,"^S",142],["^ ","^R",0,"^S",146],["^ ","^R",6,"^S",146],["^ ","^R",11,"^S",146,"^9","js/Error"],["^ ","^R",17,"^S",146],["^ ","^R",18,"^S",146],["^ ","^R",80,"^S",146],["^ ","^R",80,"^S",146],["^ ","^R",0,"^S",151],["^ ","^R",0,"^S",151],["^ ","^R",69,"^S",151],["^ ","^R",0,"^S",152],["^ ","^R",0,"^S",159],["^ ","^R",0,"^S",159],["^ ","^R",69,"^S",159],["^ ","^R",0,"^S",160],["^ ","^R",0,"^S",172],["^ ","^R",0,"^S",172],["^ ","^R",63,"^S",172],["^ ","^R",0,"^S",174]],"~i6",[["^ ","^R",0,"^S",134,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",0,"^S",151,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",0,"^S",159,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",0,"^S",172,"^9","instaparse.auto-flatten-seq/flat-seq"]]],"~i76",["^ ","~i4",[["^ ","^R",80,"^S",151,"^9","v"]],"~i7",[["^ ","^R",0,"^S",152],["^ ","^R",0,"^S",155]],"^1E",[["^ ","^R",3,"^S",152],["^ ","^R",25,"^S",152]],"^Z",[["^ ","^R",4,"^S",152]],"^1@",[["^ ","^R",4,"^S",152,"^9","cljs.core/count"]],"^1A",[["^ ","^R",20,"^S",152,"^9","v"]]],"~i77",["^ ","~i9",[["^ ","^R",0,"^S",153]],"^14",[["^ ","^R",7,"^S",153,"^9","instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^R",74,"^S",153,"^9","v"]],"^16",[["^ ","^R",76,"^S",153],["^ ","^R",112,"^S",153],["^ ","^R",195,"^S",153]],"^X",[["^ ","^R",76,"^S",153,"^9","instaparse.auto-flatten-seq/delve"]],"^Y",[["^ ","^R",110,"^S",153,"^9","v"]]],"~i79",["^ ","~i4",[["^ ","^R",80,"^S",159,"^9","v"]],"~i6",[["^ ","^R",82,"^S",159,"^9","index"]]],"~i80",["^ ","~i4",[["^ ","^R",0,"^S",160],["^ ","^R",12,"^S",160,"^9","cljs.core/LazySeq"],["^ ","^R",30,"^S",160],["^ ","^R",35,"^S",160],["^ ","^R",0,"^S",161],["^ ","^R",3,"^S",169],["^ ","^R",8,"^S",169]]],"~i81",["^ ","~i6",[["^ ","^R",0,"^S",161]],"~i7",[["^ ","^R",7,"^S",161,"^9","cljs.core/cons"]],"^W",[["^ ","^R",22,"^S",161]],"^T",[["^ ","^R",22,"^S",161,"^9","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^R",69,"^S",161,"^9","v"]],"^X",[["^ ","^R",71,"^S",161,"^9","index"]]],"~i82",["^ ","^W",[["^ ","^R",78,"^S",161],["^ ","^R",95,"^S",161,"^9","temp__5457__auto__"],["^ ","^R",0,"^S",162],["^ ","^R",0,"^S",162],["^ ","^R",20,"^S",162,"^9","temp__5457__auto__"],["^ ","^R",0,"^S",163],["^ ","^R",0,"^S",163],["^ ","^R",17,"^S",163,"^9","temp__5457__auto__"],["^ ","^R",0,"^S",164],["^ ","^R",0,"^S",166]],"^1K",[["^ ","^R",4,"^S",163,"^9","next-index"]],"^1H",[["^ ","^R",116,"^S",161]],"~i35",[["^ ","^R",116,"^S",161,"^9","instaparse.auto-flatten-seq/advance"]],"^1X",[["^ ","^R",152,"^S",161,"^9","v"]],"^1=",[["^ ","^R",154,"^S",161,"^9","index"]]],"~i83",["^ ","^U",[["^ ","^R",0,"^S",164]],"^1?",[["^ ","^R",7,"^S",164,"^9","instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2"]],"^1A",[["^ ","^R",74,"^S",164,"^9","v"]],"^1G",[["^ ","^R",76,"^S",164,"^9","next-index"]]],"~i166",["^ ","~i0",[["^ ","^R",0,"^S",174],["^ ","^R",0,"^S",174],["^ ","^R",0,"^S",201],["^ ","^R",0,"^S",201],["^ ","^R",0,"^S",201],["^ ","^R",0,"^S",201],["^ ","^R",64,"^S",201],["^ ","^R",0,"^S",203],["^ ","^R",0,"^S",203],["^ ","^R",11,"^S",203],["^ ","^R",0,"^S",204],["^ ","^R",0,"^S",207],["^ ","^R",0,"^S",207],["^ ","^R",0,"^S",207],["^ ","^R",89,"^S",207],["^ ","^R",0,"^S",209],["^ ","^R",0,"^S",209],["^ ","^R",15,"^S",209],["^ ","^R",0,"^S",210],["^ ","^R",0,"^S",213],["^ ","^R",0,"^S",213],["^ ","^R",0,"^S",213],["^ ","^R",89,"^S",213],["^ ","^R",0,"^S",215],["^ ","^R",0,"^S",215],["^ ","^R",15,"^S",215],["^ ","^R",0,"^S",216],["^ ","^R",0,"^S",219],["^ ","^R",0,"^S",219],["^ ","^R",0,"^S",219],["^ ","^R",85,"^S",219],["^ ","^R",0,"^S",221],["^ ","^R",0,"^S",221],["^ ","^R",15,"^S",221],["^ ","^R",0,"^S",222],["^ ","^R",0,"^S",225],["^ ","^R",0,"^S",225],["^ ","^R",0,"^S",225],["^ ","^R",85,"^S",225],["^ ","^R",0,"^S",227],["^ ","^R",0,"^S",227],["^ ","^R",15,"^S",227],["^ ","^R",0,"^S",228],["^ ","^R",0,"^S",231],["^ ","^R",0,"^S",231],["^ ","^R",0,"^S",231],["^ ","^R",89,"^S",231],["^ ","^R",0,"^S",233],["^ ","^R",0,"^S",233],["^ ","^R",15,"^S",233],["^ ","^R",0,"^S",234],["^ ","^R",0,"^S",237],["^ ","^R",0,"^S",237],["^ ","^R",0,"^S",237],["^ ","^R",85,"^S",237],["^ ","^R",0,"^S",239],["^ ","^R",0,"^S",239],["^ ","^R",15,"^S",239],["^ ","^R",0,"^S",240],["^ ","^R",0,"^S",243],["^ ","^R",0,"^S",243],["^ ","^R",0,"^S",243],["^ ","^R",87,"^S",243],["^ ","^R",0,"^S",245],["^ ","^R",0,"^S",245],["^ ","^R",15,"^S",245],["^ ","^R",0,"^S",246],["^ ","^R",0,"^S",249],["^ ","^R",0,"^S",249],["^ ","^R",0,"^S",249],["^ ","^R",101,"^S",249],["^ ","^R",0,"^S",251],["^ ","^R",0,"^S",251],["^ ","^R",15,"^S",251],["^ ","^R",0,"^S",252],["^ ","^R",0,"^S",255],["^ ","^R",0,"^S",255],["^ ","^R",0,"^S",255],["^ ","^R",85,"^S",255],["^ ","^R",0,"^S",257],["^ ","^R",0,"^S",257],["^ ","^R",15,"^S",257],["^ ","^R",0,"^S",258],["^ ","^R",0,"^S",261],["^ ","^R",0,"^S",261],["^ ","^R",0,"^S",261],["^ ","^R",84,"^S",261],["^ ","^R",0,"^S",263],["^ ","^R",0,"^S",263],["^ ","^R",15,"^S",263],["^ ","^R",0,"^S",264],["^ ","^R",0,"^S",267],["^ ","^R",0,"^S",267],["^ ","^R",0,"^S",267],["^ ","^R",87,"^S",267],["^ ","^R",0,"^S",269],["^ ","^R",0,"^S",269],["^ ","^R",15,"^S",269],["^ ","^R",0,"^S",270],["^ ","^R",0,"^S",279],["^ ","^R",0,"^S",279],["^ ","^R",0,"^S",279],["^ ","^R",94,"^S",279],["^ ","^R",0,"^S",281],["^ ","^R",0,"^S",281],["^ ","^R",15,"^S",281],["^ ","^R",0,"^S",282],["^ ","^R",0,"^S",285],["^ ","^R",0,"^S",285],["^ ","^R",0,"^S",285],["^ ","^R",91,"^S",285],["^ ","^R",0,"^S",287],["^ ","^R",0,"^S",287],["^ ","^R",15,"^S",287],["^ ","^R",0,"^S",288],["^ ","^R",0,"^S",291],["^ ","^R",0,"^S",291],["^ ","^R",0,"^S",291],["^ ","^R",93,"^S",291,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",293],["^ ","^R",0,"^S",293],["^ ","^R",0,"^S",293],["^ ","^R",110,"^S",293],["^ ","^R",0,"^S",295],["^ ","^R",0,"^S",295],["^ ","^R",15,"^S",295],["^ ","^R",0,"^S",296],["^ ","^R",0,"^S",329],["^ ","^R",0,"^S",329],["^ ","^R",0,"^S",329],["^ ","^R",114,"^S",329],["^ ","^R",0,"^S",331],["^ ","^R",0,"^S",331],["^ ","^R",15,"^S",331],["^ ","^R",0,"^S",332],["^ ","^R",0,"^S",335],["^ ","^R",0,"^S",335],["^ ","^R",54,"^S",335],["^ ","^R",0,"^S",336],["^ ","^R",0,"^S",336],["^ ","^R",90,"^S",336],["^ ","^R",110,"^S",336],["^ ","^R",161,"^S",336],["^ ","^R",204,"^S",336],["^ ","^R",256,"^S",336],["^ ","^R",346,"^S",336],["^ ","^R",366,"^S",336],["^ ","^R",446,"^S",336],["^ ","^R",489,"^S",336],["^ ","^R",541,"^S",336],["^ ","^R",612,"^S",336],["^ ","^R",632,"^S",336],["^ ","^R",697,"^S",336],["^ ","^R",740,"^S",336],["^ ","^R",792,"^S",336],["^ ","^R",863,"^S",336],["^ ","^R",883,"^S",336],["^ ","^R",938,"^S",336],["^ ","^R",981,"^S",336],["^ ","^R",1033,"^S",336],["^ ","^R",1104,"^S",336],["^ ","^R",1124,"^S",336],["^ ","^R",1184,"^S",336],["^ ","^R",1227,"^S",336],["^ ","^R",1279,"^S",336],["^ ","^R",1351,"^S",336],["^ ","^R",1371,"^S",336],["^ ","^R",1440,"^S",336],["^ ","^R",1483,"^S",336],["^ ","^R",1535,"^S",336],["^ ","^R",1592,"^S",336],["^ ","^R",1681,"^S",336],["^ ","^R",0,"^S",339],["^ ","^R",0,"^S",339],["^ ","^R",60,"^S",339],["^ ","^R",0,"^S",341],["^ ","^R",0,"^S",341],["^ ","^R",63,"^S",341],["^ ","^R",0,"^S",343],["^ ","^R",0,"^S",343],["^ ","^R",68,"^S",343],["^ ","^R",79,"^S",343,"^9","this__5797__auto__"],["^ ","^R",98,"^S",343,"^9","writer__5798__auto__"],["^ ","^R",119,"^S",343,"^9","opt__5799__auto__"],["^ ","^R",0,"^S",344],["^ ","^R",0,"^S",344],["^ ","^R",7,"^S",344,"^9","cljs.core/-write"],["^ ","^R",24,"^S",344,"^9","writer__5798__auto__"],["^ ","^R",45,"^S",344],["^ ","^R",0,"^S",347],["^ ","^R",50,"^S",347],["^ ","^R",0,"^S",348],["^ ","^R",0,"^S",348],["^ ","^R",12,"^S",348,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]],"~i9",[["^ ","^R",0,"^S",201,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",207,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",213,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",219,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",225,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",231,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",237,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",243,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",249,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",255,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",261,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",267,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",279,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",285,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",291,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",293,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",329,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",335,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",339,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",341,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",343,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",347,"^9","instaparse.auto-flatten-seq/->AutoFlattenSeq"],["^ ","^R",0,"^S",351,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]],"^1X",[["^ ","^R",108,"^S",347,"^9","v"],["^ ","^R",55,"^S",348,"^9","v"]],"^1I",[["^ ","^R",110,"^S",347,"^9","premix-hashcode"],["^ ","^R",57,"^S",348,"^9","premix-hashcode"]],"^26",[["^ ","^R",126,"^S",347,"^9","hashcode"],["^ ","^R",73,"^S",348,"^9","hashcode"]],"~i94",[["^ ","^R",135,"^S",347,"^9","cnt"],["^ ","^R",82,"^S",348,"^9","cnt"]],"~i107",[["^ ","^R",139,"^S",347,"^9","dirty"],["^ ","^R",86,"^S",348,"^9","dirty"]]],"~i167",["^ ","^1N",[["^ ","^R",145,"^S",347,"^9","cached-seq"],["^ ","^R",92,"^S",348,"^9","cached-seq"]]],"~i169",["^ ","^T",[["^ ","^R",4,"^S",203,"^9","self"]],"^V",[["^ ","^R",0,"^S",204]],"^1J",[["^ ","^R",7,"^S",204,"^9","cljs.core/pr-str*"]],"^Y",[["^ ","^R",30,"^S",204]],"^1:",[["^ ","^R",30,"^S",204,"^9","cljs.core/seq"]],"^10",[["^ ","^R",44,"^S",204,"^9","self"]]],"~i171",["^ ","^14",[["^ ","^R",96,"^S",237,"^9","self"],["^ ","^R",4,"^S",239,"^9","self"]],"^15",[["^ ","^R",0,"^S",240,"^9","hashcode"]]],"~i174",["^ ","^1E",[["^ ","^R",96,"^S",255,"^9","self"],["^ ","^R",4,"^S",257,"^9","self"]],"^Z",[["^ ","^R",0,"^S",258]],"^1@",[["^ ","^R",7,"^S",258,"^9","cljs.core/first"]],"^1A",[["^ ","^R",23,"^S",258]],"^1[",[["^ ","^R",23,"^S",258,"^9","cljs.core/seq"]],"^1:",[["^ ","^R",37,"^S",258,"^9","self"]]],"~i175",["^ ","^14",[["^ ","^R",95,"^S",261,"^9","self"],["^ ","^R",4,"^S",263,"^9","self"]],"^15",[["^ ","^R",0,"^S",264]],"^Z",[["^ ","^R",7,"^S",264,"^9","cljs.core/rest"]],"^X",[["^ ","^R",22,"^S",264]],"^1K",[["^ ","^R",22,"^S",264,"^9","cljs.core/seq"]],"^19",[["^ ","^R",36,"^S",264,"^9","self"]]],"~i177",["^ ","^1E",[["^ ","^R",98,"^S",243,"^9","self"],["^ ","^R",4,"^S",245,"^9","self"]],"^15",[["^ ","^R",103,"^S",243,"^9","other"]]],"~i178",["^ ","~i4",[["^ ","^R",0,"^S",246]]],"~i179",["^ ","~i9",[["^ ","^R",8,"^S",246]],"^14",[["^ ","^R",8,"^S",246,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^W",[["^ ","^R",53,"^S",246,"^9","hashcode"]],"^16",[["^ ","^R",69,"^S",246]],"^X",[["^ ","^R",69,"^S",246,"^9","cljs.core/hash"]],"^19",[["^ ","^R",84,"^S",246,"^9","other"]]],"~i180",["^ ","~i9",[["^ ","^R",97,"^S",246]],"^14",[["^ ","^R",97,"^S",246,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^W",[["^ ","^R",142,"^S",246,"^9","cnt"]],"^15",[["^ ","^R",153,"^S",246]],"^Z",[["^ ","^R",153,"^S",246,"^9","cljs.core/count"]],"^1K",[["^ ","^R",169,"^S",246,"^9","other"]]],"~i181",["^ ","~i9",[["^ ","^R",182,"^S",246]],"^T",[["^ ","^R",183,"^S",246],["^ ","^R",239,"^S",246]],"^U",[["^ ","^R",183,"^S",246,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^15",[["^ ","^R",228,"^S",246,"^9","cnt"]]],"~i182",["^ ","^T",[["^ ","^R",249,"^S",246]],"^U",[["^ ","^R",249,"^S",246,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^15",[["^ ","^R",294,"^S",246]],"^Z",[["^ ","^R",294,"^S",246,"^9","cljs.core/seq"]],"^16",[["^ ","^R",308,"^S",246,"^9","self"]],"^19",[["^ ","^R",318,"^S",246,"^9","other"]]],"~i184",["^ ","^14",[["^ ","^R",102,"^S",285,"^9","self"],["^ ","^R",4,"^S",287,"^9","self"]],"^1?",[["^ ","^R",107,"^S",285,"^9","o"]],"^1@",[["^ ","^R",0,"^S",288]],"^V",[["^ ","^R",7,"^S",288,"^9","cljs.core/cons"]],"^1A",[["^ ","^R",22,"^S",288,"^9","o"]],"^1G",[["^ ","^R",24,"^S",288,"^9","self"]]],"~i186",["^ ","^1E",[["^ ","^R",112,"^S",249,"^9","self"],["^ ","^R",4,"^S",251,"^9","self"]],"^Z",[["^ ","^R",0,"^S",252]],"^1@",[["^ ","^R",7,"^S",252,"^9","cljs.core/with-meta"]],"^Y",[["^ ","^R",27,"^S",252,"^9","instaparse.auto-flatten-seq/EMPTY"]],"^1H",[["^ ","^R",61,"^S",252]],"^2;",[["^ ","^R",61,"^S",252,"^9","cljs.core/meta"]],"^1<",[["^ ","^R",76,"^S",252,"^9","self"]]],"~i188",["^ ","^14",[["^ ","^R",96,"^S",225,"^9","self"],["^ ","^R",4,"^S",227,"^9","self"]],"^15",[["^ ","^R",0,"^S",228]],"^Z",[["^ ","^R",7,"^S",228,"^9","cljs.core/next"]],"^X",[["^ ","^R",22,"^S",228]],"^1K",[["^ ","^R",22,"^S",228,"^9","cljs.core/seq"]],"^19",[["^ ","^R",36,"^S",228,"^9","self"]]],"~i190",["^ ","^U",[["^ ","^R",121,"^S",293,"^9","self"],["^ ","^R",4,"^S",295,"^9","self"]],"^V",[["^ ","^R",126,"^S",293,"^9","obj"]]],"~i191",["^ ","~i4",[["^ ","^R",0,"^S",296],["^ ","^R",0,"^S",299],["^ ","^R",0,"^S",321]]],"~i192",["^ ","~i6",[["^ ","^R",3,"^S",296],["^ ","^R",11,"^S",296]],"^W",[["^ ","^R",4,"^S",296,"^9","obj"]],"^Z",[["^ ","^R",0,"^S",297,"^9","self"]]],"~i193",["^ ","~i6",[["^ ","^R",20,"^S",299]],"~i7",[["^ ","^R",21,"^S",299,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",92,"^S",299,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",168,"^S",299,"^9","instaparse.auto-flatten-seq/afs?"]],"^W",[["^ ","^R",161,"^S",299,"^9","obj"],["^ ","^R",217,"^S",299,"^9","obj"]]],"~i194",["^ ","~i6",[["^ ","^R",0,"^S",300],["^ ","^R",0,"^S",303],["^ ","^R",0,"^S",314]]],"~i195",["^ ","~i8",[["^ ","^R",3,"^S",300],["^ ","^R",19,"^S",300]],"^1?",[["^ ","^R",4,"^S",300,"^9","cnt"]],"^1J",[["^ ","^R",0,"^S",301,"^9","obj"]]],"~i196",["^ ","~i8",[["^ ","^R",3,"^S",303]],"^W",[["^ ","^R",4,"^S",303]],"^T",[["^ ","^R",4,"^S",303,"^9","cljs.core/count"]],"^V",[["^ ","^R",20,"^S",303,"^9","obj"]],"^1A",[["^ ","^R",28,"^S",303,"^9","instaparse.auto-flatten-seq/threshold"],["^ ","^R",28,"^S",303]]],"~i197",["^ ","~i8",[["^ ","^R",0,"^S",304],["^ ","^R",0,"^S",306]],"^U",[["^ ","^R",4,"^S",304,"^9","phc"]],"^1@",[["^ ","^R",10,"^S",304]],"^V",[["^ ","^R",11,"^S",304,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",80,"^S",304,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",163,"^S",304,"^9","instaparse.auto-flatten-seq/hash-cat"]],"^Y",[["^ ","^R",147,"^S",304,"^9","self"],["^ ","^R",210,"^S",304,"^9","self"]],"^10",[["^ ","^R",156,"^S",304,"^9","obj"],["^ ","^R",219,"^S",304,"^9","obj"]]],"~i198",["^ ","^U",[["^ ","^R",4,"^S",305,"^9","new-cnt"]],"^X",[["^ ","^R",14,"^S",305]],"^1[",[["^ ","^R",15,"^S",305,"^9","cnt"]],"^1:",[["^ ","^R",28,"^S",305]],"^1B",[["^ ","^R",28,"^S",305,"^9","cljs.core/count"]],"^1C",[["^ ","^R",44,"^S",305,"^9","obj"]]],"~i199",["^ ","^14",[["^ ","^R",0,"^S",306],["^ ","^R",12,"^S",306,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",5,"^S",312]],"^19",[["^ ","^R",55,"^S",306]],"^Y",[["^ ","^R",55,"^S",306,"^9","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^10",[["^ ","^R",100,"^S",306,"^9","v"]],"^2;",[["^ ","^R",109,"^S",306,"^9","obj"]],"^1<",[["^ ","^R",114,"^S",306,"^9","phc"]],"~i44",[["^ ","^R",118,"^S",306]],"^1=",[["^ ","^R",118,"^S",306,"^9","cljs.core/mix-collection-hash"]],"^1V",[["^ ","^R",148,"^S",306,"^9","phc"]],"^1Z",[["^ ","^R",152,"^S",306,"^9","new-cnt"]],"~i78",[["^ ","^R",161,"^S",306,"^9","new-cnt"]]],"~i200",["^ ","^19",[["^ ","^R",169,"^S",306],["^ ","^R",186,"^S",306,"^9","or__5126__auto__"],["^ ","^R",0,"^S",307],["^ ","^R",0,"^S",307],["^ ","^R",3,"^S",307,"^9","or__5126__auto__"],["^ ","^R",0,"^S",308,"^9","or__5126__auto__"]],"^11",[["^ ","^R",205,"^S",306,"^9","dirty"]],"^12",[["^ ","^R",0,"^S",310]],"~i62",[["^ ","^R",7,"^S",310,"^9","obj"]]],"~i202",["^ ","~i8",[["^ ","^R",0,"^S",314],["^ ","^R",0,"^S",316]],"^U",[["^ ","^R",4,"^S",314,"^9","phc"]],"^1@",[["^ ","^R",10,"^S",314]],"^V",[["^ ","^R",11,"^S",314,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",80,"^S",314,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",163,"^S",314,"^9","instaparse.auto-flatten-seq/hash-cat"]],"^Y",[["^ ","^R",147,"^S",314,"^9","self"],["^ ","^R",210,"^S",314,"^9","self"]],"^10",[["^ ","^R",156,"^S",314,"^9","obj"],["^ ","^R",219,"^S",314,"^9","obj"]]],"~i203",["^ ","^U",[["^ ","^R",4,"^S",315,"^9","new-cnt"]],"^X",[["^ ","^R",14,"^S",315]],"^1[",[["^ ","^R",15,"^S",315,"^9","cnt"]],"^1:",[["^ ","^R",28,"^S",315]],"^1B",[["^ ","^R",28,"^S",315,"^9","cljs.core/count"]],"^1C",[["^ ","^R",44,"^S",315,"^9","obj"]]],"~i204",["^ ","^14",[["^ ","^R",0,"^S",316],["^ ","^R",12,"^S",316,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",169,"^S",316],["^ ","^R",174,"^S",316]],"^19",[["^ ","^R",55,"^S",316]],"^Y",[["^ ","^R",55,"^S",316,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^10",[["^ ","^R",100,"^S",316,"^9","v"]],"^2;",[["^ ","^R",109,"^S",316,"^9","obj"]],"^1<",[["^ ","^R",114,"^S",316,"^9","phc"]],"^2X",[["^ ","^R",118,"^S",316]],"^1=",[["^ ","^R",118,"^S",316,"^9","cljs.core/mix-collection-hash"]],"^1V",[["^ ","^R",148,"^S",316,"^9","phc"]],"^1Z",[["^ ","^R",152,"^S",316,"^9","new-cnt"]],"^2Y",[["^ ","^R",161,"^S",316,"^9","new-cnt"]]],"~i207",["^ ","~i6",[["^ ","^R",0,"^S",321],["^ ","^R",0,"^S",323]],"^W",[["^ ","^R",4,"^S",321,"^9","phc"]],"^15",[["^ ","^R",10,"^S",321]],"^Z",[["^ ","^R",10,"^S",321,"^9","instaparse.auto-flatten-seq/hash-conj"]],"^19",[["^ ","^R",48,"^S",321,"^9","premix-hashcode"]],"^1X",[["^ ","^R",71,"^S",321,"^9","obj"]]],"~i208",["^ ","^W",[["^ ","^R",4,"^S",322,"^9","new-cnt"]],"^1J",[["^ ","^R",14,"^S",322],["^ ","^R",28,"^S",322]],"^1[",[["^ ","^R",15,"^S",322,"^9","cnt"]]],"~i209",["^ ","~i8",[["^ ","^R",0,"^S",323],["^ ","^R",12,"^S",323,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",182,"^S",323]],"^1[",[["^ ","^R",55,"^S",323]],"^1G",[["^ ","^R",55,"^S",323,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^11",[["^ ","^R",100,"^S",323,"^9","v"]],"^10",[["^ ","^R",109,"^S",323,"^9","obj"]],"^1;",[["^ ","^R",114,"^S",323,"^9","phc"]],"^22",[["^ ","^R",118,"^S",323]],"^1X",[["^ ","^R",118,"^S",323,"^9","cljs.core/mix-collection-hash"]],"^1T",[["^ ","^R",148,"^S",323,"^9","phc"]],"^1Y",[["^ ","^R",152,"^S",323,"^9","new-cnt"]],"^25",[["^ ","^R",161,"^S",323,"^9","new-cnt"]],"~i84",[["^ ","^R",169,"^S",323,"^9","dirty"]]],"~i210",["^ ","^W",[["^ ","^R",125,"^S",329,"^9","self"],["^ ","^R",4,"^S",331,"^9","self"]],"^1@",[["^ ","^R",0,"^S",332,"^9","cached-seq"]]],"~i212",["^ ","^1E",[["^ ","^R",100,"^S",231,"^9","self"],["^ ","^R",4,"^S",233,"^9","self"]],"^Z",[["^ ","^R",0,"^S",234,"^9","cnt"]]],"~i214",["^ ","^W",[["^ ","^R",100,"^S",207,"^9","self"],["^ ","^R",4,"^S",209,"^9","self"]],"^Z",[["^ ","^R",105,"^S",207,"^9","key"]]],"~i215",["^ ","~i4",[["^ ","^R",0,"^S",210]],"~i5",[["^ ","^R",7,"^S",210,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",55,"^S",210,"^9","v"]],"^1?",[["^ ","^R",64,"^S",210,"^9","key"]]],"~i216",["^ ","^W",[["^ ","^R",100,"^S",213,"^9","self"],["^ ","^R",4,"^S",215,"^9","self"]],"^Z",[["^ ","^R",105,"^S",213,"^9","key"]],"^16",[["^ ","^R",109,"^S",213,"^9","not-found"]]],"~i217",["^ ","~i4",[["^ ","^R",0,"^S",216]],"~i5",[["^ ","^R",7,"^S",216,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3"]],"^T",[["^ ","^R",55,"^S",216,"^9","v"]],"^1?",[["^ ","^R",64,"^S",216,"^9","key"]],"^V",[["^ ","^R",68,"^S",216,"^9","not-found"]]],"~i219",["^ ","^1?",[["^ ","^R",105,"^S",279,"^9","self"],["^ ","^R",4,"^S",281,"^9","self"]],"^1J",[["^ ","^R",110,"^S",279,"^9","metamap"]]],"~i220",["^ ","~i4",[["^ ","^R",0,"^S",282],["^ ","^R",12,"^S",282,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",156,"^S",282]],"^16",[["^ ","^R",55,"^S",282]],"^X",[["^ ","^R",55,"^S",282,"^9","cljs.core/with-meta"]],"^[",[["^ ","^R",75,"^S",282,"^9","v"]],"^1H",[["^ ","^R",84,"^S",282,"^9","metamap"]],"^1X",[["^ ","^R",93,"^S",282,"^9","premix-hashcode"]],"^1Q",[["^ ","^R",116,"^S",282,"^9","hashcode"]],"~i68",[["^ ","^R",132,"^S",282,"^9","cnt"]],"~i72",[["^ ","^R",143,"^S",282,"^9","dirty"]]],"~i222",["^ ","^14",[["^ ","^R",96,"^S",219,"^9","self"],["^ ","^R",4,"^S",221,"^9","self"]]],"~i223",["^ ","~i4",[["^ ","^R",0,"^S",222]],"~i5",[["^ ","^R",7,"^S",222,"^9","cljs.core/meta"]],"^14",[["^ ","^R",22,"^S",222,"^9","v"]]],"~i225",["^ ","~i9",[["^ ","^R",98,"^S",267,"^9","self"],["^ ","^R",4,"^S",269,"^9","self"]]],"~i226",["^ ","~i4",[["^ ","^R",0,"^S",270]],"~i8",[["^ ","^R",20,"^S",270,"^9","cached-seq"]],"^V",[["^ ","^R",0,"^S",271,"^9","cached-seq"]]],"~i227",["^ ","~i6",[["^ ","^R",0,"^S",273]]],"~i228",["^ ","~i8",[["^ ","^R",0,"^S",273]],"^U",[["^ ","^R",0,"^S",273,"^9","cached-seq"]],"^1[",[["^ ","^R",20,"^S",273]],"^1:",[["^ ","^R",22,"^S",273,"^9","dirty"]],"^2;",[["^ ","^R",36,"^S",273]],"^1C",[["^ ","^R",36,"^S",273,"^9","instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1"]],"^1=",[["^ ","^R",103,"^S",273,"^9","v"]],"^20",[["^ ","^R",113,"^S",273]],"^18",[["^ ","^R",113,"^S",273,"^9","cljs.core/seq"]],"^1I",[["^ ","^R",127,"^S",273,"^9","v"]]],"~i229",["^ ","~i8",[["^ ","^R",0,"^S",275,"^9","cached-seq"]]],"~i239",["^ ","~i3",[["^ ","^R",0,"^S",351],["^ ","^R",39,"^S",351],["^ ","^R",0,"^S",352]],"^14",[["^ ","^R",0,"^S",351,"^9","instaparse.auto-flatten-seq/hash-cat"]],"^2X",[["^ ","^R",86,"^S",351,"^9","v1"]],"^1T",[["^ ","^R",89,"^S",351,"^9","v2"]]],"~i240",["^ ","~i5",[["^ ","^R",0,"^S",352],["^ ","^R",0,"^S",354]],"^1E",[["^ ","^R",4,"^S",352,"^9","c"]],"^T",[["^ ","^R",8,"^S",352]],"^U",[["^ ","^R",8,"^S",352,"^9","cljs.core/count"]],"^1J",[["^ ","^R",24,"^S",352,"^9","v2"]]],"~i241",["^ ","^1E",[["^ ","^R",4,"^S",353,"^9","e"]],"^T",[["^ ","^R",8,"^S",353],["^ ","^R",52,"^S",353]],"^1@",[["^ ","^R",9,"^S",353],["^ ","^R",42,"^S",353]],"^V",[["^ ","^R",9,"^S",353,"^9","instaparse.auto-flatten-seq/expt"]],"^19",[["^ ","^R",47,"^S",353,"^9","c"]]],"~i242",["^ ","~i7",[["^ ","^R",0,"^S",354]],"^14",[["^ ","^R",8,"^S",354]],"^1E",[["^ ","^R",8,"^S",354,"^9","cljs.core/imul"]],"^15",[["^ ","^R",23,"^S",354,"^9","e"]],"^1@",[["^ ","^R",25,"^S",354]],"^12",[["^ ","^R",25,"^S",354,"^9","v1"]]],"~i243",["^ ","^14",[["^ ","^R",47,"^S",354]],"^T",[["^ ","^R",48,"^S",354]],"^[",[["^ ","^R",48,"^S",354,"^9","v2"]],"^1C",[["^ ","^R",69,"^S",354,"^9","e"]]],"~i259",["^ ","~i3",[["^ ","^R",0,"^S",356],["^ ","^R",0,"^S",356],["^ ","^R",60,"^S",359],["^ ","^R",128,"^S",359,"^9","var_args"],["^ ","^R",0,"^S",360],["^ ","^R",0,"^S",360],["^ ","^R",4,"^S",360,"^9","G__29216"],["^ ","^R",15,"^S",360],["^ ","^R",15,"^S",360],["^ ","^R",0,"^S",361],["^ ","^R",0,"^S",361],["^ ","^R",8,"^S",361,"^9","G__29216"],["^ ","^R",5,"^S",362],["^ ","^R",0,"^S",363],["^ ","^R",7,"^S",363,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",95,"^S",363],["^ ","^R",96,"^S",363],["^ ","^R",106,"^S",363],["^ ","^R",5,"^S",366],["^ ","^R",0,"^S",367],["^ ","^R",7,"^S",367,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",95,"^S",367],["^ ","^R",96,"^S",367],["^ ","^R",106,"^S",367],["^ ","^R",112,"^S",367],["^ ","^R",113,"^S",367],["^ ","^R",123,"^S",367],["^ ","^R",0,"^S",371],["^ ","^R",6,"^S",371],["^ ","^R",11,"^S",371,"^9","js/Error"],["^ ","^R",17,"^S",371],["^ ","^R",18,"^S",371],["^ ","^R",80,"^S",371],["^ ","^R",80,"^S",371],["^ ","^R",0,"^S",376],["^ ","^R",0,"^S",376],["^ ","^R",90,"^S",376],["^ ","^R",0,"^S",377],["^ ","^R",0,"^S",380],["^ ","^R",0,"^S",380],["^ ","^R",90,"^S",380],["^ ","^R",0,"^S",381],["^ ","^R",0,"^S",397],["^ ","^R",0,"^S",397],["^ ","^R",84,"^S",397],["^ ","^R",0,"^S",399]],"^Z",[["^ ","^R",0,"^S",359,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",0,"^S",376,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",0,"^S",380,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",0,"^S",397,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"]]],"~i261",["^ ","~i7",[["^ ","^R",101,"^S",376,"^9","coll"]]],"~i262",["^ ","~i6",[["^ ","^R",0,"^S",377],["^ ","^R",95,"^S",377]],"~i7",[["^ ","^R",7,"^S",377,"^9","instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2"]],"^1M",[["^ ","^R",99,"^S",377,"^9","coll"]]],"~i263",["^ ","~i7",[["^ ","^R",101,"^S",380,"^9","existing-unmixed-hash"]],"^1:",[["^ ","^R",123,"^S",380,"^9","coll"]]],"~i264",["^ ","~i6",[["^ ","^R",0,"^S",381],["^ ","^R",0,"^S",384]],"^T",[["^ ","^R",4,"^S",381,"^9","unmixed-hash"]],"^1G",[["^ ","^R",19,"^S",381,"^9","existing-unmixed-hash"]]],"~i265",["^ ","^T",[["^ ","^R",4,"^S",382,"^9","coll"]],"^1@",[["^ ","^R",15,"^S",382]],"^V",[["^ ","^R",15,"^S",382,"^9","cljs.core/seq"]],"^1K",[["^ ","^R",29,"^S",382,"^9","coll"]]],"~i266",["^ ","~i8",[["^ ","^R",0,"^S",384],["^ ","^R",3,"^S",384]],"^15",[["^ ","^R",5,"^S",384],["^ ","^R",18,"^S",384]],"^X",[["^ ","^R",6,"^S",384,"^9","coll"]]],"~i267",["^ ","^14",[["^ ","^R",0,"^S",385]],"^Z",[["^ ","^R",15,"^S",385],["^ ","^R",98,"^S",385]],"^1[",[["^ ","^R",16,"^S",385]],"^Y",[["^ ","^R",17,"^S",385],["^ ","^R",32,"^S",385]],"^1:",[["^ ","^R",17,"^S",385,"^9","cljs.core/imul"]],"^12",[["^ ","^R",37,"^S",385,"^9","unmixed-hash"]],"^1D",[["^ ","^R",53,"^S",385]],"^1F",[["^ ","^R",53,"^S",385,"^9","cljs.core/hash"]],"^1O",[["^ ","^R",68,"^S",385]],"^1P",[["^ ","^R",68,"^S",385,"^9","cljs.core/first"]],"^1U",[["^ ","^R",84,"^S",385,"^9","coll"]]],"~i268",["^ ","^Z",[["^ ","^R",15,"^S",386]],"^1@",[["^ ","^R",15,"^S",386,"^9","cljs.core/next"]],"^1K",[["^ ","^R",30,"^S",386,"^9","coll"]]],"~i269",["^ ","^14",[["^ ","^R",0,"^S",391,"^9","unmixed-hash"]]],"~i272",["^ ","~i3",[["^ ","^R",0,"^S",399],["^ ","^R",0,"^S",399],["^ ","^R",0,"^S",399],["^ ","^R",0,"^S",399],["^ ","^R",0,"^S",399],["^ ","^R",83,"^S",399,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",401],["^ ","^R",0,"^S",401],["^ ","^R",0,"^S",401]]],"~i273",["^ ","~i5",[["^ ","^R",0,"^S",399,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",401,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]]],"~i274",["^ ","~i5",[["^ ","^R",101,"^S",401],["^ ","^R",0,"^S",402],["^ ","^R",0,"^S",402],["^ ","^R",14,"^S",402],["^ ","^R",0,"^S",403]],"^1@",[["^ ","^R",112,"^S",401,"^9","afs"],["^ ","^R",4,"^S",402,"^9","afs"]],"^X",[["^ ","^R",116,"^S",401,"^9","writer"]],"^1:",[["^ ","^R",123,"^S",401,"^9","opts"]]],"~i275",["^ ","~i7",[["^ ","^R",0,"^S",403]],"~i8",[["^ ","^R",7,"^S",403,"^9","cljs.core/-pr-writer"]],"^V",[["^ ","^R",28,"^S",403]],"^1J",[["^ ","^R",28,"^S",403,"^9","cljs.core/seq"]],"^1A",[["^ ","^R",42,"^S",403,"^9","afs"]],"^1:",[["^ ","^R",51,"^S",403,"^9","writer"]],"^1C",[["^ ","^R",58,"^S",403,"^9","opts"]]],"~i277",["^ ","~i0",[["^ ","^R",0,"^S",405],["^ ","^R",47,"^S",405],["^ ","^R",0,"^S",406]],"~i6",[["^ ","^R",0,"^S",405,"^9","instaparse.auto-flatten-seq/auto-flatten-seq"]],"^1A",[["^ ","^R",102,"^S",405,"^9","v"]]],"~i278",["^ ","~i2",[["^ ","^R",0,"^S",406],["^ ","^R",0,"^S",407]],"~i8",[["^ ","^R",4,"^S",406,"^9","v"]],"^14",[["^ ","^R",12,"^S",406]],"^1E",[["^ ","^R",12,"^S",406,"^9","cljs.core/vec"]],"^1?",[["^ ","^R",26,"^S",406,"^9","v"]]],"~i279",["^ ","~i4",[["^ ","^R",0,"^S",407],["^ ","^R",12,"^S",407,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",201,"^S",407],["^ ","^R",207,"^S",407]],"^16",[["^ ","^R",55,"^S",407,"^9","v"]]],"~i280",["^ ","^16",[["^ ","^R",61,"^S",407]],"^X",[["^ ","^R",61,"^S",407,"^9","instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1"]],"^1F",[["^ ","^R",149,"^S",407,"^9","v"]]],"~i281",["^ ","^16",[["^ ","^R",156,"^S",407]],"^X",[["^ ","^R",156,"^S",407,"^9","cljs.core/hash"]],"^19",[["^ ","^R",171,"^S",407,"^9","v"]],"^1B",[["^ ","^R",178,"^S",407]],"^11",[["^ ","^R",178,"^S",407,"^9","cljs.core/count"]],"^12",[["^ ","^R",194,"^S",407,"^9","v"]]],"~i284",["^ ","~i0",[["^ ","^R",0,"^S",409]],"~i5",[["^ ","^R",0,"^S",409,"^9","instaparse.auto-flatten-seq/EMPTY"]],"^1E",[["^ ","^R",36,"^S",409],["^ ","^R",81,"^S",409]],"^W",[["^ ","^R",36,"^S",409,"^9","instaparse.auto-flatten-seq/auto-flatten-seq"]]],"~i286",["^ ","~i0",[["^ ","^R",0,"^S",410],["^ ","^R",41,"^S",410],["^ ","^R",0,"^S",411]],"~i6",[["^ ","^R",0,"^S",410,"^9","instaparse.auto-flatten-seq/afs?"]],"^W",[["^ ","^R",90,"^S",410,"^9","s"]]],"~i287",["^ ","~i2",[["^ ","^R",0,"^S",411]],"^T",[["^ ","^R",21,"^S",411,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]],"^Y",[["^ ","^R",8,"^S",411,"^9","s"]]],"~i289",["^ ","~i0",[["^ ","^R",0,"^S",413],["^ ","^R",41,"^S",413],["^ ","^R",0,"^S",414]],"~i6",[["^ ","^R",0,"^S",413,"^9","instaparse.auto-flatten-seq/true-count"]],"^1@",[["^ ","^R",90,"^S",413,"^9","v"]]],"~i290",["^ ","~i2",[["^ ","^R",0,"^S",414]],"~i6",[["^ ","^R",20,"^S",414]],"~i7",[["^ ","^R",20,"^S",414,"^9","instaparse.auto-flatten-seq/afs?"]],"^W",[["^ ","^R",59,"^S",414,"^9","v"]]],"~i291",["^ ","~i4",[["^ ","^R",0,"^S",415]],"~i5",[["^ ","^R",7,"^S",415,"^9","cljs.core/count"]],"^1E",[["^ ","^R",23,"^S",415]],"^[",[["^ ","^R",23,"^S",415,"^9","v"]]],"~i292",["^ ","~i4",[["^ ","^R",0,"^S",417]],"~i5",[["^ ","^R",7,"^S",417,"^9","cljs.core/count"]],"^1E",[["^ ","^R",23,"^S",417,"^9","v"]]],"~i296",["^ ","~i0",[["^ ","^R",0,"^S",420],["^ ","^R",46,"^S",420],["^ ","^R",0,"^S",422]],"~i6",[["^ ","^R",0,"^S",420,"^9","instaparse.auto-flatten-seq/flat-vec-helper"]],"^1K",[["^ ","^R",100,"^S",420,"^9","acc"]],"^19",[["^ ","^R",104,"^S",420,"^9","v"]]],"~i297",["^ ","~i2",[["^ ","^R",0,"^S",422],["^ ","^R",4,"^S",422,"^9","temp__5455__auto__"],["^ ","^R",0,"^S",423],["^ ","^R",0,"^S",423],["^ ","^R",3,"^S",423,"^9","temp__5455__auto__"],["^ ","^R",0,"^S",424],["^ ","^R",8,"^S",424,"^9","temp__5455__auto__"],["^ ","^R",0,"^S",425]],"^1E",[["^ ","^R",4,"^S",424,"^9","s"]],"^T",[["^ ","^R",25,"^S",422]],"^U",[["^ ","^R",25,"^S",422,"^9","cljs.core/seq"]],"^1@",[["^ ","^R",39,"^S",422,"^9","v"]]],"~i298",["^ ","~i4",[["^ ","^R",0,"^S",425],["^ ","^R",0,"^S",426]],"^14",[["^ ","^R",4,"^S",425,"^9","fst"]],"^U",[["^ ","^R",10,"^S",425]],"^1?",[["^ ","^R",10,"^S",425,"^9","cljs.core/first"]],"^16",[["^ ","^R",26,"^S",425,"^9","v"]]],"~i299",["^ ","~i6",[["^ ","^R",0,"^S",426]],"^14",[["^ ","^R",20,"^S",426]],"^1E",[["^ ","^R",20,"^S",426,"^9","instaparse.auto-flatten-seq/afs?"]],"^15",[["^ ","^R",59,"^S",426,"^9","fst"]]],"~i300",["^ ","~i8",[["^ ","^R",0,"^S",427]],"^1?",[["^ ","^R",15,"^S",427]],"^15",[["^ ","^R",16,"^S",427,"^9","instaparse.auto-flatten-seq/flat-vec-helper"],["^ ","^R",92,"^S",427,"^9","instaparse.auto-flatten-seq/flat-vec-helper"],["^ ","^R",177,"^S",427,"^9","instaparse.auto-flatten-seq/flat-vec-helper"]],"^[",[["^ ","^R",166,"^S",427,"^9","acc"],["^ ","^R",231,"^S",427,"^9","acc"]],"^1C",[["^ ","^R",170,"^S",427,"^9","fst"],["^ ","^R",235,"^S",427,"^9","fst"]],"~i41",[["^ ","^R",15,"^S",428]],"^22",[["^ ","^R",15,"^S",428,"^9","cljs.core/next"]],"^17",[["^ ","^R",30,"^S",428,"^9","v"]]],"~i301",["^ ","~i8",[["^ ","^R",0,"^S",433]],"^1?",[["^ ","^R",15,"^S",433]],"^15",[["^ ","^R",15,"^S",433,"^9","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^X",[["^ ","^R",66,"^S",433,"^9","acc"]],"^1G",[["^ ","^R",70,"^S",433,"^9","fst"]],"^11",[["^ ","^R",15,"^S",434]],"^[",[["^ ","^R",15,"^S",434,"^9","cljs.core/next"]],"^12",[["^ ","^R",30,"^S",434,"^9","v"]]],"~i302",["^ ","~i4",[["^ ","^R",0,"^S",440,"^9","acc"]]],"~i304",["^ ","~i0",[["^ ","^R",0,"^S",445],["^ ","^R",39,"^S",448],["^ ","^R",0,"^S",449]],"~i6",[["^ ","^R",0,"^S",448,"^9","instaparse.auto-flatten-seq/flat-vec"]]],"~i306",["^ ","~i3",[["^ ","^R",86,"^S",448,"^9","v"]]],"~i307",["^ ","~i2",[["^ ","^R",0,"^S",449]],"~i3",[["^ ","^R",7,"^S",449,"^9","cljs.core/persistent!"]],"^1?",[["^ ","^R",34,"^S",449]],"^15",[["^ ","^R",34,"^S",449,"^9","instaparse.auto-flatten-seq/flat-vec-helper"]],"^[",[["^ ","^R",78,"^S",449],["^ ","^R",99,"^S",449]],"^10",[["^ ","^R",78,"^S",449,"^9","cljs.core/transient"]],"^17",[["^ ","^R",133,"^S",449,"^9","v"]]],"~i309",["^ ","~i0",[["^ ","^R",0,"^S",451],["^ ","^R",0,"^S",451],["^ ","^R",0,"^S",452],["^ ","^R",37,"^S",455],["^ ","^R",0,"^S",457],["^ ","^R",38,"^S",457],["^ ","^R",0,"^S",458],["^ ","^R",0,"^S",458],["^ ","^R",3,"^S",458],["^ ","^R",4,"^S",458],["^ ","^R",6,"^S",458],["^ ","^R",15,"^S",458],["^ ","^R",27,"^S",458],["^ ","^R",29,"^S",458],["^ ","^R",30,"^S",458],["^ ","^R",89,"^S",458],["^ ","^R",0,"^S",459],["^ ","^R",0,"^S",461],["^ ","^R",4,"^S",461,"^9","x__5859__auto__"],["^ ","^R",22,"^S",461],["^ ","^R",24,"^S",461],["^ ","^R",33,"^S",461],["^ ","^R",40,"^S",461],["^ ","^R",4,"^S",462,"^9","m__5860__auto__"],["^ ","^R",22,"^S",462],["^ ","^R",23,"^S",462,"^9","instaparse/auto-flatten-seq.get-vec"],["^ ","^R",59,"^S",462],["^ ","^R",59,"^S",462,"^9","goog/typeOf"],["^ ","^R",71,"^S",462,"^9","x__5859__auto__"],["^ ","^R",0,"^S",463],["^ ","^R",0,"^S",463],["^ ","^R",3,"^S",463],["^ ","^R",5,"^S",463],["^ ","^R",6,"^S",463,"^9","m__5860__auto__"],["^ ","^R",25,"^S",463],["^ ","^R",0,"^S",464],["^ ","^R",8,"^S",464,"^9","m__5860__auto__"],["^ ","^R",56,"^S",464,"^9","m__5860__auto__"],["^ ","^R",110,"^S",464,"^9","m__5860__auto__"],["^ ","^R",0,"^S",466],["^ ","^R",4,"^S",466,"^9","m__5860__auto__"],["^ ","^R",26,"^S",466],["^ ","^R",27,"^S",466,"^9","instaparse/auto-flatten-seq.get-vec"],["^ ","^R",63,"^S",466],["^ ","^R",0,"^S",467],["^ ","^R",0,"^S",467],["^ ","^R",3,"^S",467],["^ ","^R",5,"^S",467],["^ ","^R",6,"^S",467,"^9","m__5860__auto__"],["^ ","^R",29,"^S",467],["^ ","^R",0,"^S",468],["^ ","^R",8,"^S",468,"^9","m__5860__auto__"],["^ ","^R",60,"^S",468,"^9","m__5860__auto__"],["^ ","^R",118,"^S",468,"^9","m__5860__auto__"],["^ ","^R",0,"^S",470],["^ ","^R",6,"^S",470],["^ ","^R",6,"^S",470,"^9","cljs.core/missing-protocol"],["^ ","^R",33,"^S",470],["^ ","^R",0,"^S",476]],"^T",[["^ ","^R",0,"^S",455,"^9","instaparse.auto-flatten-seq/GetVec"]]],"~i310",["^ ","^16",[["^ ","^R",0,"^S",457,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1B",[["^ ","^R",84,"^S",457,"^9","self"],["^ ","^R",7,"^S",458,"^9","self"],["^ ","^R",30,"^S",458,"^9","self"],["^ ","^R",7,"^S",459,"^9","self"],["^ ","^R",63,"^S",459,"^9","self"],["^ ","^R",25,"^S",461,"^9","self"],["^ ","^R",45,"^S",461,"^9","self"],["^ ","^R",102,"^S",464,"^9","self"],["^ ","^R",136,"^S",464,"^9","self"],["^ ","^R",110,"^S",468,"^9","self"],["^ ","^R",148,"^S",468,"^9","self"],["^ ","^R",50,"^S",470,"^9","self"]]],"~i421",["^ ","~i0",[["^ ","^R",0,"^S",476],["^ ","^R",0,"^S",476],["^ ","^R",0,"^S",507],["^ ","^R",0,"^S",507],["^ ","^R",0,"^S",507],["^ ","^R",0,"^S",507],["^ ","^R",71,"^S",507],["^ ","^R",0,"^S",509],["^ ","^R",0,"^S",509],["^ ","^R",11,"^S",509],["^ ","^R",0,"^S",510],["^ ","^R",0,"^S",513],["^ ","^R",0,"^S",513],["^ ","^R",0,"^S",513],["^ ","^R",96,"^S",513],["^ ","^R",0,"^S",515],["^ ","^R",0,"^S",515],["^ ","^R",15,"^S",515],["^ ","^R",0,"^S",516],["^ ","^R",0,"^S",519],["^ ","^R",0,"^S",519],["^ ","^R",0,"^S",519],["^ ","^R",96,"^S",519],["^ ","^R",0,"^S",521],["^ ","^R",0,"^S",521],["^ ","^R",15,"^S",521],["^ ","^R",0,"^S",522],["^ ","^R",0,"^S",525],["^ ","^R",0,"^S",525],["^ ","^R",0,"^S",525],["^ ","^R",98,"^S",525,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",527],["^ ","^R",0,"^S",527],["^ ","^R",0,"^S",527],["^ ","^R",113,"^S",527],["^ ","^R",0,"^S",529],["^ ","^R",0,"^S",529],["^ ","^R",15,"^S",529],["^ ","^R",0,"^S",530],["^ ","^R",0,"^S",545],["^ ","^R",7,"^S",545,"^9","cljs.core/deref"],["^ ","^R",0,"^S",548],["^ ","^R",0,"^S",548],["^ ","^R",0,"^S",548],["^ ","^R",101,"^S",548],["^ ","^R",0,"^S",550],["^ ","^R",0,"^S",550],["^ ","^R",15,"^S",550],["^ ","^R",0,"^S",551],["^ ","^R",0,"^S",554],["^ ","^R",0,"^S",554],["^ ","^R",0,"^S",554],["^ ","^R",94,"^S",554],["^ ","^R",0,"^S",556],["^ ","^R",0,"^S",556],["^ ","^R",15,"^S",556],["^ ","^R",0,"^S",557],["^ ","^R",0,"^S",560],["^ ","^R",0,"^S",560],["^ ","^R",0,"^S",560],["^ ","^R",94,"^S",560],["^ ","^R",0,"^S",562],["^ ","^R",0,"^S",562],["^ ","^R",15,"^S",562],["^ ","^R",0,"^S",563],["^ ","^R",0,"^S",566],["^ ","^R",0,"^S",566],["^ ","^R",0,"^S",566],["^ ","^R",97,"^S",566],["^ ","^R",0,"^S",568],["^ ","^R",0,"^S",568],["^ ","^R",15,"^S",568],["^ ","^R",0,"^S",569],["^ ","^R",0,"^S",572],["^ ","^R",0,"^S",572],["^ ","^R",0,"^S",572],["^ ","^R",92,"^S",572],["^ ","^R",0,"^S",574],["^ ","^R",0,"^S",574],["^ ","^R",15,"^S",574],["^ ","^R",0,"^S",575],["^ ","^R",0,"^S",582],["^ ","^R",0,"^S",582],["^ ","^R",0,"^S",582],["^ ","^R",96,"^S",582],["^ ","^R",0,"^S",584],["^ ","^R",0,"^S",584],["^ ","^R",15,"^S",584],["^ ","^R",0,"^S",585],["^ ","^R",0,"^S",588],["^ ","^R",0,"^S",588],["^ ","^R",0,"^S",588],["^ ","^R",93,"^S",588],["^ ","^R",0,"^S",590],["^ ","^R",0,"^S",590],["^ ","^R",15,"^S",590],["^ ","^R",0,"^S",591],["^ ","^R",0,"^S",594],["^ ","^R",0,"^S",594],["^ ","^R",0,"^S",594],["^ ","^R",92,"^S",594],["^ ","^R",0,"^S",596],["^ ","^R",0,"^S",596],["^ ","^R",15,"^S",596],["^ ","^R",0,"^S",597],["^ ","^R",0,"^S",600],["^ ","^R",0,"^S",600],["^ ","^R",0,"^S",600],["^ ","^R",98,"^S",600],["^ ","^R",0,"^S",602],["^ ","^R",0,"^S",602],["^ ","^R",15,"^S",602],["^ ","^R",0,"^S",603],["^ ","^R",0,"^S",610],["^ ","^R",0,"^S",610],["^ ","^R",0,"^S",610],["^ ","^R",92,"^S",610],["^ ","^R",0,"^S",612],["^ ","^R",0,"^S",612],["^ ","^R",15,"^S",612],["^ ","^R",0,"^S",613],["^ ","^R",0,"^S",616],["^ ","^R",0,"^S",616],["^ ","^R",0,"^S",616],["^ ","^R",94,"^S",616],["^ ","^R",0,"^S",618],["^ ","^R",0,"^S",618],["^ ","^R",15,"^S",618],["^ ","^R",0,"^S",619],["^ ","^R",0,"^S",622],["^ ","^R",0,"^S",622],["^ ","^R",0,"^S",622],["^ ","^R",108,"^S",622],["^ ","^R",0,"^S",624],["^ ","^R",0,"^S",624],["^ ","^R",15,"^S",624],["^ ","^R",0,"^S",625],["^ ","^R",0,"^S",628],["^ ","^R",0,"^S",628],["^ ","^R",0,"^S",628],["^ ","^R",100,"^S",628],["^ ","^R",0,"^S",630],["^ ","^R",0,"^S",630],["^ ","^R",15,"^S",630],["^ ","^R",0,"^S",631],["^ ","^R",0,"^S",634],["^ ","^R",0,"^S",634],["^ ","^R",0,"^S",634],["^ ","^R",114,"^S",634],["^ ","^R",0,"^S",636],["^ ","^R",0,"^S",636],["^ ","^R",15,"^S",636],["^ ","^R",0,"^S",637],["^ ","^R",0,"^S",640],["^ ","^R",0,"^S",640],["^ ","^R",0,"^S",640],["^ ","^R",94,"^S",640],["^ ","^R",0,"^S",642],["^ ","^R",0,"^S",642],["^ ","^R",15,"^S",642],["^ ","^R",0,"^S",643],["^ ","^R",0,"^S",646],["^ ","^R",0,"^S",646],["^ ","^R",0,"^S",646],["^ ","^R",101,"^S",646],["^ ","^R",0,"^S",648],["^ ","^R",0,"^S",648],["^ ","^R",15,"^S",648],["^ ","^R",0,"^S",649],["^ ","^R",0,"^S",656],["^ ","^R",0,"^S",656],["^ ","^R",0,"^S",656],["^ ","^R",98,"^S",656],["^ ","^R",0,"^S",658],["^ ","^R",0,"^S",658],["^ ","^R",15,"^S",658],["^ ","^R",0,"^S",659],["^ ","^R",0,"^S",662],["^ ","^R",0,"^S",662],["^ ","^R",0,"^S",662],["^ ","^R",67,"^S",662],["^ ","^R",29,"^S",664,"^9","self__"],["^ ","^R",0,"^S",666],["^ ","^R",0,"^S",666],["^ ","^R",4,"^S",666,"^9","self__"],["^ ","^R",17,"^S",666],["^ ","^R",0,"^S",667],["^ ","^R",0,"^S",667],["^ ","^R",11,"^S",667,"^9","self__"],["^ ","^R",0,"^S",668],["^ ","^R",29,"^S",670,"^9","self__"],["^ ","^R",0,"^S",672],["^ ","^R",0,"^S",672],["^ ","^R",4,"^S",672,"^9","self__"],["^ ","^R",17,"^S",672],["^ ","^R",0,"^S",673],["^ ","^R",0,"^S",673],["^ ","^R",11,"^S",673,"^9","self__"],["^ ","^R",0,"^S",674],["^ ","^R",20,"^S",676,"^9","self__"],["^ ","^R",29,"^S",679,"^9","self__"],["^ ","^R",29,"^S",681,"^9","self__"],["^ ","^R",0,"^S",691],["^ ","^R",0,"^S",691],["^ ","^R",0,"^S",691],["^ ","^R",68,"^S",691],["^ ","^R",79,"^S",691,"^9","self__"],["^ ","^R",86,"^S",691,"^9","args29227"],["^ ","^R",0,"^S",693],["^ ","^R",0,"^S",693],["^ ","^R",4,"^S",693,"^9","self__"],["^ ","^R",17,"^S",693],["^ ","^R",0,"^S",694],["^ ","^R",0,"^S",694],["^ ","^R",7,"^S",694],["^ ","^R",7,"^S",694,"^9","self__"],["^ ","^R",29,"^S",694,"^9","self__"],["^ ","^R",40,"^S",694],["^ ","^R",40,"^S",694],["^ ","^R",41,"^S",694,"^9","self__"],["^ ","^R",60,"^S",694],["^ ","^R",60,"^S",694,"^9","cljs.core/aclone"],["^ ","^R",77,"^S",694,"^9","args29227"],["^ ","^R",0,"^S",697],["^ ","^R",0,"^S",697],["^ ","^R",0,"^S",697],["^ ","^R",92,"^S",697],["^ ","^R",0,"^S",699],["^ ","^R",0,"^S",699],["^ ","^R",11,"^S",699],["^ ","^R",0,"^S",700],["^ ","^R",0,"^S",703],["^ ","^R",0,"^S",703],["^ ","^R",0,"^S",703],["^ ","^R",92,"^S",703],["^ ","^R",0,"^S",705],["^ ","^R",0,"^S",705],["^ ","^R",11,"^S",705],["^ ","^R",0,"^S",706],["^ ","^R",0,"^S",709],["^ ","^R",0,"^S",709],["^ ","^R",0,"^S",709],["^ ","^R",101,"^S",709],["^ ","^R",0,"^S",711],["^ ","^R",0,"^S",711],["^ ","^R",15,"^S",711],["^ ","^R",0,"^S",712],["^ ","^R",0,"^S",715],["^ ","^R",0,"^S",715],["^ ","^R",61,"^S",715],["^ ","^R",0,"^S",716],["^ ","^R",0,"^S",716],["^ ","^R",90,"^S",716],["^ ","^R",141,"^S",716],["^ ","^R",161,"^S",716],["^ ","^R",226,"^S",716],["^ ","^R",269,"^S",716],["^ ","^R",321,"^S",716],["^ ","^R",392,"^S",716],["^ ","^R",412,"^S",716],["^ ","^R",467,"^S",716],["^ ","^R",510,"^S",716],["^ ","^R",562,"^S",716],["^ ","^R",633,"^S",716],["^ ","^R",0,"^S",719],["^ ","^R",0,"^S",719],["^ ","^R",67,"^S",719],["^ ","^R",0,"^S",721],["^ ","^R",0,"^S",721],["^ ","^R",70,"^S",721],["^ ","^R",0,"^S",723],["^ ","^R",0,"^S",723],["^ ","^R",75,"^S",723],["^ ","^R",86,"^S",723,"^9","this__5797__auto__"],["^ ","^R",105,"^S",723,"^9","writer__5798__auto__"],["^ ","^R",126,"^S",723,"^9","opt__5799__auto__"],["^ ","^R",0,"^S",724],["^ ","^R",0,"^S",724],["^ ","^R",7,"^S",724,"^9","cljs.core/-write"],["^ ","^R",24,"^S",724,"^9","writer__5798__auto__"],["^ ","^R",45,"^S",724],["^ ","^R",0,"^S",727],["^ ","^R",57,"^S",727],["^ ","^R",0,"^S",728],["^ ","^R",0,"^S",728],["^ ","^R",12,"^S",728,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"~i9",[["^ ","^R",0,"^S",507,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",513,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",519,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",525,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",527,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",548,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",554,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",560,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",566,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",572,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",582,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",588,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",594,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",600,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",610,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",616,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",622,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",628,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",634,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",640,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",646,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",656,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",662,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",691,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",697,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",703,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",709,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",715,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",719,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",721,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",723,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",727,"^9","instaparse.auto-flatten-seq/->FlattenOnDemandVector"],["^ ","^R",0,"^S",731,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"^[",[["^ ","^R",122,"^S",727,"^9","v"],["^ ","^R",62,"^S",728,"^9","v"]]],"~i422",["^ ","^1<",[["^ ","^R",124,"^S",727,"^9","hashcode"],["^ ","^R",64,"^S",728,"^9","hashcode"]]],"~i423",["^ ","^1<",[["^ ","^R",133,"^S",727,"^9","cnt"],["^ ","^R",73,"^S",728,"^9","cnt"]]],"~i424",["^ ","^[",[["^ ","^R",137,"^S",727,"^9","flat"],["^ ","^R",77,"^S",728,"^9","flat"]]],"~i426",["^ ","^W",[["^ ","^R",124,"^S",527,"^9","self"],["^ ","^R",4,"^S",529,"^9","self"]]],"~i427",["^ ","~i4",[["^ ","^R",0,"^S",530],["^ ","^R",0,"^S",531],["^ ","^R",0,"^S",543]],"^14",[["^ ","^R",3,"^S",530],["^ ","^R",17,"^S",530],["^ ","^R",17,"^S",530,"^9","cljs.core/deref"]],"^1E",[["^ ","^R",3,"^S",530,"^9","cljs.core/not"]],"^15",[["^ ","^R",33,"^S",530,"^9","flat"]]],"~i428",["^ ","~i6",[["^ ","^R",0,"^S",531]],"~i7",[["^ ","^R",0,"^S",531,"^9","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",51,"^S",531,"^9","flat"]],"^1@",[["^ ","^R",63,"^S",531],["^ ","^R",0,"^S",533]],"^1K",[["^ ","^R",18,"^S",532,"^9","_"]],"^1G",[["^ ","^R",0,"^S",533]],"^19",[["^ ","^R",7,"^S",533,"^9","cljs.core/with-meta"]],"^12",[["^ ","^R",27,"^S",533],["^ ","^R",64,"^S",533],["^ ","^R",64,"^S",533,"^9","cljs.core/deref"]],"^1;",[["^ ","^R",27,"^S",533,"^9","instaparse.auto-flatten-seq/flat-vec"]],"^20",[["^ ","^R",80,"^S",533,"^9","v"]],"^1D",[["^ ","^R",91,"^S",533],["^ ","^R",106,"^S",533],["^ ","^R",106,"^S",533,"^9","cljs.core/deref"]],"^1F",[["^ ","^R",91,"^S",533,"^9","cljs.core/meta"]],"^1P",[["^ ","^R",122,"^S",533,"^9","v"]]],"~i429",["^ ","~i6",[["^ ","^R",0,"^S",537]],"~i7",[["^ ","^R",0,"^S",537,"^9","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",51,"^S",537,"^9","v"]],"^1?",[["^ ","^R",60,"^S",537],["^ ","^R",0,"^S",539],["^ ","^R",0,"^S",539]],"^1J",[["^ ","^R",18,"^S",538,"^9","_"]]],"~i430",["^ ","~i5",[["^ ","^R",23,"^S",545,"^9","flat"]]],"~i433",["^ ","^T",[["^ ","^R",4,"^S",509,"^9","self"]]],"~i434",["^ ","~i4",[["^ ","^R",0,"^S",510]],"~i5",[["^ ","^R",7,"^S",510,"^9","cljs.core/pr-str*"]],"^T",[["^ ","^R",30,"^S",510]],"^U",[["^ ","^R",30,"^S",510,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",66,"^S",510,"^9","self"]]],"~i436",["^ ","^14",[["^ ","^R",103,"^S",610,"^9","self"],["^ ","^R",4,"^S",612,"^9","self"]],"^15",[["^ ","^R",0,"^S",613,"^9","hashcode"]]],"~i438",["^ ","^1E",[["^ ","^R",105,"^S",616,"^9","self"],["^ ","^R",4,"^S",618,"^9","self"]],"^15",[["^ ","^R",110,"^S",616,"^9","other"]]],"~i440",["^ ","~i5",[["^ ","^R",0,"^S",619]],"^14",[["^ ","^R",8,"^S",619]],"^1E",[["^ ","^R",8,"^S",619,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",53,"^S",619,"^9","hashcode"]],"^X",[["^ ","^R",69,"^S",619]],"^1K",[["^ ","^R",69,"^S",619,"^9","cljs.core/hash"]],"^Y",[["^ ","^R",84,"^S",619,"^9","other"]]],"~i441",["^ ","^14",[["^ ","^R",97,"^S",619]],"^1E",[["^ ","^R",97,"^S",619,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",142,"^S",619,"^9","cnt"]],"^Z",[["^ ","^R",153,"^S",619]],"^1@",[["^ ","^R",153,"^S",619,"^9","cljs.core/count"]],"^1A",[["^ ","^R",169,"^S",619,"^9","other"]]],"~i442",["^ ","^14",[["^ ","^R",182,"^S",619]],"^1E",[["^ ","^R",182,"^S",619,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",227,"^S",619]],"^U",[["^ ","^R",227,"^S",619,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",263,"^S",619,"^9","self"]],"^Y",[["^ ","^R",273,"^S",619,"^9","other"]]],"~i444",["^ ","^1E",[["^ ","^R",119,"^S",622,"^9","self"],["^ ","^R",4,"^S",624,"^9","self"]],"^Z",[["^ ","^R",0,"^S",625],["^ ","^R",27,"^S",625]],"^1@",[["^ ","^R",7,"^S",625,"^9","cljs.core/with-meta"]],"^11",[["^ ","^R",60,"^S",625]],"^[",[["^ ","^R",60,"^S",625,"^9","cljs.core/meta"]],"^12",[["^ ","^R",75,"^S",625,"^9","self"]]],"~i446",["^ ","^1E",[["^ ","^R",107,"^S",582,"^9","self"],["^ ","^R",4,"^S",584,"^9","self"]],"^Z",[["^ ","^R",0,"^S",585,"^9","cnt"]]],"~i448",["^ ","^T",[["^ ","^R",108,"^S",566,"^9","self"],["^ ","^R",4,"^S",568,"^9","self"]],"^1@",[["^ ","^R",113,"^S",566,"^9","i"]],"^1J",[["^ ","^R",115,"^S",566,"^9","val"]]],"~i449",["^ ","~i4",[["^ ","^R",0,"^S",569]],"~i5",[["^ ","^R",7,"^S",569,"^9","cljs.core/-assoc-n"]],"^U",[["^ ","^R",26,"^S",569]],"^1?",[["^ ","^R",26,"^S",569,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1K",[["^ ","^R",62,"^S",569,"^9","self"]],"^1:",[["^ ","^R",72,"^S",569,"^9","i"]],"^11",[["^ ","^R",74,"^S",569,"^9","val"]]],"~i451",["^ ","^14",[["^ ","^R",109,"^S",656,"^9","self"],["^ ","^R",4,"^S",658,"^9","self"]],"^1?",[["^ ","^R",114,"^S",656,"^9","obj"]]],"~i452",["^ ","~i4",[["^ ","^R",0,"^S",659]],"~i5",[["^ ","^R",7,"^S",659,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^14",[["^ ","^R",52,"^S",659]],"^1E",[["^ ","^R",52,"^S",659,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",88,"^S",659,"^9","self"]],"^1[",[["^ ","^R",98,"^S",659,"^9","obj"]]],"~i454",["^ ","^1?",[["^ ","^R",112,"^S",646,"^9","self"],["^ ","^R",4,"^S",648,"^9","self"]],"^1J",[["^ ","^R",117,"^S",646,"^9","metamap"]]],"~i455",["^ ","~i4",[["^ ","^R",0,"^S",649],["^ ","^R",20,"^S",649],["^ ","^R",20,"^S",649,"^9","cljs.core/deref"]],"~i9",[["^ ","^R",36,"^S",649,"^9","flat"]]],"~i456",["^ ","~i6",[["^ ","^R",0,"^S",650],["^ ","^R",12,"^S",650,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"^1B",[["^ ","^R",62,"^S",650],["^ ","^R",107,"^S",650],["^ ","^R",107,"^S",650,"^9","cljs.core/deref"]],"^11",[["^ ","^R",62,"^S",650,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^12",[["^ ","^R",123,"^S",650,"^9","v"]],"^1<",[["^ ","^R",134,"^S",650,"^9","hashcode"]],"^18",[["^ ","^R",150,"^S",650,"^9","cnt"]],"^1I",[["^ ","^R",161,"^S",650]],"^1L",[["^ ","^R",161,"^S",650,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^1Q",[["^ ","^R",206,"^S",650],["^ ","^R",226,"^S",650],["^ ","^R",226,"^S",650,"^9","cljs.core/deref"]],"^1R",[["^ ","^R",206,"^S",650,"^9","cljs.core/with-meta"]],"~i71",[["^ ","^R",242,"^S",650,"^9","flat"]],"^25",[["^ ","^R",255,"^S",650,"^9","metamap"]]],"~i457",["^ ","~i6",[["^ ","^R",0,"^S",652],["^ ","^R",12,"^S",652,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"^1B",[["^ ","^R",62,"^S",652]],"^11",[["^ ","^R",62,"^S",652,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^1C",[["^ ","^R",107,"^S",652],["^ ","^R",127,"^S",652],["^ ","^R",127,"^S",652,"^9","cljs.core/deref"]],"^12",[["^ ","^R",107,"^S",652,"^9","cljs.core/with-meta"]],"^20",[["^ ","^R",143,"^S",652,"^9","v"]],"^1>",[["^ ","^R",153,"^S",652,"^9","metamap"]],"^1R",[["^ ","^R",163,"^S",652,"^9","hashcode"]],"^1Z",[["^ ","^R",179,"^S",652,"^9","cnt"]],"^23",[["^ ","^R",190,"^S",652],["^ ","^R",235,"^S",652],["^ ","^R",235,"^S",652,"^9","cljs.core/deref"]],"~i74",[["^ ","^R",190,"^S",652,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^28",[["^ ","^R",251,"^S",652,"^9","flat"]]],"~i459",["^ ","^14",[["^ ","^R",103,"^S",572,"^9","self"],["^ ","^R",4,"^S",574,"^9","self"]]],"~i460",["^ ","~i4",[["^ ","^R",0,"^S",575],["^ ","^R",20,"^S",575],["^ ","^R",20,"^S",575,"^9","cljs.core/deref"]],"~i9",[["^ ","^R",36,"^S",575,"^9","flat"]],"^U",[["^ ","^R",0,"^S",576],["^ ","^R",22,"^S",576],["^ ","^R",22,"^S",576,"^9","cljs.core/deref"]],"^1?",[["^ ","^R",7,"^S",576,"^9","cljs.core/meta"]],"^16",[["^ ","^R",38,"^S",576,"^9","flat"]],"^19",[["^ ","^R",0,"^S",578],["^ ","^R",22,"^S",578],["^ ","^R",22,"^S",578,"^9","cljs.core/deref"]],"^Y",[["^ ","^R",7,"^S",578,"^9","cljs.core/meta"]],"^1H",[["^ ","^R",38,"^S",578,"^9","v"]]],"~i463",["^ ","~i9",[["^ ","^R",105,"^S",640,"^9","self"],["^ ","^R",4,"^S",642,"^9","self"]]],"~i464",["^ ","~i4",[["^ ","^R",0,"^S",643]],"~i5",[["^ ","^R",7,"^S",643,"^9","cljs.core/seq"]],"~i9",[["^ ","^R",21,"^S",643]],"^14",[["^ ","^R",21,"^S",643,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1@",[["^ ","^R",57,"^S",643,"^9","self"]]],"~i466",["^ ","^W",[["^ ","^R",107,"^S",513,"^9","self"],["^ ","^R",4,"^S",515,"^9","self"]],"^Z",[["^ ","^R",112,"^S",513,"^9","key"]]],"~i467",["^ ","~i4",[["^ ","^R",0,"^S",516]],"~i5",[["^ ","^R",7,"^S",516,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",55,"^S",516]],"^U",[["^ ","^R",55,"^S",516,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",516,"^9","self"]],"^Y",[["^ ","^R",101,"^S",516,"^9","key"]]],"~i468",["^ ","^W",[["^ ","^R",107,"^S",519,"^9","self"],["^ ","^R",4,"^S",521,"^9","self"]],"^Z",[["^ ","^R",112,"^S",519,"^9","key"]],"^16",[["^ ","^R",116,"^S",519,"^9","not-found"]]],"~i469",["^ ","~i4",[["^ ","^R",0,"^S",522]],"~i5",[["^ ","^R",7,"^S",522,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3"]],"^T",[["^ ","^R",55,"^S",522]],"^U",[["^ ","^R",55,"^S",522,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",522,"^9","self"]],"^Y",[["^ ","^R",101,"^S",522,"^9","key"]],"^[",[["^ ","^R",105,"^S",522,"^9","not-found"]]],"~i471",["^ ","~i9",[["^ ","^R",105,"^S",554,"^9","self"],["^ ","^R",4,"^S",556,"^9","self"]],"^U",[["^ ","^R",110,"^S",554,"^9","i"]]],"~i472",["^ ","~i4",[["^ ","^R",0,"^S",557]],"~i5",[["^ ","^R",7,"^S",557,"^9","cljs.core._nth.cljs$core$IFn$_invoke$arity$2"]],"^14",[["^ ","^R",52,"^S",557]],"^1E",[["^ ","^R",52,"^S",557,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",88,"^S",557,"^9","self"]],"^1[",[["^ ","^R",98,"^S",557,"^9","i"]]],"~i473",["^ ","~i9",[["^ ","^R",105,"^S",560,"^9","self"],["^ ","^R",4,"^S",562,"^9","self"]],"^U",[["^ ","^R",110,"^S",560,"^9","i"]],"^15",[["^ ","^R",112,"^S",560,"^9","not-found"]]],"~i474",["^ ","~i4",[["^ ","^R",0,"^S",563]],"~i5",[["^ ","^R",7,"^S",563,"^9","cljs.core._nth.cljs$core$IFn$_invoke$arity$3"]],"^14",[["^ ","^R",52,"^S",563]],"^1E",[["^ ","^R",52,"^S",563,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",88,"^S",563,"^9","self"]],"^1[",[["^ ","^R",98,"^S",563,"^9","i"]],"^19",[["^ ","^R",100,"^S",563,"^9","not-found"]]],"~i476",["^ ","^W",[["^ ","^R",4,"^S",667,"^9","self"],["^ ","^R",4,"^S",699,"^9","self"]],"^Z",[["^ ","^R",36,"^S",664,"^9","arg"],["^ ","^R",103,"^S",697,"^9","arg"]]],"~i477",["^ ","~i4",[["^ ","^R",0,"^S",668],["^ ","^R",0,"^S",700]],"~i5",[["^ ","^R",7,"^S",668,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$2"],["^ ","^R",7,"^S",700,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",55,"^S",668],["^ ","^R",55,"^S",700]],"^U",[["^ ","^R",55,"^S",668,"^9","instaparse.auto-flatten-seq/get-vec"],["^ ","^R",55,"^S",700,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",668,"^9","self"],["^ ","^R",91,"^S",700,"^9","self"]],"^Y",[["^ ","^R",97,"^S",668,"^9","arg"],["^ ","^R",97,"^S",700,"^9","arg"]]],"~i478",["^ ","^W",[["^ ","^R",4,"^S",673,"^9","self"],["^ ","^R",4,"^S",705,"^9","self"]],"^Z",[["^ ","^R",36,"^S",670,"^9","arg"],["^ ","^R",27,"^S",676,"^9","arg"],["^ ","^R",36,"^S",679,"^9","arg"],["^ ","^R",36,"^S",681,"^9","arg"],["^ ","^R",103,"^S",703,"^9","arg"]],"^16",[["^ ","^R",40,"^S",670,"^9","not-found"],["^ ","^R",31,"^S",676,"^9","not-found"],["^ ","^R",40,"^S",681,"^9","not-found"],["^ ","^R",107,"^S",703,"^9","not-found"]]],"~i479",["^ ","~i4",[["^ ","^R",0,"^S",674],["^ ","^R",0,"^S",706]],"~i5",[["^ ","^R",7,"^S",674,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$3"],["^ ","^R",7,"^S",706,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$3"]],"^T",[["^ ","^R",55,"^S",674],["^ ","^R",55,"^S",706]],"^U",[["^ ","^R",55,"^S",674,"^9","instaparse.auto-flatten-seq/get-vec"],["^ ","^R",55,"^S",706,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",674,"^9","self"],["^ ","^R",91,"^S",706,"^9","self"]],"^Y",[["^ ","^R",97,"^S",674,"^9","arg"],["^ ","^R",97,"^S",706,"^9","arg"]],"^[",[["^ ","^R",101,"^S",674,"^9","not-found"],["^ ","^R",101,"^S",706,"^9","not-found"]]],"~i481",["^ ","^14",[["^ ","^R",109,"^S",600,"^9","self"],["^ ","^R",4,"^S",602,"^9","self"]]],"~i482",["^ ","~i4",[["^ ","^R",0,"^S",603],["^ ","^R",0,"^S",606]],"~i8",[["^ ","^R",3,"^S",603],["^ ","^R",17,"^S",603]],"^U",[["^ ","^R",4,"^S",603,"^9","cnt"]]],"~i483",["^ ","~i6",[["^ ","^R",0,"^S",604]],"~i7",[["^ ","^R",7,"^S",604,"^9","cljs.core/rseq"]],"^W",[["^ ","^R",22,"^S",604]],"^T",[["^ ","^R",22,"^S",604,"^9","instaparse.auto-flatten-seq/get-vec"]],"^16",[["^ ","^R",58,"^S",604,"^9","self"]]],"~i486",["^ ","^14",[["^ ","^R",104,"^S",588,"^9","self"],["^ ","^R",4,"^S",590,"^9","self"]]],"~i487",["^ ","~i4",[["^ ","^R",0,"^S",591]],"~i5",[["^ ","^R",7,"^S",591,"^9","cljs.core/-peek"]],"^1E",[["^ ","^R",23,"^S",591]],"^W",[["^ ","^R",23,"^S",591,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1J",[["^ ","^R",59,"^S",591,"^9","self"]]],"~i488",["^ ","~i9",[["^ ","^R",103,"^S",594,"^9","self"],["^ ","^R",4,"^S",596,"^9","self"]]],"~i489",["^ ","~i4",[["^ ","^R",0,"^S",597]],"~i5",[["^ ","^R",7,"^S",597,"^9","cljs.core/-pop"]],"^14",[["^ ","^R",22,"^S",597]],"^1E",[["^ ","^R",22,"^S",597,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",58,"^S",597,"^9","self"]]],"~i491",["^ ","^1E",[["^ ","^R",111,"^S",628,"^9","self"],["^ ","^R",4,"^S",630,"^9","self"]],"^15",[["^ ","^R",116,"^S",628,"^9","i"]],"^1@",[["^ ","^R",118,"^S",628,"^9","val"]]],"~i492",["^ ","~i4",[["^ ","^R",0,"^S",631]],"~i5",[["^ ","^R",7,"^S",631,"^9","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1E",[["^ ","^R",53,"^S",631]],"^W",[["^ ","^R",53,"^S",631,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1J",[["^ ","^R",89,"^S",631,"^9","self"]],"^1G",[["^ ","^R",99,"^S",631,"^9","i"]],"^Y",[["^ ","^R",101,"^S",631,"^9","val"]]],"~i493",["^ ","^V",[["^ ","^R",125,"^S",634,"^9","self"],["^ ","^R",4,"^S",636,"^9","self"]],"^1A",[["^ ","^R",130,"^S",634,"^9","k"]]],"~i494",["^ ","~i4",[["^ ","^R",0,"^S",637]],"~i5",[["^ ","^R",7,"^S",637,"^9","cljs.core/-contains-key?"]],"^1J",[["^ ","^R",38,"^S",637]],"^16",[["^ ","^R",38,"^S",637,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1:",[["^ ","^R",74,"^S",637,"^9","self"]],"^2;",[["^ ","^R",84,"^S",637,"^9","k"]]],"~i496",["^ ","^1?",[["^ ","^R",112,"^S",548,"^9","self"],["^ ","^R",4,"^S",550,"^9","self"]],"^1J",[["^ ","^R",117,"^S",548,"^9","f"]],"^X",[["^ ","^R",119,"^S",548,"^9","init"]]],"~i497",["^ ","~i4",[["^ ","^R",0,"^S",551]],"~i5",[["^ ","^R",7,"^S",551,"^9","cljs.core/-kv-reduce"]],"^15",[["^ ","^R",28,"^S",551]],"^Z",[["^ ","^R",28,"^S",551,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1[",[["^ ","^R",64,"^S",551,"^9","self"]],"^11",[["^ ","^R",74,"^S",551,"^9","f"]],"^10",[["^ ","^R",76,"^S",551,"^9","init"]]],"~i499",["^ ","^T",[["^ ","^R",112,"^S",709,"^9","self"],["^ ","^R",4,"^S",711,"^9","self"]],"^1@",[["^ ","^R",117,"^S",709,"^9","that"]]],"~i500",["^ ","~i4",[["^ ","^R",0,"^S",712]],"~i5",[["^ ","^R",7,"^S",712,"^9","cljs.core/-compare"]],"^U",[["^ ","^R",26,"^S",712]],"^1?",[["^ ","^R",26,"^S",712,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1K",[["^ ","^R",62,"^S",712,"^9","self"]],"^1:",[["^ ","^R",72,"^S",712,"^9","that"]]],"~i504",["^ ","~i3",[["^ ","^R",0,"^S",731],["^ ","^R",0,"^S",731],["^ ","^R",0,"^S",731],["^ ","^R",0,"^S",731],["^ ","^R",0,"^S",731],["^ ","^R",90,"^S",731,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",733],["^ ","^R",0,"^S",733],["^ ","^R",0,"^S",733]]],"~i505",["^ ","~i5",[["^ ","^R",0,"^S",731,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",733,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]]],"~i506",["^ ","~i5",[["^ ","^R",108,"^S",733],["^ ","^R",0,"^S",734],["^ ","^R",0,"^S",734],["^ ","^R",12,"^S",734],["^ ","^R",0,"^S",735]],"^1@",[["^ ","^R",119,"^S",733,"^9","v"],["^ ","^R",4,"^S",734,"^9","v"]],"^1J",[["^ ","^R",121,"^S",733,"^9","writer"]],"^19",[["^ ","^R",128,"^S",733,"^9","opts"]]],"~i507",["^ ","~i7",[["^ ","^R",0,"^S",735]],"~i8",[["^ ","^R",7,"^S",735,"^9","cljs.core/-pr-writer"]],"^V",[["^ ","^R",28,"^S",735]],"^1J",[["^ ","^R",28,"^S",735,"^9","instaparse.auto-flatten-seq/get-vec"]],"^Y",[["^ ","^R",64,"^S",735,"^9","v"]],"^11",[["^ ","^R",71,"^S",735,"^9","writer"]],"^1;",[["^ ","^R",78,"^S",735,"^9","opts"]]],"~i509",["^ ","~i0",[["^ ","^R",0,"^S",737],["^ ","^R",49,"^S",737],["^ ","^R",0,"^S",738]],"~i6",[["^ ","^R",0,"^S",737,"^9","instaparse.auto-flatten-seq/convert-afs-to-vec"]],"^22",[["^ ","^R",106,"^S",737,"^9","afs"]]],"~i510",["^ ","~i2",[["^ ","^R",0,"^S",738],["^ ","^R",0,"^S",745]]],"~i511",["^ ","~i4",[["^ ","^R",20,"^S",738]],"^T",[["^ ","^R",20,"^S",738,"^9","afs"]]],"~i512",["^ ","~i4",[["^ ","^R",0,"^S",739]],"~i8",[["^ ","^R",20,"^S",739]],"~i9",[["^ ","^R",20,"^S",739,"^9","instaparse.auto-flatten-seq/cached?"]],"^Z",[["^ ","^R",62,"^S",739,"^9","afs"]]],"~i513",["^ ","~i6",[["^ ","^R",0,"^S",740]],"~i7",[["^ ","^R",7,"^S",740,"^9","cljs.core/vec"]],"^1E",[["^ ","^R",21,"^S",740]],"^W",[["^ ","^R",21,"^S",740,"^9","cljs.core/seq"]],"^15",[["^ ","^R",35,"^S",740,"^9","afs"]]],"~i521",["^ ","~i9",[["^ ","^R",0,"^S",742],["^ ","^R",12,"^S",742,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]]],"~i522",["^ ","^14",[["^ ","^R",62,"^S",742]],"^1E",[["^ ","^R",62,"^S",742,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^15",[["^ ","^R",107,"^S",742]],"^16",[["^ ","^R",107,"^S",742,"^9","afs"]]],"~i523",["^ ","^14",[["^ ","^R",114,"^S",742]],"^X",[["^ ","^R",114,"^S",742,"^9","afs"]]],"~i524",["^ ","^14",[["^ ","^R",127,"^S",742]],"^Z",[["^ ","^R",127,"^S",742,"^9","afs"]]],"~i525",["^ ","^14",[["^ ","^R",135,"^S",742],["^ ","^R",180,"^S",742]],"^1E",[["^ ","^R",135,"^S",742,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i527",["^ ","~i4",[["^ ","^R",0,"^S",745]],"~i9",[["^ ","^R",7,"^S",745,"^9","afs"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["^J","instaparse/auto_flatten_seq.cljc"],1516731432000,["~:macro","^?"],1516731430000,["^J","goog/math/math.js"],1516731431000,["^J","goog/array/array.js"],1516731431000,["^J","goog/debug/error.js"],1516731431000,["^J","goog/dom/nodetype.js"],1516731431000,["^J","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^J","goog/math/long.js"],1516731431000,["^J","goog/functions/functions.js"],1516731431000,["^J","goog/structs/map.js"],1516731431000,["^J","goog/asserts/asserts.js"],1516731431000,["^J","goog/uri/uri.js"],1516731431000,["^J","goog/base.js"],1516731431000,["^J","goog/structs/structs.js"],1516731431000,["^J","goog/string/string.js"],1516731431000,["^J","goog/reflect/reflect.js"],1516731431000,["^J","goog/string/stringbuffer.js"],1516731431000,["^J","goog/iter/iter.js"],1516731431000,["^J","cljs/core.cljs"],1516731430000,["^J","goog/math/integer.js"],1516731431000,["^J","goog/uri/utils.js"],1516731431000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ "],"^6",null,"^7",["^8",["~$EMPTY"]],"~:shadow/js-access-properties",["^8",["toString"]],"^9","^:","^=",null,"^>",["^ ","^?","^?","^@","^@"],"^A",["^8",[]],"~:shadow/js-access-global",["^8",["Error"]],"^B",null,"~:defs",["^ ","~$FlattenOnDemandVector",["^ ","^9","~$instaparse.auto-flatten-seq/FlattenOnDemandVector","~:type",true,"~:tag","^6E","~:num-fields",4,"~:record",false,"~:file","instaparse/auto_flatten_seq.cljc","~:line",422,"~:column",10],"~$AutoFlattenSeq",["^ ","^9","~$instaparse.auto-flatten-seq/AutoFlattenSeq","^6F",true,"^6G","^6N","^6H",6,"^6I",false,"^6J","instaparse/auto_flatten_seq.cljc","^6K",167,"^6L",10],"~$GetVec",["^ ","^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",310,"^6L",14,"~:end-line",310,"~:end-column",20,"~:doc",null,"~:protocol-symbol",true,"~:jsdoc",["^E",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$get-vec",[["~$self"]]]]],"^6S",true,"^9","~$instaparse.auto-flatten-seq/GetVec","^6J","instaparse/auto_flatten_seq.cljc","^6Q",20,"^6L",1,"^6K",310,"^6U",["^ ","^6V",["^ ","^6W",[["^6X"]]]],"~:info",null,"^6P",310,"^6G","~$any","~:impls",["^8",["^6E"]],"^6R",null,"^6T",["^E",["@interface"]]],"~$delve",["^ ","~:protocol-inline",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",57,"^6L",7,"^6P",57,"^6Q",12,"~:arglists",["^E",["~$quote",["^E",[["~$v","~$index"]]]]]],"^9","~$instaparse.auto-flatten-seq/delve","~:variadic",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",12,"~:method-params",["^E",[["~$v","^75"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^6L",1,"^6K",57,"^6P",57,"~:max-fixed-arity",2,"~:fn-var",true,"^73",["^E",["^74",["^E",[["~$v","^75"]]]]]],"~$flat-seq",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",76,"^6L",7,"^6P",76,"^6Q",15,"^73",["^E",["^74",["^E",[["~$v"],["~$v","^75"]]]]],"~:top-fn",["^ ","^77",false,"^7;",2,"^78",["^E",[["~$v"],["~$v","^75"]]],"^73",["^E",[["~$v"],["~$v","^75"]]],"^7:",["^E",[null,null]]]],"^9","~$instaparse.auto-flatten-seq/flat-seq","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",15,"^7>",["^ ","^77",false,"^7;",2,"^78",["^E",[["~$v"],["~$v","^75"]]],"^73",["^E",[["~$v"],["~$v","^75"]]],"^7:",["^E",[null,null]]],"^78",["^E",[["~$v"],["~$v","^75"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",76,"^6P",76,"^7;",2,"^7<",true,"^73",["^E",[["~$v"],["~$v","^75"]]]],"~$advance",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",64,"^6L",7,"^6P",64,"^6Q",14,"^73",["^E",["^74",["^E",[["~$v","^75"]]]]]],"^9","~$instaparse.auto-flatten-seq/advance","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",14,"^78",["^E",[["~$v","^75"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",64,"^6P",64,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["~$v","^75"]]]]]],"~$expt",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",47,"^6L",11,"^6P",47,"^6Q",15,"~:private",true,"^73",["^E",["^74",["^E",[["~$base","~$pow"]]]]]],"^7C",true,"^9","~$instaparse.auto-flatten-seq/expt","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",15,"^78",["^E",[["^7D","^7E"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",47,"^6P",47,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^7D","^7E"]]]]]],"~$flat-vec",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",305,"^6L",7,"^6P",305,"^6Q",15,"^73",["^E",["^74",["^E",[["~$v"]]]]],"^6R","Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec"],"^9","~$instaparse.auto-flatten-seq/flat-vec","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",15,"^78",["^E",[["~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",305,"^6P",305,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$v"]]]]],"^6R","Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec"],"~$flat-vec-helper",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",297,"^6L",7,"^6P",297,"^6Q",22,"^73",["^E",["^74",["^E",[["~$acc","~$v"]]]]]],"^9","~$instaparse.auto-flatten-seq/flat-vec-helper","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",22,"^78",["^E",[["^7J","~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",297,"^6P",297,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^7J","~$v"]]]]]],"~$hash-conj",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",29,"^6L",18,"^6P",29,"^6Q",27,"^6G","~$number","^73",["^E",["^74",["^E",[["~$unmixed-hash","~$item"]]]]],"^6R","Returns the hash code, consistent with =, for an external ordered\n  collection implementing Iterable.\n  See http://clojure.org/data_structures#hash for full algorithms."],"^9","~$instaparse.auto-flatten-seq/hash-conj","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",27,"^78",["^E",[["^7N","^7O"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",29,"~:ret-tag","^7M","^6P",29,"^7;",2,"^6G","^7M","^7<",true,"^73",["^E",["^74",["^E",[["^7N","^7O"]]]]],"^6R","Returns the hash code, consistent with =, for an external ordered\n  collection implementing Iterable.\n  See http://clojure.org/data_structures#hash for full algorithms."],"~$hash-ordered-coll-without-mix",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",260,"^6L",18,"^6P",260,"^6Q",47,"^6G","^7M","^73",["^E",["^74",["^E",[["~$coll"],["~$existing-unmixed-hash","^7S"]]]]],"^6R","Returns the partially calculated hash code, still requires a call to mix-collection-hash","^7>",["^ ","^77",false,"^7;",2,"^78",["^E",[["^7S"],["^7T","^7S"]]],"^73",["^E",[["^7S"],["^7T","^7S"]]],"^7:",["^E",[null,null]]]],"^9","~$instaparse.auto-flatten-seq/hash-ordered-coll-without-mix","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",47,"^7>",["^ ","^77",false,"^7;",2,"^78",["^E",[["^7S"],["^7T","^7S"]]],"^73",["^E",[["^7S"],["^7T","^7S"]]],"^7:",["^E",[null,null]]],"^78",["^E",[["^7S"],["^7T","^7S"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",260,"^7Q","^7M","^6P",260,"^7;",2,"^6G","^7M","^7<",true,"^73",["^E",[["^7S"],["^7T","^7S"]]],"^6R","Returns the partially calculated hash code, still requires a call to mix-collection-hash"],"~$true-count",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",290,"^6L",7,"^6P",290,"^6Q",17,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"^9","~$instaparse.auto-flatten-seq/true-count","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",17,"^78",["^E",[["~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",290,"^6P",290,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"~$convert-afs-to-vec",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",510,"^6L",7,"^6P",510,"^6Q",25,"^73",["^E",["^74",["^E",[["~$afs"]]]]]],"^9","~$instaparse.auto-flatten-seq/convert-afs-to-vec","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",25,"^78",["^E",[["^7Y"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",510,"^6P",510,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["^7Y"]]]]]],"~$hash-cat",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",240,"^6L",11,"^6P",240,"^6Q",19,"^7C",true,"^73",["^E",["^74",["^E",[["~$v1","~$v2"]]]]]],"^7C",true,"^9","~$instaparse.auto-flatten-seq/hash-cat","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",19,"^78",["^E",[["^80","^81"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",240,"^6P",240,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^80","^81"]]]]]],"~$auto-flatten-seq",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",278,"^6L",7,"^6P",278,"^6Q",23,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"^9","~$instaparse.auto-flatten-seq/auto-flatten-seq","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",23,"^78",["^E",[["~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",278,"^6P",278,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"~$afs?",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",287,"^6L",7,"^6P",287,"^6Q",11,"^73",["^E",["^74",["^E",[["~$s"]]]]]],"^9","~$instaparse.auto-flatten-seq/afs?","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",11,"^78",["^E",[["~$s"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",287,"^6P",287,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$s"]]]]]],"~$threshold",["^ ","^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",5,"^6L",14,"^6P",5,"^6Q",23,"~:const",true],"^9","~$instaparse.auto-flatten-seq/threshold","^6J","instaparse/auto_flatten_seq.cljc","^6Q",23,"~:const-expr",["^ ","^;","~:constant","~:env",["^ ","~:context","~:expr"],"^D",32,"^6G","^7M"],"^6L",1,"^88",true,"^6K",5,"^6P",5,"^6G","^7M"],"~$->FlattenOnDemandVector",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",422,"^6L",10,"^6P",422,"^6Q",31,"~:protocols",["^8",["~$cljs.core/IIndexed","~$cljs.core/IVector","~$cljs.core/IReversible","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/IEmptyableCollection","~$cljs.core/ICounted","^6Y","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/IStack","~$cljs.core/IComparable","~$cljs.core/ISequential","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/ILookup"]],"~:skip-protocol-flag",["^8",["^8A","^8B","^8C","^8D","^8E","^8F","^8G","^8H","^8J","^8K","^8L","^8M","^8N","^8O","^8P","^8Q","^8R","^8S"]],"~:factory","~:positional","^73",["^E",["^74",["^E",[["~$v","~$hashcode","~$cnt","~$flat"]]]]]],"^8@",["^8",["^8A","^8B","^8C","^8D","^8E","^8F","^8G","^8H","^8I","^8J","^8K","^6Y","^8L","^8M","^8N","^8O","^8P","^8Q","^8R","^8S"]],"^9","~$instaparse.auto-flatten-seq/->FlattenOnDemandVector","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",31,"^78",["^E",[["~$v","^8W","^8X","^8Y"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^8U","^8V","^6K",422,"^6P",422,"^7;",4,"^7<",true,"^73",["^E",["^74",["^E",[["~$v","^8W","^8X","^8Y"]]]]],"^8T",["^8",["^8A","^8B","^8C","^8D","^8E","^8F","^8G","^8H","^8J","^8K","^8L","^8M","^8N","^8O","^8P","^8Q","^8R","^8S"]]],"~$conj-flat",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",8,"^6L",4,"^6P",8,"^6Q",13,"~:protocol","~$instaparse.auto-flatten-seq/ConjFlat","^6R",null,"^73",["^E",["^74",["^E",[["^6X","~$obj"]]]]]],"^90","^91","^9","~$instaparse.auto-flatten-seq/conj-flat","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",13,"^78",["^E",[["^6X","^92"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",7,"^6P",8,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^6X","^92"]]]]],"^6R",null],"^6W",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",311,"^6L",22,"^6P",311,"^6Q",29,"^6G","~$PersistentVector","^90","^6Y","^6R",null,"^73",["^E",["^74",["^E",[["^6X"]]]]]],"^90","^6Y","^9","~$instaparse.auto-flatten-seq/get-vec","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",29,"^78",["^E",[["^6X"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",310,"^7Q","^94","^6P",311,"^7;",1,"^6G","^94","^7<",true,"^73",["^E",["^74",["^E",[["^6X"]]]]],"^6R",null],"~$->AutoFlattenSeq",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",167,"^6L",10,"^6P",167,"^6Q",24,"^8@",["^8",["^8E","^8F","^8H","^8I","^8J","^8K","~$cljs.core/ISeq","~$cljs.core/INext","^91","^8L","^8M","^8P","^8Q","^8S"]],"^8T",["^8",["^8E","^8F","^8H","^8J","^8K","^97","^98","^8L","^8M","^8P","^8Q","^8S"]],"^8U","^8V","^73",["^E",["^74",["^E",[["~$v","~$premix-hashcode","^8W","^8X","~$dirty","~$cached-seq"]]]]]],"^8@",["^8",["^8E","^8F","^8H","^8I","^8J","^8K","^97","^98","^91","^8L","^8M","^8P","^8Q","^8S"]],"^9","~$instaparse.auto-flatten-seq/->AutoFlattenSeq","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",24,"^78",["^E",[["~$v","^99","^8W","^8X","^9:","^9;"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^8U","^8V","^6K",167,"^6P",167,"^7;",6,"^7<",true,"^73",["^E",["^74",["^E",[["~$v","^99","^8W","^8X","^9:","^9;"]]]]],"^8T",["^8",["^8E","^8F","^8H","^8J","^8K","^97","^98","^8L","^8M","^8P","^8Q","^8S"]]],"^6@",["^ ","^9","~$instaparse.auto-flatten-seq/EMPTY","^6J","instaparse/auto_flatten_seq.cljc","^6K",285,"^6L",1,"^6P",285,"^6Q",11,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",285,"^6L",6,"^6P",285,"^6Q",11],"^6G","^6["],"~$ConjFlat",["^ ","^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",7,"^6L",14,"^6P",7,"^6Q",22,"^6R",null,"^6S",true,"^6T",["^E",["@interface"]],"^6U",["^ ","^6V",["^ ","^8[",[["^6X","^92"]],"~$cached?",[["^6X"]]]]],"^6S",true,"^9","^91","^6J","instaparse/auto_flatten_seq.cljc","^6Q",22,"^6L",1,"^6K",7,"^6U",["^ ","^6V",["^ ","^8[",[["^6X","^92"]],"^9?",[["^6X"]]]],"^6Z",null,"^6P",7,"^6G","^6[","^70",["^8",["^6N"]],"^6R",null,"^6T",["^E",["@interface"]]],"^9?",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",9,"^6L",4,"^6P",9,"^6Q",11,"^90","^91","^6R",null,"^73",["^E",["^74",["^E",[["^6X"]]]]]],"^90","^91","^9","~$instaparse.auto-flatten-seq/cached?","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",11,"^78",["^E",[["^6X"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",7,"^6P",9,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["^6X"]]]]],"^6R",null]],"^C",["^ ","^?","^?"],"~:cljs.analyzer/constants",["^ ","^A",["^8",["~$boolean","^99","~:else","^9:","~$v","^7M","^9;","~:unsynchronized-mutable","^94","~$ISeq","^8X","^6G","^8Y","^8W"]],"~:order",["^9C","~$v","^6G","^94","^99","^7M","^8W","^8X","^9:","^9B","^9;","^9D","^9E","^8Y"]],"^G",["^ "],"^H",["^@","^?"]],"^<","^:","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^6<",[["^9I","~:static-fns"],true,["^9I","~:elide-asserts"],true,["^9I","~:optimize-constants"],null,["^9I","~:emit-constants"],null,["^9I","~:infer-externs"],true,["^9I","^O"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:release",["^9I","~:fn-invoke-direct"],null,["^9I","^Q"],null]]]