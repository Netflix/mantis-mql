["^ ","~:output",["^ ","~:js","goog.provide('instaparse.auto_flatten_seq');\ngoog.require('cljs.core');\ninstaparse.auto_flatten_seq.threshold = (32);\n\n/**\n * @interface\n */\ninstaparse.auto_flatten_seq.ConjFlat = function(){};\n\ninstaparse.auto_flatten_seq.conj_flat = (function instaparse$auto_flatten_seq$conj_flat(self,obj){\nif((!((self == null))) && (!((self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 == null)))){\nreturn self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self,obj);\n} else {\nvar x__5859__auto__ = (((self == null))?null:self);\nvar m__5860__auto__ = (instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__5859__auto__)]);\nif(!((m__5860__auto__ == null))){\nreturn (m__5860__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5860__auto__.cljs$core$IFn$_invoke$arity$2(self,obj) : m__5860__auto__.call(null,self,obj));\n} else {\nvar m__5860__auto____$1 = (instaparse.auto_flatten_seq.conj_flat[\"_\"]);\nif(!((m__5860__auto____$1 == null))){\nreturn (m__5860__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5860__auto____$1.cljs$core$IFn$_invoke$arity$2(self,obj) : m__5860__auto____$1.call(null,self,obj));\n} else {\nthrow cljs.core.missing_protocol(\"ConjFlat.conj-flat\",self);\n}\n}\n}\n});\n\ninstaparse.auto_flatten_seq.cached_QMARK_ = (function instaparse$auto_flatten_seq$cached_QMARK_(self){\nif((!((self == null))) && (!((self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 == null)))){\nreturn self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);\n} else {\nvar x__5859__auto__ = (((self == null))?null:self);\nvar m__5860__auto__ = (instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__5859__auto__)]);\nif(!((m__5860__auto__ == null))){\nreturn (m__5860__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto__.call(null,self));\n} else {\nvar m__5860__auto____$1 = (instaparse.auto_flatten_seq.cached_QMARK_[\"_\"]);\nif(!((m__5860__auto____$1 == null))){\nreturn (m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto____$1.call(null,self));\n} else {\nthrow cljs.core.missing_protocol(\"ConjFlat.cached?\",self);\n}\n}\n}\n});\n\n\n\n\n/**\n * Returns the hash code, consistent with =, for an external ordered\n *   collection implementing Iterable.\n *   See http://clojure.org/data_structures#hash for full algorithms.\n */\ninstaparse.auto_flatten_seq.hash_conj = (function instaparse$auto_flatten_seq$hash_conj(unmixed_hash,item){\nreturn (cljs.core.imul((31),unmixed_hash) + cljs.core.hash(item));\n});\ninstaparse.auto_flatten_seq.expt = (function instaparse$auto_flatten_seq$expt(base,pow){\nif((pow === (0))){\nreturn (1);\n} else {\nvar n = (pow | (0));\nvar y = ((1) | (0));\nvar z = (base | (0));\nwhile(true){\nvar t = cljs.core.even_QMARK_(n);\nvar n__$1 = cljs.core.quot(n,(2));\nif(t){\nvar G__29183 = n__$1;\nvar G__29184 = y;\nvar G__29185 = cljs.core.imul(z,z);\nn = G__29183;\ny = G__29184;\nz = G__29185;\ncontinue;\n} else {\nif((n__$1 === (0))){\nreturn cljs.core.imul(z,y);\n} else {\nvar G__29186 = n__$1;\nvar G__29187 = cljs.core.imul(z,y);\nvar G__29188 = cljs.core.imul(z,z);\nn = G__29186;\ny = G__29187;\nz = G__29188;\ncontinue;\n\n}\n}\nbreak;\n}\n}\n});\ninstaparse.auto_flatten_seq.delve = (function instaparse$auto_flatten_seq$delve(v,index){\nvar v__$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,index);\nvar index__$1 = index;\nwhile(true){\nif(cljs.core.truth_((instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1(v__$1) : instaparse.auto_flatten_seq.afs_QMARK_.call(null,v__$1)))){\nvar G__29189 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(v__$1,(0));\nvar G__29190 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(index__$1,(0));\nv__$1 = G__29189;\nindex__$1 = G__29190;\ncontinue;\n} else {\nreturn index__$1;\n}\nbreak;\n}\n});\ninstaparse.auto_flatten_seq.advance = (function instaparse$auto_flatten_seq$advance(v,index){\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(index),(1))){\nif((cljs.core.peek(index) < ((instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1(v) : instaparse.auto_flatten_seq.true_count.call(null,v)) - (1)))){\nreturn instaparse.auto_flatten_seq.delve(v,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.peek(index) + (1))], null));\n} else {\nreturn null;\n}\n} else {\nif((cljs.core.peek(index) < ((function (){var G__29193 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,cljs.core.pop(index));\nreturn (instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1(G__29193) : instaparse.auto_flatten_seq.true_count.call(null,G__29193));\n})() - (1)))){\nreturn instaparse.auto_flatten_seq.delve(v,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.pop(index),(cljs.core.peek(index) + (1))));\n} else {\nvar G__29199 = v;\nvar G__29200 = cljs.core.pop(index);\nv = G__29199;\nindex = G__29200;\ncontinue;\n\n}\n}\nbreak;\n}\n});\ninstaparse.auto_flatten_seq.flat_seq = (function instaparse$auto_flatten_seq$flat_seq(var_args){\nvar G__29203 = arguments.length;\nswitch (G__29203) {\ncase 1:\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1 = (function (v){\nif((cljs.core.count(v) > (0))){\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(v,instaparse.auto_flatten_seq.delve(v,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null)));\n} else {\nreturn null;\n}\n});\n\ninstaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2 = (function (v,index){\nreturn (new cljs.core.LazySeq(null,(function (){\nreturn cljs.core.cons(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,index),(function (){var temp__5457__auto__ = instaparse.auto_flatten_seq.advance(v,index);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar next_index = temp__5457__auto__;\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(v,next_index);\n} else {\nreturn null;\n}\n})());\n}),null,null));\n});\n\ninstaparse.auto_flatten_seq.flat_seq.cljs$lang$maxFixedArity = 2;\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeq}\n * @implements {cljs.core.INext}\n * @implements {instaparse.auto_flatten_seq.ConjFlat}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.ILookup}\n*/\ninstaparse.auto_flatten_seq.AutoFlattenSeq = (function (v,premix_hashcode,hashcode,cnt,dirty,cached_seq){\nthis.v = v;\nthis.premix_hashcode = premix_hashcode;\nthis.hashcode = hashcode;\nthis.cnt = cnt;\nthis.dirty = dirty;\nthis.cached_seq = cached_seq;\nthis.cljs$lang$protocol_mask$partition0$ = 31850958;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.toString = (function (){\nvar self__ = this;\nvar self = this;\nreturn cljs.core.pr_str_STAR_(cljs.core.seq(self));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (self,key){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.v,key);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (self,key,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.v,key,not_found);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.meta(self__.v);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.next(cljs.core.seq(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cnt;\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.hashcode;\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (self,other){\nvar self__ = this;\nvar self__$1 = this;\nreturn (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.hashcode,cljs.core.hash(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,cljs.core.count(other))) && ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,(0))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.seq(self__$1),other)));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.with_meta(instaparse.auto_flatten_seq.EMPTY,cljs.core.meta(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.first(cljs.core.seq(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.rest(cljs.core.seq(self__$1));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(self__.cached_seq)){\nreturn self__.cached_seq;\n} else {\nself__.cached_seq = ((self__.dirty)?instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1(self__.v):cljs.core.seq(self__.v));\n\nreturn self__.cached_seq;\n}\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (self,metamap){\nvar self__ = this;\nvar self__$1 = this;\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta(self__.v,metamap),self__.premix_hashcode,self__.hashcode,self__.cnt,self__.dirty,null));\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (self,o){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.cons(o,self__$1);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = (function (self,obj){\nvar self__ = this;\nvar self__$1 = this;\nif((obj == null)){\nreturn self__$1;\n} else {\nif(cljs.core.truth_((instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1(obj) : instaparse.auto_flatten_seq.afs_QMARK_.call(null,obj)))){\nif((self__.cnt === (0))){\nreturn obj;\n} else {\nif((cljs.core.count(obj) <= (32))){\nvar phc = (instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2(self__$1,obj) : instaparse.auto_flatten_seq.hash_cat.call(null,self__$1,obj));\nvar new_cnt = (self__.cnt + cljs.core.count(obj));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,(function (){var or__5126__auto__ = self__.dirty;\nif(or__5126__auto__){\nreturn or__5126__auto__;\n} else {\nreturn obj.dirty;\n}\n})(),null));\n} else {\nvar phc = (instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2(self__$1,obj) : instaparse.auto_flatten_seq.hash_cat.call(null,self__$1,obj));\nvar new_cnt = (self__.cnt + cljs.core.count(obj));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,true,null));\n\n}\n}\n} else {\nvar phc = instaparse.auto_flatten_seq.hash_conj(self__.premix_hashcode,obj);\nvar new_cnt = (self__.cnt + (1));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,self__.dirty,null));\n\n}\n}\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cached_seq;\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,\"v\",\"v\",1661996586,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"PersistentVector\",\"PersistentVector\",-837570443,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"premix-hashcode\",\"premix-hashcode\",-1918840795,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"hashcode\",\"hashcode\",1350412446,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"dirty\",\"dirty\",-1924882488,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cached-seq\",\"cached-seq\",1369780142,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"ISeq\",\"ISeq\",1517365813,null),new cljs.core.Keyword(null,\"unsynchronized-mutable\",\"unsynchronized-mutable\",-164143950),true], null))], null);\n});\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = \"instaparse.auto-flatten-seq/AutoFlattenSeq\";\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = (function (this__5797__auto__,writer__5798__auto__,opt__5799__auto__){\nreturn cljs.core._write(writer__5798__auto__,\"instaparse.auto-flatten-seq/AutoFlattenSeq\");\n});\n\ninstaparse.auto_flatten_seq.__GT_AutoFlattenSeq = (function instaparse$auto_flatten_seq$__GT_AutoFlattenSeq(v,premix_hashcode,hashcode,cnt,dirty,cached_seq){\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(v,premix_hashcode,hashcode,cnt,dirty,cached_seq));\n});\n\ninstaparse.auto_flatten_seq.hash_cat = (function instaparse$auto_flatten_seq$hash_cat(v1,v2){\nvar c = cljs.core.count(v2);\nvar e = (instaparse.auto_flatten_seq.expt((31),c) | (0));\nreturn (cljs.core.imul(e,v1.premix_hashcode) + (v2.premix_hashcode - e));\n});\n/**\n * Returns the partially calculated hash code, still requires a call to mix-collection-hash\n */\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix = (function instaparse$auto_flatten_seq$hash_ordered_coll_without_mix(var_args){\nvar G__29216 = arguments.length;\nswitch (G__29216) {\ncase 1:\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = (function (coll){\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2((1),coll);\n});\n\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = (function (existing_unmixed_hash,coll){\nvar unmixed_hash = existing_unmixed_hash;\nvar coll__$1 = cljs.core.seq(coll);\nwhile(true){\nif(!((coll__$1 == null))){\nvar G__29218 = ((cljs.core.imul((31),unmixed_hash) + cljs.core.hash(cljs.core.first(coll__$1))) | (0));\nvar G__29219 = cljs.core.next(coll__$1);\nunmixed_hash = G__29218;\ncoll__$1 = G__29219;\ncontinue;\n} else {\nreturn unmixed_hash;\n}\nbreak;\n}\n});\n\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$lang$maxFixedArity = 2;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (afs,writer,opts){\nvar afs__$1 = this;\nreturn cljs.core._pr_writer(cljs.core.seq(afs__$1),writer,opts);\n});\ninstaparse.auto_flatten_seq.auto_flatten_seq = (function instaparse$auto_flatten_seq$auto_flatten_seq(v){\nvar v__$1 = cljs.core.vec(v);\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1,instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1(v__$1),cljs.core.hash(v__$1),cljs.core.count(v__$1),false,null));\n});\ninstaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq(cljs.core.PersistentVector.EMPTY);\ninstaparse.auto_flatten_seq.afs_QMARK_ = (function instaparse$auto_flatten_seq$afs_QMARK_(s){\nreturn (s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq);\n});\ninstaparse.auto_flatten_seq.true_count = (function instaparse$auto_flatten_seq$true_count(v){\nif(cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_(v))){\nreturn cljs.core.count(v.v);\n} else {\nreturn cljs.core.count(v);\n}\n});\ninstaparse.auto_flatten_seq.flat_vec_helper = (function instaparse$auto_flatten_seq$flat_vec_helper(acc,v){\nwhile(true){\nvar temp__5455__auto__ = cljs.core.seq(v);\nif(temp__5455__auto__){\nvar s = temp__5455__auto__;\nvar fst = cljs.core.first(v);\nif(cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_(fst))){\nvar G__29227 = (instaparse.auto_flatten_seq.flat_vec_helper.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.flat_vec_helper.cljs$core$IFn$_invoke$arity$2(acc,fst) : instaparse.auto_flatten_seq.flat_vec_helper.call(null,acc,fst));\nvar G__29228 = cljs.core.next(v);\nacc = G__29227;\nv = G__29228;\ncontinue;\n} else {\nvar G__29229 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,fst);\nvar G__29230 = cljs.core.next(v);\nacc = G__29229;\nv = G__29230;\ncontinue;\n}\n} else {\nreturn acc;\n}\nbreak;\n}\n});\n/**\n * Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\n */\ninstaparse.auto_flatten_seq.flat_vec = (function instaparse$auto_flatten_seq$flat_vec(v){\nreturn cljs.core.persistent_BANG_(instaparse.auto_flatten_seq.flat_vec_helper(cljs.core.transient$(cljs.core.PersistentVector.EMPTY),v));\n});\n\n/**\n * @interface\n */\ninstaparse.auto_flatten_seq.GetVec = function(){};\n\ninstaparse.auto_flatten_seq.get_vec = (function instaparse$auto_flatten_seq$get_vec(self){\nif((!((self == null))) && (!((self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 == null)))){\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);\n} else {\nvar x__5859__auto__ = (((self == null))?null:self);\nvar m__5860__auto__ = (instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__5859__auto__)]);\nif(!((m__5860__auto__ == null))){\nreturn (m__5860__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto__.call(null,self));\n} else {\nvar m__5860__auto____$1 = (instaparse.auto_flatten_seq.get_vec[\"_\"]);\nif(!((m__5860__auto____$1 == null))){\nreturn (m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5860__auto____$1.cljs$core$IFn$_invoke$arity$1(self) : m__5860__auto____$1.call(null,self));\n} else {\nthrow cljs.core.missing_protocol(\"GetVec.get-vec\",self);\n}\n}\n}\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IIndexed}\n * @implements {cljs.core.IVector}\n * @implements {cljs.core.IReversible}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {instaparse.auto_flatten_seq.GetVec}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IStack}\n * @implements {cljs.core.IComparable}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.ILookup}\n*/\ninstaparse.auto_flatten_seq.FlattenOnDemandVector = (function (v,hashcode,cnt,flat){\nthis.v = v;\nthis.hashcode = hashcode;\nthis.cnt = cnt;\nthis.flat = flat;\nthis.cljs$lang$protocol_mask$partition0$ = 167142175;\nthis.cljs$lang$protocol_mask$partition1$ = 2048;\n});\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = (function (){\nvar self__ = this;\nvar self = this;\nreturn cljs.core.pr_str_STAR_(instaparse.auto_flatten_seq.get_vec(self));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (self,key){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),key);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (self,key,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self__$1),key,not_found);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.not(cljs.core.deref(self__.flat))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.flat,((function (self__$1){\nreturn (function (_){\nreturn cljs.core.with_meta(instaparse.auto_flatten_seq.flat_vec(cljs.core.deref(self__.v)),cljs.core.meta(cljs.core.deref(self__.v)));\n});})(self__$1))\n);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.v,((function (self__$1){\nreturn (function (_){\nreturn null;\n});})(self__$1))\n);\n} else {\n}\n\nreturn cljs.core.deref(self__.flat);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (self,f,init){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._kv_reduce(instaparse.auto_flatten_seq.get_vec(self__$1),f,init);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (self,i){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._nth.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),i);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (self,i,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._nth.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self__$1),i,not_found);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (self,i,val){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._assoc_n(instaparse.auto_flatten_seq.get_vec(self__$1),i,val);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(cljs.core.deref(self__.flat))){\nreturn cljs.core.meta(cljs.core.deref(self__.flat));\n} else {\nreturn cljs.core.meta(cljs.core.deref(self__.v));\n}\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cnt;\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._peek(instaparse.auto_flatten_seq.get_vec(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._pop(instaparse.auto_flatten_seq.get_vec(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif((self__.cnt > (0))){\nreturn cljs.core.rseq(instaparse.auto_flatten_seq.get_vec(self__$1));\n} else {\nreturn null;\n}\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.hashcode;\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (self,other){\nvar self__ = this;\nvar self__$1 = this;\nreturn (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.hashcode,cljs.core.hash(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,cljs.core.count(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),other));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,cljs.core.meta(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (self,i,val){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self__$1),i,val);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (self,k){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._contains_key_QMARK_(instaparse.auto_flatten_seq.get_vec(self__$1),k);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.seq(instaparse.auto_flatten_seq.get_vec(self__$1));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (self,metamap){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(cljs.core.deref(self__.flat))){\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.v)),self__.hashcode,self__.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.deref(self__.flat),metamap))));\n} else {\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.deref(self__.v),metamap)),self__.hashcode,self__.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.flat))));\n}\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (self,obj){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self__$1),obj);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = (function() {\nvar G__29232 = null;\nvar G__29232__2 = (function (self__,arg){\nvar self__ = this;\nvar self____$1 = this;\nvar self = self____$1;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self),arg);\n});\nvar G__29232__3 = (function (self__,arg,not_found){\nvar self__ = this;\nvar self____$1 = this;\nvar self = self____$1;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self),arg,not_found);\n});\nG__29232 = function(self__,arg,not_found){\nswitch(arguments.length){\ncase 2:\nreturn G__29232__2.call(this,self__,arg);\ncase 3:\nreturn G__29232__3.call(this,self__,arg,not_found);\n}\nthrow(new Error('Invalid arity: ' + (arguments.length - 1)));\n};\nG__29232.cljs$core$IFn$_invoke$arity$2 = G__29232__2;\nG__29232.cljs$core$IFn$_invoke$arity$3 = G__29232__3;\nreturn G__29232;\n})()\n;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = (function (self__,args29231){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args29231)));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = (function (arg){\nvar self__ = this;\nvar self = this;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(instaparse.auto_flatten_seq.get_vec(self),arg);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = (function (arg,not_found){\nvar self__ = this;\nvar self = this;\nreturn cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(instaparse.auto_flatten_seq.get_vec(self),arg,not_found);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = (function (self,that){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._compare(instaparse.auto_flatten_seq.get_vec(self__$1),that);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"v\",\"v\",1661996586,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"hashcode\",\"hashcode\",1350412446,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),new cljs.core.Symbol(null,\"flat\",\"flat\",-2076841507,null)], null);\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = \"instaparse.auto-flatten-seq/FlattenOnDemandVector\";\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = (function (this__5797__auto__,writer__5798__auto__,opt__5799__auto__){\nreturn cljs.core._write(writer__5798__auto__,\"instaparse.auto-flatten-seq/FlattenOnDemandVector\");\n});\n\ninstaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = (function instaparse$auto_flatten_seq$__GT_FlattenOnDemandVector(v,hashcode,cnt,flat){\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(v,hashcode,cnt,flat));\n});\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;\n\ninstaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (v,writer,opts){\nvar v__$1 = this;\nreturn cljs.core._pr_writer(instaparse.auto_flatten_seq.get_vec(v__$1),writer,opts);\n});\ninstaparse.auto_flatten_seq.convert_afs_to_vec = (function instaparse$auto_flatten_seq$convert_afs_to_vec(afs){\nif(cljs.core.truth_(afs.dirty)){\nif(cljs.core.truth_(instaparse.auto_flatten_seq.cached_QMARK_(afs))){\nreturn cljs.core.vec(cljs.core.seq(afs));\n} else {\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(afs.v),afs.hashcode,afs.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null)));\n}\n} else {\nreturn afs.v;\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ "],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.auto-flatten-seq","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^?","~$goog","^@"],"~:seen",["^8",[]],"~:uses",null,"~:require-macros",["^ ","^?","^?"],"~:form",["~#list",["~$ns","^:"]],"~:js-deps",["^ "],"~:deps",["^@","^?"]],"^<","^:","~:resource-id",["~:shadow.build.classpath/resource","instaparse/auto_flatten_seq.cljc"],"~:compiled-at",1516731461913,"~:resource-name","instaparse/auto_flatten_seq.cljc","~:warnings",[],"~:source","(ns instaparse.auto-flatten-seq\r\n  #?(:clj (:import clojure.lang.PersistentVector))\r\n  #?(:clj (:require [clojure.core.protocols :refer [IKVReduce]])))\r\n\r\n(def ^:const threshold 32)\r\n\r\n(defprotocol ConjFlat\r\n  (conj-flat [self obj])\r\n  (cached? [self]))\r\n\r\n; Need a backwards compatible version of mix-collection-hash\r\n#?(:clj (defmacro compile-if [test then else]\r\n          (if (eval test)\r\n            then\r\n            else)))\r\n\r\n#?(:clj (defmacro mix-collection-hash-bc [x y]\r\n          ;; backwards-compatible\r\n          `(compile-if (resolve 'clojure.core/mix-collection-hash)\r\n                       (mix-collection-hash ~x ~y)\r\n                       ~x)))\r\n\r\n(declare EMPTY hash-cat afs? true-count)\r\n\r\n#?(:clj\r\n   (defmacro hash-conj [premix-hash-v item]\r\n     `(unchecked-add-int (unchecked-multiply-int 31 ~premix-hash-v) (hash ~item)))\r\n   :cljs\r\n   (defn ^number hash-conj\r\n     \"Returns the hash code, consistent with =, for an external ordered\r\n  collection implementing Iterable.\r\n  See http://clojure.org/data_structures#hash for full algorithms.\"\r\n     [unmixed-hash item]\r\n     (+ (imul 31 unmixed-hash) (hash item))))\r\n\r\n#?(:clj\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (unchecked-multiply-int z z))\r\n             (zero? n) (unchecked-multiply-int z y)\r\n             :else (recur n (unchecked-multiply-int z y) (unchecked-multiply-int z z)))))))\r\n   :cljs\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (imul z z))\r\n             (zero? n) (imul z y)\r\n             :else (recur n (imul z y) (imul z z))))))))\r\n\r\n(defn delve [v index]\r\n  (loop [v (get-in v index)\r\n         index index]\r\n    (if (afs? v)\r\n      (recur (get v 0) (conj index 0))\r\n      index)))\r\n\r\n(defn advance [v index]\r\n  (cond\r\n    (= (count index) 1)\r\n    (when (< (peek index) (dec (true-count v)))\r\n      (delve v [(inc (peek index))]))\r\n    \r\n    (< (peek index) (dec (true-count (get-in v (pop index)))))\r\n    (delve v (conj (pop index) (inc (peek index))))\r\n    \r\n    :else\r\n    (recur v (pop index))))\r\n\r\n(defn flat-seq\r\n  ([v] (if (pos? (count v)) \r\n         (flat-seq v (delve v [0]))\r\n         nil))\r\n  ([v index]\r\n    (lazy-seq\r\n      (cons (get-in v index) \r\n            (when-let [next-index (advance v index)] \r\n              (flat-seq v next-index))))))  \r\n\r\n#?(:clj\r\n(deftype AutoFlattenSeq [^PersistentVector v ^int premix-hashcode ^int hashcode\r\n                         ^int cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^clojure.lang.ISeq cached-seq]\r\n  Object\r\n  (toString [self] (.toString (seq self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? AutoFlattenSeq other)\r\n         (== hashcode (.hashcode ^AutoFlattenSeq other))\r\n         (== cnt (.cnt ^AutoFlattenSeq other))\r\n         (= dirty (.dirty ^AutoFlattenSeq other))\r\n         (= v (.v ^AutoFlattenSeq other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (if-let [^java.util.Collection s (seq self)]\r\n      (.iterator s)\r\n      (let [^java.util.Collection e ()]\r\n        (.iterator e))))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (let [^java.util.Collection s (seq self)]\r\n      (.toArray s)))\r\n  clojure.lang.Sequential\r\n  clojure.lang.ISeq\r\n  (equiv [self other]\r\n    (and (== hashcode (hash other))\r\n         (== cnt (count other))\r\n         (or (== cnt 0)\r\n             (= (seq self) other))))\r\n  (empty [self] (with-meta EMPTY (meta self))) \r\n  (first [self] (first (seq self)))\r\n  (next [self] (next (seq self)))\r\n  (more [self] (rest (seq self)))\r\n  (cons [self obj]\r\n    (cons obj self))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           (or dirty (.dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else \r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.ILookup\r\n  (valAt [self key]    \r\n    (.valAt v key))\r\n  (valAt [self key not-found]\r\n    (.valAt v key not-found))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (meta v))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq))))\r\n:cljs\r\n(deftype AutoFlattenSeq [^PersistentVector v ^number premix-hashcode ^number hashcode ^number cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^ISeq cached-seq]\r\n  Object\r\n  (toString [self] (pr-str* (seq self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  ISequential\r\n  ISeq\r\n  (-first [self] (first (seq self)))\r\n  (-rest [self] (rest (seq self)))\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (and ;(instance? AutoFlattenSeq other)\r\n         (= hashcode (hash other))\r\n         (= cnt (count other))\r\n         (or (= cnt 0)\r\n             (= (seq self) other))))\r\n  ICollection\r\n  (-conj [self o] (cons o self))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta EMPTY (meta self))) \r\n  INext\r\n  (-next [self] (next (seq self)))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           (or dirty (.-dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else\r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  ICounted\r\n  (-count [self] cnt)\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup v key))\r\n  (-lookup [self key not-found]\r\n    (-lookup v key not-found))\r\n  IWithMeta\r\n  (-with-meta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  IMeta\r\n  (-meta [self]\r\n    (meta v))\r\n  ISeqable\r\n  (-seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq)))))\r\n\r\n#?(:clj\r\n   (defn- hash-cat ^long [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (unchecked-add-int\r\n        (unchecked-multiply-int e (.premix-hashcode v1))\r\n        (unchecked-subtract-int (.premix-hashcode v2) e))))\r\n   :cljs\r\n   (defn- hash-cat ^number [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (+ (imul e (.-premix-hashcode v1))\r\n          (- (.-premix-hashcode v2) e)))))\r\n\r\n#?(:clj\r\n   (defn hash-ordered-coll-without-mix ^long [v]\r\n     (compile-if (resolve 'clojure.core/mix-collection-hash)\r\n       (let [thirty-one (int 31)\r\n             cnt (count v)]\r\n         (loop [acc (int 1) i (int 0)]\r\n           (if (< i cnt)\r\n             (recur (unchecked-add-int\r\n                     (unchecked-multiply-int thirty-one acc)\r\n                     (hash (v i)))\r\n                    (inc i))\r\n             acc)))\r\n       (hash v)))\r\n   :cljs\r\n   (defn ^number hash-ordered-coll-without-mix\r\n     \"Returns the partially calculated hash code, still requires a call to mix-collection-hash\"\r\n     ([coll]\r\n      (hash-ordered-coll-without-mix 1 coll))\r\n     ([existing-unmixed-hash coll]\r\n      (loop [unmixed-hash existing-unmixed-hash\r\n             coll (seq coll)]\r\n        (if-not (nil? coll)\r\n          (recur (bit-or (+ (imul 31 unmixed-hash) (hash (first coll))) 0) \r\n                 (next coll))\r\n          unmixed-hash)))))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/AutoFlattenSeq\r\n     (-pr-writer [afs writer opts]\r\n       (-pr-writer (seq afs) writer opts))))\r\n\r\n(defn auto-flatten-seq [v]\r\n  (let [v (vec v)]\r\n    (AutoFlattenSeq. v\r\n                     (hash-ordered-coll-without-mix v)\r\n                     (hash v) (count v)\r\n                     false nil)))\r\n\r\n(def EMPTY (auto-flatten-seq []))\r\n\r\n(defn afs? [s]\r\n  (instance? AutoFlattenSeq s))\r\n\r\n(defn true-count [v]\r\n  (if (afs? v)\r\n    (count (.-v ^AutoFlattenSeq v))\r\n    (count v)))\r\n\r\n;; For hiccup format, we need to be able to convert the seq to a vector.\r\n\r\n(defn flat-vec-helper [acc v]\r\n  (if-let [s (seq v)]\r\n    (let [fst (first v)]\r\n      (if (afs? fst) \r\n        (recur (flat-vec-helper acc fst) (next v))\r\n        (recur (conj! acc fst) (next v))))\r\n    acc))\r\n\r\n(defn flat-vec\r\n  \"Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\"\r\n  [v]\r\n  (persistent! (flat-vec-helper (transient []) v)))\r\n\r\n(defprotocol GetVec\r\n  (^PersistentVector get-vec [self]))\r\n\r\n#?(:clj\r\n(deftype FlattenOnDemandVector [v   ; ref containing PersistentVector or nil \r\n                                ^int hashcode\r\n                                ^int cnt\r\n                                flat] ; ref containing PersistentVector or nil                                \r\n  GetVec\r\n  (get-vec [self] \r\n           (when (not @flat)             \r\n             (dosync\r\n               (when (not @flat)\r\n                 (ref-set flat (with-meta (flat-vec @v) (meta @v))) \r\n                 (ref-set v nil)))) ; clear out v so it can be garbage collected\r\n           @flat)\r\n                    \r\n  Object\r\n  (toString [self] (.toString (get-vec self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? FlattenOnDemandVector other)\r\n         (== hashcode (.hashcode ^FlattenOnDemandVector other))\r\n         (== cnt (.cnt ^FlattenOnDemandVector other))\r\n         (= v (.v ^FlattenOnDemandVector other))\r\n         (= flat (.flat ^FlattenOnDemandVector other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (.iterator (get-vec self)))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (.toArray (get-vec self)))\r\n  clojure.lang.IPersistentCollection\r\n  (equiv [self other]\r\n    (or \r\n      (and (== hashcode (hash other))\r\n           (== cnt (count other))\r\n           (= (get-vec self) other))))\r\n  (empty [self] (with-meta [] (meta self))) \r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.IPersistentVector\r\n  (assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (assocN [self i val]\r\n    (.assocN (get-vec self) i val))\r\n  (length [self]\r\n    cnt)\r\n  (cons [self obj]\r\n    (conj (get-vec self) obj))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (ref @v) hashcode cnt (ref (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (ref (with-meta @v metamap)) hashcode cnt (ref @flat))))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (seq (get-vec self)))\r\n  clojure.lang.ILookup\r\n  (valAt [self key]\r\n    (.valAt (get-vec self) key))\r\n  (valAt [self key not-found]\r\n    (.valAt (get-vec self) key not-found))\r\n  clojure.lang.Indexed\r\n  (nth [self i]\r\n    (.nth (get-vec self) i))\r\n  (nth [self i not-found]\r\n    (.nth (get-vec self) i not-found))\r\n  clojure.lang.IFn\r\n  (invoke [self arg]\r\n    (.invoke (get-vec self) arg))\r\n  (applyTo [self arglist]\r\n    (.applyTo (get-vec self) arglist))\r\n  clojure.lang.Reversible\r\n  (rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  clojure.lang.IPersistentStack\r\n  (peek [self] \r\n    (peek (get-vec self)))\r\n  (pop [self] \r\n    (pop (get-vec self)))\r\n  clojure.lang.Associative\r\n  (containsKey [self k]\r\n    (.containsKey (get-vec self) k))\r\n  (entryAt [self k]\r\n    (.entryAt (get-vec self) k))\r\n  IKVReduce\r\n  (kv-reduce [self f init]\r\n    (.kvreduce (get-vec self) f init))\r\n  java.lang.Comparable\r\n  (compareTo [self that]\r\n    (.compareTo (get-vec self) that))\r\n  java.util.List\r\n  (get [self i] (nth (get-vec self) i))\r\n  (indexOf [self o] (.indexOf (get-vec self) o))\r\n  (lastIndexOf [self o] (.lastIndexOf (get-vec self) o))\r\n  (listIterator [self]\r\n    (.listIterator (get-vec self) 0))\r\n  (listIterator [self i]\r\n    (.listIterator (get-vec self) i))\r\n  (subList [self a z]\r\n    (.subList (get-vec self) a z))\r\n  )\r\n:cljs\r\n(deftype FlattenOnDemandVector [v   ; atom containing PersistentVector or nil \r\n                                ^number hashcode\r\n                                ^number cnt\r\n                                flat] ; atom containing PersistentVector or nil\r\n  GetVec\r\n  (get-vec [self] \r\n    (when (not @flat)             \r\n      (swap! flat (fn [_] (with-meta (flat-vec @v) (meta @v))))\r\n      (swap! v (fn [_] nil))) ; clear out v so it can be garbage collected \r\n    @flat)\r\n  \r\n  Object\r\n  (toString [self]\r\n    (pr-str* (get-vec self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (or \r\n     (and (= hashcode (hash other))\r\n          (= cnt (count other))\r\n          (= (get-vec self) other))))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta [] (meta self))) \r\n  ICounted\r\n  (-count [self] cnt)\r\n  IVector\r\n  (-assoc-n [self i val]\r\n    (-assoc-n (get-vec self) i val))\r\n  ICollection\r\n  (-conj [self obj]\r\n    (conj (get-vec self) obj))\r\n  IWithMeta\r\n  (-with-meta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (atom @v) hashcode cnt (atom (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (atom (with-meta @v metamap)) hashcode cnt (atom @flat))))\r\n  IMeta\r\n  (-meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  ISequential\r\n  ISeqable\r\n  (-seq [self]\r\n    (seq (get-vec self)))\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup (get-vec self) key))\r\n  (-lookup [self key not-found]\r\n    (-lookup (get-vec self) key not-found))\r\n  IIndexed\r\n  (-nth [self i]\r\n    (-nth (get-vec self) i))\r\n  (-nth [self i not-found]\r\n    (-nth (get-vec self) i not-found))\r\n  IFn\r\n  (-invoke [self arg]\r\n    (-invoke (get-vec self) arg))\r\n  (-invoke [self arg not-found]\r\n    (-invoke (get-vec self) arg not-found))\r\n  IReversible\r\n  (-rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  IStack\r\n  (-peek [self] \r\n    (-peek (get-vec self)))\r\n  (-pop [self] \r\n    (-pop (get-vec self)))\r\n  IAssociative\r\n  (-assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (-contains-key? [self k]\r\n    (-contains-key? (get-vec self) k))\r\n  IKVReduce\r\n  (-kv-reduce [self f init]\r\n    (-kv-reduce (get-vec self) f init))\r\n  IComparable\r\n  (-compare [self that]\r\n    (-compare (get-vec self) that))\r\n  ))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/FlattenOnDemandVector\r\n     (-pr-writer [v writer opts]\r\n       (-pr-writer (get-vec v) writer opts))))\r\n\r\n(defn convert-afs-to-vec [^AutoFlattenSeq afs]\r\n  (cond\r\n    (.-dirty afs)\r\n    (if (cached? afs)\r\n      (vec (seq afs))\r\n      #?(:clj\r\n         (FlattenOnDemandVector.\r\n          (ref (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (ref nil))\r\n         :cljs\r\n         (FlattenOnDemandVector.\r\n          (atom (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (atom nil))))\r\n    :else\r\n    (.-v afs)))\r\n","~:reader-features",["^8",["~:cljs"]],"~:source-map",["^ ","~i4",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2],["^ ","^R",40,"^S",2]],"~i13",[["^ ","^R",0,"^S",2,"^9","instaparse.auto-flatten-seq/threshold"]]],"~i6",["^ ","~i0",[["^ ","^R",0,"^S",3],["^ ","^R",0,"^S",3],["^ ","^R",0,"^S",4],["^ ","^R",39,"^S",7],["^ ","^R",0,"^S",9],["^ ","^R",40,"^S",9],["^ ","^R",0,"^S",10],["^ ","^R",0,"^S",10],["^ ","^R",3,"^S",10],["^ ","^R",4,"^S",10],["^ ","^R",6,"^S",10],["^ ","^R",15,"^S",10],["^ ","^R",27,"^S",10],["^ ","^R",29,"^S",10],["^ ","^R",30,"^S",10],["^ ","^R",93,"^S",10],["^ ","^R",0,"^S",11],["^ ","^R",0,"^S",13],["^ ","^R",4,"^S",13,"^9","x__5859__auto__"],["^ ","^R",22,"^S",13],["^ ","^R",24,"^S",13],["^ ","^R",33,"^S",13],["^ ","^R",40,"^S",13],["^ ","^R",4,"^S",14,"^9","m__5860__auto__"],["^ ","^R",22,"^S",14],["^ ","^R",23,"^S",14,"^9","instaparse/auto-flatten-seq.conj-flat"],["^ ","^R",61,"^S",14],["^ ","^R",61,"^S",14,"^9","goog/typeOf"],["^ ","^R",73,"^S",14,"^9","x__5859__auto__"],["^ ","^R",0,"^S",15],["^ ","^R",0,"^S",15],["^ ","^R",3,"^S",15],["^ ","^R",5,"^S",15],["^ ","^R",6,"^S",15,"^9","m__5860__auto__"],["^ ","^R",25,"^S",15],["^ ","^R",0,"^S",16],["^ ","^R",8,"^S",16,"^9","m__5860__auto__"],["^ ","^R",56,"^S",16,"^9","m__5860__auto__"],["^ ","^R",114,"^S",16,"^9","m__5860__auto__"],["^ ","^R",0,"^S",18],["^ ","^R",4,"^S",18,"^9","m__5860__auto__"],["^ ","^R",26,"^S",18],["^ ","^R",27,"^S",18,"^9","instaparse/auto-flatten-seq.conj-flat"],["^ ","^R",65,"^S",18],["^ ","^R",0,"^S",19],["^ ","^R",0,"^S",19],["^ ","^R",3,"^S",19],["^ ","^R",5,"^S",19],["^ ","^R",6,"^S",19,"^9","m__5860__auto__"],["^ ","^R",29,"^S",19],["^ ","^R",0,"^S",20],["^ ","^R",8,"^S",20,"^9","m__5860__auto__"],["^ ","^R",60,"^S",20,"^9","m__5860__auto__"],["^ ","^R",122,"^S",20,"^9","m__5860__auto__"],["^ ","^R",0,"^S",22],["^ ","^R",6,"^S",22],["^ ","^R",6,"^S",22,"^9","cljs.core/missing-protocol"],["^ ","^R",33,"^S",22],["^ ","^R",0,"^S",28],["^ ","^R",44,"^S",28],["^ ","^R",0,"^S",29],["^ ","^R",0,"^S",29],["^ ","^R",3,"^S",29],["^ ","^R",4,"^S",29],["^ ","^R",6,"^S",29],["^ ","^R",15,"^S",29],["^ ","^R",27,"^S",29],["^ ","^R",29,"^S",29],["^ ","^R",30,"^S",29],["^ ","^R",97,"^S",29],["^ ","^R",0,"^S",30],["^ ","^R",0,"^S",32],["^ ","^R",4,"^S",32,"^9","x__5859__auto__"],["^ ","^R",22,"^S",32],["^ ","^R",24,"^S",32],["^ ","^R",33,"^S",32],["^ ","^R",40,"^S",32],["^ ","^R",4,"^S",33,"^9","m__5860__auto__"],["^ ","^R",22,"^S",33],["^ ","^R",23,"^S",33,"^9","instaparse/auto-flatten-seq.cached?"],["^ ","^R",65,"^S",33],["^ ","^R",65,"^S",33,"^9","goog/typeOf"],["^ ","^R",77,"^S",33,"^9","x__5859__auto__"],["^ ","^R",0,"^S",34],["^ ","^R",0,"^S",34],["^ ","^R",3,"^S",34],["^ ","^R",5,"^S",34],["^ ","^R",6,"^S",34,"^9","m__5860__auto__"],["^ ","^R",25,"^S",34],["^ ","^R",0,"^S",35],["^ ","^R",8,"^S",35,"^9","m__5860__auto__"],["^ ","^R",56,"^S",35,"^9","m__5860__auto__"],["^ ","^R",110,"^S",35,"^9","m__5860__auto__"],["^ ","^R",0,"^S",37],["^ ","^R",4,"^S",37,"^9","m__5860__auto__"],["^ ","^R",26,"^S",37],["^ ","^R",27,"^S",37,"^9","instaparse/auto-flatten-seq.cached?"],["^ ","^R",69,"^S",37],["^ ","^R",0,"^S",38],["^ ","^R",0,"^S",38],["^ ","^R",3,"^S",38],["^ ","^R",5,"^S",38],["^ ","^R",6,"^S",38,"^9","m__5860__auto__"],["^ ","^R",29,"^S",38],["^ ","^R",0,"^S",39],["^ ","^R",8,"^S",39,"^9","m__5860__auto__"],["^ ","^R",60,"^S",39,"^9","m__5860__auto__"],["^ ","^R",118,"^S",39,"^9","m__5860__auto__"],["^ ","^R",0,"^S",41],["^ ","^R",6,"^S",41],["^ ","^R",6,"^S",41,"^9","cljs.core/missing-protocol"],["^ ","^R",33,"^S",41],["^ ","^R",0,"^S",47]],"^T",[["^ ","^R",0,"^S",7,"^9","instaparse.auto-flatten-seq/ConjFlat"]]],"~i7",["^ ","~i3",[["^ ","^R",0,"^S",9,"^9","instaparse.auto-flatten-seq/conj-flat"]],"~i14",[["^ ","^R",88,"^S",9,"^9","self"],["^ ","^R",7,"^S",10,"^9","self"],["^ ","^R",30,"^S",10,"^9","self"],["^ ","^R",7,"^S",11,"^9","self"],["^ ","^R",67,"^S",11,"^9","self"],["^ ","^R",25,"^S",13,"^9","self"],["^ ","^R",45,"^S",13,"^9","self"],["^ ","^R",102,"^S",16,"^9","self"],["^ ","^R",140,"^S",16,"^9","self"],["^ ","^R",110,"^S",20,"^9","self"],["^ ","^R",152,"^S",20,"^9","self"],["^ ","^R",54,"^S",22,"^9","self"]],"~i19",[["^ ","^R",93,"^S",9,"^9","obj"],["^ ","^R",72,"^S",11,"^9","obj"],["^ ","^R",107,"^S",16,"^9","obj"],["^ ","^R",145,"^S",16,"^9","obj"],["^ ","^R",115,"^S",20,"^9","obj"],["^ ","^R",157,"^S",20,"^9","obj"]]],"~i8",["^ ","~i3",[["^ ","^R",0,"^S",28,"^9","instaparse.auto-flatten-seq/cached?"]],"~i12",[["^ ","^R",96,"^S",28,"^9","self"],["^ ","^R",7,"^S",29,"^9","self"],["^ ","^R",30,"^S",29,"^9","self"],["^ ","^R",7,"^S",30,"^9","self"],["^ ","^R",71,"^S",30,"^9","self"],["^ ","^R",25,"^S",32,"^9","self"],["^ ","^R",45,"^S",32,"^9","self"],["^ ","^R",102,"^S",35,"^9","self"],["^ ","^R",136,"^S",35,"^9","self"],["^ ","^R",110,"^S",39,"^9","self"],["^ ","^R",148,"^S",39,"^9","self"],["^ ","^R",52,"^S",41,"^9","self"]]],"~i22",["^ ","~i0",[["^ ","^R",0,"^S",47],["^ ","^R",0,"^S",47],["^ ","^R",0,"^S",48],["^ ","^R",0,"^S",49],["^ ","^R",0,"^S",50]]],"~i28",["^ ","~i3",[["^ ","^R",0,"^S",50],["^ ","^R",40,"^S",55],["^ ","^R",0,"^S",56]],"~i17",[["^ ","^R",0,"^S",55,"^9","instaparse.auto-flatten-seq/hash-conj"]]],"~i32",["^ ","~i6",[["^ ","^R",88,"^S",55,"^9","unmixed-hash"]],"^V",[["^ ","^R",101,"^S",55,"^9","item"]]],"~i33",["^ ","~i5",[["^ ","^R",0,"^S",56]],"~i8",[["^ ","^R",8,"^S",56],["^ ","^R",23,"^S",56]],"~i9",[["^ ","^R",8,"^S",56,"^9","cljs.core/imul"]],"^Z",[["^ ","^R",28,"^S",56,"^9","unmixed-hash"]],"~i31",[["^ ","^R",44,"^S",56]],"^[",[["^ ","^R",44,"^S",56,"^9","cljs.core/hash"]],"~i37",[["^ ","^R",59,"^S",56,"^9","item"]]],"~i46",["^ ","~i3",[["^ ","^R",0,"^S",58],["^ ","^R",35,"^S",58],["^ ","^R",0,"^S",59]],"~i10",[["^ ","^R",0,"^S",58,"^9","instaparse.auto-flatten-seq/expt"]],"~i16",[["^ ","^R",78,"^S",58,"^9","base"]],"~i21",[["^ ","^R",83,"^S",58,"^9","pow"]]],"~i47",["^ ","~i5",[["^ ","^R",0,"^S",59],["^ ","^R",0,"^S",60]],"~i9",[["^ ","^R",3,"^S",59],["^ ","^R",12,"^S",59]],"^15",[["^ ","^R",4,"^S",59,"^9","pow"]]],"~i49",["^ ","~i7",[["^ ","^R",0,"^S",62],["^ ","^R",0,"^S",66]],"^U",[["^ ","^R",4,"^S",62,"^9","n"]],"^15",[["^ ","^R",8,"^S",62],["^ ","^R",15,"^S",62]],"^16",[["^ ","^R",9,"^S",62,"^9","pow"]],"~i27",[["^ ","^R",4,"^S",63,"^9","y"]],"~i29",[["^ ","^R",8,"^S",63],["^ ","^R",9,"^S",63],["^ ","^R",15,"^S",63]],"~i38",[["^ ","^R",4,"^S",64,"^9","z"]],"~i40",[["^ ","^R",8,"^S",64],["^ ","^R",16,"^S",64]],"~i45",[["^ ","^R",9,"^S",64,"^9","base"]]],"~i50",["^ ","~i9",[["^ ","^R",0,"^S",66],["^ ","^R",0,"^S",68]],"~i15",[["^ ","^R",4,"^S",66,"^9","t"]],"^Z",[["^ ","^R",8,"^S",66]],"~i18",[["^ ","^R",8,"^S",66,"^9","cljs.core/even?"]],"~i24",[["^ ","^R",30,"^S",66,"^9","n"]],"^Y",[["^ ","^R",4,"^S",67,"^9","n"]],"~i30",[["^ ","^R",12,"^S",67],["^ ","^R",29,"^S",67]],"^11",[["^ ","^R",12,"^S",67,"^9","cljs.core/quot"]],"~i36",[["^ ","^R",27,"^S",67,"^9","n"]]],"~i51",["^ ","~i11",[["^ ","^R",0,"^S",68],["^ ","^R",0,"^S",77],["^ ","^R",0,"^S",80]]],"~i52",["^ ","^T",[["^ ","^R",3,"^S",68,"^9","t"]],"^1?",[["^ ","^R",0,"^S",69]],"^X",[["^ ","^R",15,"^S",69,"^9","n"]],"^1A",[["^ ","^R",15,"^S",70,"^9","y"]],"~i26",[["^ ","^R",15,"^S",71]],"^19",[["^ ","^R",15,"^S",71,"^9","cljs.core/imul"]],"^[",[["^ ","^R",30,"^S",71,"^9","z"]],"~i34",[["^ ","^R",32,"^S",71,"^9","z"]]],"~i53",["^ ","^T",[["^ ","^R",3,"^S",77],["^ ","^R",14,"^S",77]],"~i20",[["^ ","^R",4,"^S",77,"^9","n"]],"~i23",[["^ ","^R",0,"^S",78]],"^1A",[["^ ","^R",7,"^S",78,"^9","cljs.core/imul"]],"^1:",[["^ ","^R",22,"^S",78,"^9","z"]],"^11",[["^ ","^R",24,"^S",78,"^9","y"]]],"~i54",["^ ","^V",[["^ ","^R",0,"^S",80]],"^1G",[["^ ","^R",15,"^S",80,"^9","n"]],"^Y",[["^ ","^R",15,"^S",81]],"^1:",[["^ ","^R",15,"^S",81,"^9","cljs.core/imul"]],"^1H",[["^ ","^R",30,"^S",81,"^9","z"]],"^1C",[["^ ","^R",32,"^S",81,"^9","y"]],"~i39",[["^ ","^R",15,"^S",82]],"^1<",[["^ ","^R",15,"^S",82,"^9","cljs.core/imul"]],"^1=",[["^ ","^R",30,"^S",82,"^9","z"]],"^17",[["^ ","^R",32,"^S",82,"^9","z"]]],"~i56",["^ ","~i0",[["^ ","^R",0,"^S",94],["^ ","^R",36,"^S",94],["^ ","^R",0,"^S",95]],"~i6",[["^ ","^R",0,"^S",94,"^9","instaparse.auto-flatten-seq/delve"]],"^T",[["^ ","^R",80,"^S",94,"^9","v"]],"^1?",[["^ ","^R",82,"^S",94,"^9","index"]]],"~i57",["^ ","~i2",[["^ ","^R",0,"^S",95],["^ ","^R",0,"^S",98]],"~i9",[["^ ","^R",4,"^S",95,"^9","v"]],"^1E",[["^ ","^R",12,"^S",95]],"^W",[["^ ","^R",12,"^S",95,"^9","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^R",59,"^S",95,"^9","v"]],"^16",[["^ ","^R",61,"^S",95,"^9","index"]]],"~i58",["^ ","~i9",[["^ ","^R",4,"^S",96,"^9","index"]],"^1?",[["^ ","^R",16,"^S",96,"^9","index"]]],"~i59",["^ ","~i4",[["^ ","^R",0,"^S",98]],"~i8",[["^ ","^R",20,"^S",98]],"~i9",[["^ ","^R",21,"^S",98,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",92,"^S",98,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",170,"^S",98,"^9","instaparse.auto-flatten-seq/afs?"]],"^U",[["^ ","^R",161,"^S",98,"^9","v"],["^ ","^R",219,"^S",98,"^9","v"]]],"~i60",["^ ","~i6",[["^ ","^R",0,"^S",99]],"^T",[["^ ","^R",15,"^S",99],["^ ","^R",65,"^S",99]],"^U",[["^ ","^R",15,"^S",99,"^9","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1@",[["^ ","^R",59,"^S",99,"^9","v"]],"^1K",[["^ ","^R",15,"^S",100],["^ ","^R",70,"^S",100]],"^1A",[["^ ","^R",15,"^S",100,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1:",[["^ ","^R",60,"^S",100,"^9","index"]]],"~i61",["^ ","~i6",[["^ ","^R",0,"^S",105,"^9","index"]]],"~i63",["^ ","~i0",[["^ ","^R",0,"^S",110],["^ ","^R",38,"^S",110],["^ ","^R",0,"^S",112]],"~i6",[["^ ","^R",0,"^S",110,"^9","instaparse.auto-flatten-seq/advance"]],"^1?",[["^ ","^R",84,"^S",110,"^9","v"]],"^Z",[["^ ","^R",86,"^S",110,"^9","index"]]],"~i64",["^ ","~i2",[["^ ","^R",0,"^S",112],["^ ","^R",0,"^S",119],["^ ","^R",0,"^S",124]]],"~i65",["^ ","~i4",[["^ ","^R",3,"^S",112],["^ ","^R",71,"^S",112]],"~i5",[["^ ","^R",3,"^S",112,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i7",[["^ ","^R",48,"^S",112]],"~i8",[["^ ","^R",48,"^S",112,"^9","cljs.core/count"]],"^U",[["^ ","^R",64,"^S",112,"^9","index"]]],"~i66",["^ ","~i4",[["^ ","^R",0,"^S",113],["^ ","^R",0,"^S",114],["^ ","^R",0,"^S",116]],"^14",[["^ ","^R",3,"^S",113]],"^T",[["^ ","^R",4,"^S",113]],"^U",[["^ ","^R",4,"^S",113,"^9","cljs.core/peek"]],"^V",[["^ ","^R",19,"^S",113,"^9","index"]],"^1G",[["^ ","^R",28,"^S",113],["^ ","^R",230,"^S",113]],"^11",[["^ ","^R",29,"^S",113]],"^[",[["^ ","^R",30,"^S",113,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",101,"^S",113,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",175,"^S",113,"^9","instaparse.auto-flatten-seq/true-count"]],"~i43",[["^ ","^R",170,"^S",113,"^9","v"],["^ ","^R",224,"^S",113,"^9","v"]]],"~i67",["^ ","~i6",[["^ ","^R",0,"^S",114],["^ ","^R",43,"^S",114]],"~i7",[["^ ","^R",7,"^S",114,"^9","instaparse.auto-flatten-seq/delve"]],"^T",[["^ ","^R",41,"^S",114,"^9","v"]],"^15",[["^ ","^R",126,"^S",114],["^ ","^R",151,"^S",114]],"^16",[["^ ","^R",127,"^S",114]],"^X",[["^ ","^R",127,"^S",114,"^9","cljs.core/peek"]],"^19",[["^ ","^R",142,"^S",114,"^9","index"]]],"~i69",["^ ","~i4",[["^ ","^R",3,"^S",119]],"~i7",[["^ ","^R",4,"^S",119]],"~i8",[["^ ","^R",4,"^S",119,"^9","cljs.core/peek"]],"^T",[["^ ","^R",19,"^S",119,"^9","index"]],"^1J",[["^ ","^R",28,"^S",119],["^ ","^R",7,"^S",121]],"~i25",[["^ ","^R",29,"^S",119],["^ ","^R",46,"^S",119,"^9","G__29193"],["^ ","^R",0,"^S",120],["^ ","^R",0,"^S",120],["^ ","^R",148,"^S",120,"^9","G__29193"],["^ ","^R",209,"^S",120,"^9","G__29193"]],"^1G",[["^ ","^R",8,"^S",120,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",79,"^S",120,"^9","instaparse.auto-flatten-seq/true-count"],["^ ","^R",160,"^S",120,"^9","instaparse.auto-flatten-seq/true-count"]],"^12",[["^ ","^R",57,"^S",119]],"^1;",[["^ ","^R",57,"^S",119,"^9","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1=",[["^ ","^R",104,"^S",119,"^9","v"]],"^17",[["^ ","^R",106,"^S",119]],"~i48",[["^ ","^R",106,"^S",119,"^9","cljs.core/pop"]],"^1F",[["^ ","^R",120,"^S",119,"^9","index"]]],"~i70",["^ ","~i4",[["^ ","^R",0,"^S",122]],"~i5",[["^ ","^R",7,"^S",122,"^9","instaparse.auto-flatten-seq/delve"]],"^1E",[["^ ","^R",41,"^S",122,"^9","v"]],"^T",[["^ ","^R",43,"^S",122]],"^U",[["^ ","^R",43,"^S",122,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^R",88,"^S",122]],"^1J",[["^ ","^R",88,"^S",122,"^9","cljs.core/pop"]],"^1A",[["^ ","^R",102,"^S",122,"^9","index"]],"^11",[["^ ","^R",109,"^S",122],["^ ","^R",134,"^S",122]],"^1C",[["^ ","^R",110,"^S",122]],"^12",[["^ ","^R",110,"^S",122,"^9","cljs.core/peek"]],"~i42",[["^ ","^R",125,"^S",122,"^9","index"]]],"~i73",["^ ","~i4",[["^ ","^R",0,"^S",124]],"^1E",[["^ ","^R",15,"^S",124,"^9","v"]],"^T",[["^ ","^R",15,"^S",125]],"^U",[["^ ","^R",15,"^S",125,"^9","cljs.core/pop"]],"^1@",[["^ ","^R",29,"^S",125,"^9","index"]]],"~i75",["^ ","~i0",[["^ ","^R",0,"^S",135],["^ ","^R",0,"^S",135],["^ ","^R",39,"^S",135],["^ ","^R",86,"^S",135,"^9","var_args"],["^ ","^R",0,"^S",136],["^ ","^R",0,"^S",136],["^ ","^R",4,"^S",136,"^9","G__29203"],["^ ","^R",15,"^S",136],["^ ","^R",15,"^S",136],["^ ","^R",0,"^S",137],["^ ","^R",0,"^S",137],["^ ","^R",8,"^S",137,"^9","G__29203"],["^ ","^R",5,"^S",138],["^ ","^R",0,"^S",139],["^ ","^R",7,"^S",139,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",74,"^S",139],["^ ","^R",75,"^S",139],["^ ","^R",85,"^S",139],["^ ","^R",5,"^S",142],["^ ","^R",0,"^S",143],["^ ","^R",7,"^S",143,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",74,"^S",143],["^ ","^R",75,"^S",143],["^ ","^R",85,"^S",143],["^ ","^R",91,"^S",143],["^ ","^R",92,"^S",143],["^ ","^R",102,"^S",143],["^ ","^R",0,"^S",147],["^ ","^R",6,"^S",147],["^ ","^R",11,"^S",147,"^9","js/Error"],["^ ","^R",17,"^S",147],["^ ","^R",18,"^S",147],["^ ","^R",80,"^S",147],["^ ","^R",80,"^S",147],["^ ","^R",0,"^S",152],["^ ","^R",0,"^S",152],["^ ","^R",69,"^S",152],["^ ","^R",0,"^S",153],["^ ","^R",0,"^S",160],["^ ","^R",0,"^S",160],["^ ","^R",69,"^S",160],["^ ","^R",0,"^S",161],["^ ","^R",0,"^S",173],["^ ","^R",0,"^S",173],["^ ","^R",63,"^S",173],["^ ","^R",0,"^S",175]],"~i6",[["^ ","^R",0,"^S",135,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",0,"^S",152,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",0,"^S",160,"^9","instaparse.auto-flatten-seq/flat-seq"],["^ ","^R",0,"^S",173,"^9","instaparse.auto-flatten-seq/flat-seq"]]],"~i76",["^ ","~i4",[["^ ","^R",80,"^S",152,"^9","v"]],"~i7",[["^ ","^R",0,"^S",153],["^ ","^R",0,"^S",156]],"^1E",[["^ ","^R",3,"^S",153],["^ ","^R",25,"^S",153]],"^Z",[["^ ","^R",4,"^S",153]],"^1@",[["^ ","^R",4,"^S",153,"^9","cljs.core/count"]],"^1A",[["^ ","^R",20,"^S",153,"^9","v"]]],"~i77",["^ ","~i9",[["^ ","^R",0,"^S",154]],"^14",[["^ ","^R",7,"^S",154,"^9","instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^R",74,"^S",154,"^9","v"]],"^16",[["^ ","^R",76,"^S",154],["^ ","^R",112,"^S",154],["^ ","^R",195,"^S",154]],"^X",[["^ ","^R",76,"^S",154,"^9","instaparse.auto-flatten-seq/delve"]],"^Y",[["^ ","^R",110,"^S",154,"^9","v"]]],"~i79",["^ ","~i4",[["^ ","^R",80,"^S",160,"^9","v"]],"~i6",[["^ ","^R",82,"^S",160,"^9","index"]]],"~i80",["^ ","~i4",[["^ ","^R",0,"^S",161],["^ ","^R",12,"^S",161,"^9","cljs.core/LazySeq"],["^ ","^R",30,"^S",161],["^ ","^R",35,"^S",161],["^ ","^R",0,"^S",162],["^ ","^R",3,"^S",170],["^ ","^R",8,"^S",170]]],"~i81",["^ ","~i6",[["^ ","^R",0,"^S",162]],"~i7",[["^ ","^R",7,"^S",162,"^9","cljs.core/cons"]],"^W",[["^ ","^R",22,"^S",162]],"^T",[["^ ","^R",22,"^S",162,"^9","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^R",69,"^S",162,"^9","v"]],"^X",[["^ ","^R",71,"^S",162,"^9","index"]]],"~i82",["^ ","^W",[["^ ","^R",78,"^S",162],["^ ","^R",95,"^S",162,"^9","temp__5457__auto__"],["^ ","^R",0,"^S",163],["^ ","^R",0,"^S",163],["^ ","^R",20,"^S",163,"^9","temp__5457__auto__"],["^ ","^R",0,"^S",164],["^ ","^R",0,"^S",164],["^ ","^R",17,"^S",164,"^9","temp__5457__auto__"],["^ ","^R",0,"^S",165],["^ ","^R",0,"^S",167]],"^1K",[["^ ","^R",4,"^S",164,"^9","next-index"]],"^1H",[["^ ","^R",116,"^S",162]],"~i35",[["^ ","^R",116,"^S",162,"^9","instaparse.auto-flatten-seq/advance"]],"^1X",[["^ ","^R",152,"^S",162,"^9","v"]],"^1=",[["^ ","^R",154,"^S",162,"^9","index"]]],"~i83",["^ ","^U",[["^ ","^R",0,"^S",165]],"^1?",[["^ ","^R",7,"^S",165,"^9","instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2"]],"^1A",[["^ ","^R",74,"^S",165,"^9","v"]],"^1G",[["^ ","^R",76,"^S",165,"^9","next-index"]]],"~i166",["^ ","~i0",[["^ ","^R",0,"^S",175],["^ ","^R",0,"^S",175],["^ ","^R",0,"^S",202],["^ ","^R",0,"^S",202],["^ ","^R",0,"^S",202],["^ ","^R",0,"^S",202],["^ ","^R",64,"^S",202],["^ ","^R",0,"^S",204],["^ ","^R",0,"^S",204],["^ ","^R",11,"^S",204],["^ ","^R",0,"^S",205],["^ ","^R",0,"^S",208],["^ ","^R",0,"^S",208],["^ ","^R",0,"^S",208],["^ ","^R",89,"^S",208],["^ ","^R",0,"^S",210],["^ ","^R",0,"^S",210],["^ ","^R",15,"^S",210],["^ ","^R",0,"^S",211],["^ ","^R",0,"^S",214],["^ ","^R",0,"^S",214],["^ ","^R",0,"^S",214],["^ ","^R",89,"^S",214],["^ ","^R",0,"^S",216],["^ ","^R",0,"^S",216],["^ ","^R",15,"^S",216],["^ ","^R",0,"^S",217],["^ ","^R",0,"^S",220],["^ ","^R",0,"^S",220],["^ ","^R",0,"^S",220],["^ ","^R",85,"^S",220],["^ ","^R",0,"^S",222],["^ ","^R",0,"^S",222],["^ ","^R",15,"^S",222],["^ ","^R",0,"^S",223],["^ ","^R",0,"^S",226],["^ ","^R",0,"^S",226],["^ ","^R",0,"^S",226],["^ ","^R",85,"^S",226],["^ ","^R",0,"^S",228],["^ ","^R",0,"^S",228],["^ ","^R",15,"^S",228],["^ ","^R",0,"^S",229],["^ ","^R",0,"^S",232],["^ ","^R",0,"^S",232],["^ ","^R",0,"^S",232],["^ ","^R",89,"^S",232],["^ ","^R",0,"^S",234],["^ ","^R",0,"^S",234],["^ ","^R",15,"^S",234],["^ ","^R",0,"^S",235],["^ ","^R",0,"^S",238],["^ ","^R",0,"^S",238],["^ ","^R",0,"^S",238],["^ ","^R",85,"^S",238],["^ ","^R",0,"^S",240],["^ ","^R",0,"^S",240],["^ ","^R",15,"^S",240],["^ ","^R",0,"^S",241],["^ ","^R",0,"^S",244],["^ ","^R",0,"^S",244],["^ ","^R",0,"^S",244],["^ ","^R",87,"^S",244],["^ ","^R",0,"^S",246],["^ ","^R",0,"^S",246],["^ ","^R",15,"^S",246],["^ ","^R",0,"^S",247],["^ ","^R",0,"^S",250],["^ ","^R",0,"^S",250],["^ ","^R",0,"^S",250],["^ ","^R",101,"^S",250],["^ ","^R",0,"^S",252],["^ ","^R",0,"^S",252],["^ ","^R",15,"^S",252],["^ ","^R",0,"^S",253],["^ ","^R",0,"^S",256],["^ ","^R",0,"^S",256],["^ ","^R",0,"^S",256],["^ ","^R",85,"^S",256],["^ ","^R",0,"^S",258],["^ ","^R",0,"^S",258],["^ ","^R",15,"^S",258],["^ ","^R",0,"^S",259],["^ ","^R",0,"^S",262],["^ ","^R",0,"^S",262],["^ ","^R",0,"^S",262],["^ ","^R",84,"^S",262],["^ ","^R",0,"^S",264],["^ ","^R",0,"^S",264],["^ ","^R",15,"^S",264],["^ ","^R",0,"^S",265],["^ ","^R",0,"^S",268],["^ ","^R",0,"^S",268],["^ ","^R",0,"^S",268],["^ ","^R",87,"^S",268],["^ ","^R",0,"^S",270],["^ ","^R",0,"^S",270],["^ ","^R",15,"^S",270],["^ ","^R",0,"^S",271],["^ ","^R",0,"^S",280],["^ ","^R",0,"^S",280],["^ ","^R",0,"^S",280],["^ ","^R",94,"^S",280],["^ ","^R",0,"^S",282],["^ ","^R",0,"^S",282],["^ ","^R",15,"^S",282],["^ ","^R",0,"^S",283],["^ ","^R",0,"^S",286],["^ ","^R",0,"^S",286],["^ ","^R",0,"^S",286],["^ ","^R",91,"^S",286],["^ ","^R",0,"^S",288],["^ ","^R",0,"^S",288],["^ ","^R",15,"^S",288],["^ ","^R",0,"^S",289],["^ ","^R",0,"^S",292],["^ ","^R",0,"^S",292],["^ ","^R",0,"^S",292],["^ ","^R",93,"^S",292,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",294],["^ ","^R",0,"^S",294],["^ ","^R",0,"^S",294],["^ ","^R",110,"^S",294],["^ ","^R",0,"^S",296],["^ ","^R",0,"^S",296],["^ ","^R",15,"^S",296],["^ ","^R",0,"^S",297],["^ ","^R",0,"^S",330],["^ ","^R",0,"^S",330],["^ ","^R",0,"^S",330],["^ ","^R",114,"^S",330],["^ ","^R",0,"^S",332],["^ ","^R",0,"^S",332],["^ ","^R",15,"^S",332],["^ ","^R",0,"^S",333],["^ ","^R",0,"^S",336],["^ ","^R",0,"^S",336],["^ ","^R",54,"^S",336],["^ ","^R",0,"^S",337],["^ ","^R",0,"^S",337],["^ ","^R",90,"^S",337],["^ ","^R",110,"^S",337],["^ ","^R",161,"^S",337],["^ ","^R",204,"^S",337],["^ ","^R",256,"^S",337],["^ ","^R",346,"^S",337],["^ ","^R",366,"^S",337],["^ ","^R",446,"^S",337],["^ ","^R",489,"^S",337],["^ ","^R",541,"^S",337],["^ ","^R",612,"^S",337],["^ ","^R",632,"^S",337],["^ ","^R",697,"^S",337],["^ ","^R",740,"^S",337],["^ ","^R",792,"^S",337],["^ ","^R",863,"^S",337],["^ ","^R",883,"^S",337],["^ ","^R",938,"^S",337],["^ ","^R",981,"^S",337],["^ ","^R",1033,"^S",337],["^ ","^R",1104,"^S",337],["^ ","^R",1124,"^S",337],["^ ","^R",1184,"^S",337],["^ ","^R",1227,"^S",337],["^ ","^R",1279,"^S",337],["^ ","^R",1351,"^S",337],["^ ","^R",1371,"^S",337],["^ ","^R",1440,"^S",337],["^ ","^R",1483,"^S",337],["^ ","^R",1535,"^S",337],["^ ","^R",1592,"^S",337],["^ ","^R",1681,"^S",337],["^ ","^R",0,"^S",340],["^ ","^R",0,"^S",340],["^ ","^R",60,"^S",340],["^ ","^R",0,"^S",342],["^ ","^R",0,"^S",342],["^ ","^R",63,"^S",342],["^ ","^R",0,"^S",344],["^ ","^R",0,"^S",344],["^ ","^R",68,"^S",344],["^ ","^R",79,"^S",344,"^9","this__5797__auto__"],["^ ","^R",98,"^S",344,"^9","writer__5798__auto__"],["^ ","^R",119,"^S",344,"^9","opt__5799__auto__"],["^ ","^R",0,"^S",345],["^ ","^R",0,"^S",345],["^ ","^R",7,"^S",345,"^9","cljs.core/-write"],["^ ","^R",24,"^S",345,"^9","writer__5798__auto__"],["^ ","^R",45,"^S",345],["^ ","^R",0,"^S",348],["^ ","^R",50,"^S",348],["^ ","^R",0,"^S",349],["^ ","^R",0,"^S",349],["^ ","^R",12,"^S",349,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]],"~i9",[["^ ","^R",0,"^S",202,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",208,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",214,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",220,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",226,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",232,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",238,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",244,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",250,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",256,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",262,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",268,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",280,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",286,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",292,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",294,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",330,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",336,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",340,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",342,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",344,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",348,"^9","instaparse.auto-flatten-seq/->AutoFlattenSeq"],["^ ","^R",0,"^S",352,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]],"^1X",[["^ ","^R",108,"^S",348,"^9","v"],["^ ","^R",55,"^S",349,"^9","v"]],"^1I",[["^ ","^R",110,"^S",348,"^9","premix-hashcode"],["^ ","^R",57,"^S",349,"^9","premix-hashcode"]],"^26",[["^ ","^R",126,"^S",348,"^9","hashcode"],["^ ","^R",73,"^S",349,"^9","hashcode"]],"~i94",[["^ ","^R",135,"^S",348,"^9","cnt"],["^ ","^R",82,"^S",349,"^9","cnt"]],"~i107",[["^ ","^R",139,"^S",348,"^9","dirty"],["^ ","^R",86,"^S",349,"^9","dirty"]]],"~i167",["^ ","^1N",[["^ ","^R",145,"^S",348,"^9","cached-seq"],["^ ","^R",92,"^S",349,"^9","cached-seq"]]],"~i169",["^ ","^T",[["^ ","^R",4,"^S",204,"^9","self"]],"^V",[["^ ","^R",0,"^S",205]],"^1J",[["^ ","^R",7,"^S",205,"^9","cljs.core/pr-str*"]],"^Y",[["^ ","^R",30,"^S",205]],"^1:",[["^ ","^R",30,"^S",205,"^9","cljs.core/seq"]],"^10",[["^ ","^R",44,"^S",205,"^9","self"]]],"~i171",["^ ","^14",[["^ ","^R",96,"^S",238,"^9","self"],["^ ","^R",4,"^S",240,"^9","self"]],"^15",[["^ ","^R",0,"^S",241,"^9","hashcode"]]],"~i174",["^ ","^1E",[["^ ","^R",96,"^S",256,"^9","self"],["^ ","^R",4,"^S",258,"^9","self"]],"^Z",[["^ ","^R",0,"^S",259]],"^1@",[["^ ","^R",7,"^S",259,"^9","cljs.core/first"]],"^1A",[["^ ","^R",23,"^S",259]],"^1[",[["^ ","^R",23,"^S",259,"^9","cljs.core/seq"]],"^1:",[["^ ","^R",37,"^S",259,"^9","self"]]],"~i175",["^ ","^14",[["^ ","^R",95,"^S",262,"^9","self"],["^ ","^R",4,"^S",264,"^9","self"]],"^15",[["^ ","^R",0,"^S",265]],"^Z",[["^ ","^R",7,"^S",265,"^9","cljs.core/rest"]],"^X",[["^ ","^R",22,"^S",265]],"^1K",[["^ ","^R",22,"^S",265,"^9","cljs.core/seq"]],"^19",[["^ ","^R",36,"^S",265,"^9","self"]]],"~i177",["^ ","^1E",[["^ ","^R",98,"^S",244,"^9","self"],["^ ","^R",4,"^S",246,"^9","self"]],"^15",[["^ ","^R",103,"^S",244,"^9","other"]]],"~i178",["^ ","~i4",[["^ ","^R",0,"^S",247]]],"~i179",["^ ","~i9",[["^ ","^R",8,"^S",247]],"^14",[["^ ","^R",8,"^S",247,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^W",[["^ ","^R",53,"^S",247,"^9","hashcode"]],"^16",[["^ ","^R",69,"^S",247]],"^X",[["^ ","^R",69,"^S",247,"^9","cljs.core/hash"]],"^19",[["^ ","^R",84,"^S",247,"^9","other"]]],"~i180",["^ ","~i9",[["^ ","^R",97,"^S",247]],"^14",[["^ ","^R",97,"^S",247,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^W",[["^ ","^R",142,"^S",247,"^9","cnt"]],"^15",[["^ ","^R",153,"^S",247]],"^Z",[["^ ","^R",153,"^S",247,"^9","cljs.core/count"]],"^1K",[["^ ","^R",169,"^S",247,"^9","other"]]],"~i181",["^ ","~i9",[["^ ","^R",182,"^S",247]],"^T",[["^ ","^R",183,"^S",247],["^ ","^R",239,"^S",247]],"^U",[["^ ","^R",183,"^S",247,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^15",[["^ ","^R",228,"^S",247,"^9","cnt"]]],"~i182",["^ ","^T",[["^ ","^R",249,"^S",247]],"^U",[["^ ","^R",249,"^S",247,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^15",[["^ ","^R",294,"^S",247]],"^Z",[["^ ","^R",294,"^S",247,"^9","cljs.core/seq"]],"^16",[["^ ","^R",308,"^S",247,"^9","self"]],"^19",[["^ ","^R",318,"^S",247,"^9","other"]]],"~i184",["^ ","^14",[["^ ","^R",102,"^S",286,"^9","self"],["^ ","^R",4,"^S",288,"^9","self"]],"^1?",[["^ ","^R",107,"^S",286,"^9","o"]],"^1@",[["^ ","^R",0,"^S",289]],"^V",[["^ ","^R",7,"^S",289,"^9","cljs.core/cons"]],"^1A",[["^ ","^R",22,"^S",289,"^9","o"]],"^1G",[["^ ","^R",24,"^S",289,"^9","self"]]],"~i186",["^ ","^1E",[["^ ","^R",112,"^S",250,"^9","self"],["^ ","^R",4,"^S",252,"^9","self"]],"^Z",[["^ ","^R",0,"^S",253]],"^1@",[["^ ","^R",7,"^S",253,"^9","cljs.core/with-meta"]],"^Y",[["^ ","^R",27,"^S",253,"^9","instaparse.auto-flatten-seq/EMPTY"]],"^1H",[["^ ","^R",61,"^S",253]],"^2;",[["^ ","^R",61,"^S",253,"^9","cljs.core/meta"]],"^1<",[["^ ","^R",76,"^S",253,"^9","self"]]],"~i188",["^ ","^14",[["^ ","^R",96,"^S",226,"^9","self"],["^ ","^R",4,"^S",228,"^9","self"]],"^15",[["^ ","^R",0,"^S",229]],"^Z",[["^ ","^R",7,"^S",229,"^9","cljs.core/next"]],"^X",[["^ ","^R",22,"^S",229]],"^1K",[["^ ","^R",22,"^S",229,"^9","cljs.core/seq"]],"^19",[["^ ","^R",36,"^S",229,"^9","self"]]],"~i190",["^ ","^U",[["^ ","^R",121,"^S",294,"^9","self"],["^ ","^R",4,"^S",296,"^9","self"]],"^V",[["^ ","^R",126,"^S",294,"^9","obj"]]],"~i191",["^ ","~i4",[["^ ","^R",0,"^S",297],["^ ","^R",0,"^S",300],["^ ","^R",0,"^S",322]]],"~i192",["^ ","~i6",[["^ ","^R",3,"^S",297],["^ ","^R",11,"^S",297]],"^W",[["^ ","^R",4,"^S",297,"^9","obj"]],"^Z",[["^ ","^R",0,"^S",298,"^9","self"]]],"~i193",["^ ","~i6",[["^ ","^R",20,"^S",300]],"~i7",[["^ ","^R",21,"^S",300,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",92,"^S",300,"^9","instaparse.auto-flatten-seq/afs?"],["^ ","^R",168,"^S",300,"^9","instaparse.auto-flatten-seq/afs?"]],"^W",[["^ ","^R",161,"^S",300,"^9","obj"],["^ ","^R",217,"^S",300,"^9","obj"]]],"~i194",["^ ","~i6",[["^ ","^R",0,"^S",301],["^ ","^R",0,"^S",304],["^ ","^R",0,"^S",315]]],"~i195",["^ ","~i8",[["^ ","^R",3,"^S",301],["^ ","^R",19,"^S",301]],"^1?",[["^ ","^R",4,"^S",301,"^9","cnt"]],"^1J",[["^ ","^R",0,"^S",302,"^9","obj"]]],"~i196",["^ ","~i8",[["^ ","^R",3,"^S",304]],"^W",[["^ ","^R",4,"^S",304]],"^T",[["^ ","^R",4,"^S",304,"^9","cljs.core/count"]],"^V",[["^ ","^R",20,"^S",304,"^9","obj"]],"^1A",[["^ ","^R",28,"^S",304,"^9","instaparse.auto-flatten-seq/threshold"],["^ ","^R",28,"^S",304]]],"~i197",["^ ","~i8",[["^ ","^R",0,"^S",305],["^ ","^R",0,"^S",307]],"^U",[["^ ","^R",4,"^S",305,"^9","phc"]],"^1@",[["^ ","^R",10,"^S",305]],"^V",[["^ ","^R",11,"^S",305,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",80,"^S",305,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",163,"^S",305,"^9","instaparse.auto-flatten-seq/hash-cat"]],"^Y",[["^ ","^R",147,"^S",305,"^9","self"],["^ ","^R",210,"^S",305,"^9","self"]],"^10",[["^ ","^R",156,"^S",305,"^9","obj"],["^ ","^R",219,"^S",305,"^9","obj"]]],"~i198",["^ ","^U",[["^ ","^R",4,"^S",306,"^9","new-cnt"]],"^X",[["^ ","^R",14,"^S",306]],"^1[",[["^ ","^R",15,"^S",306,"^9","cnt"]],"^1:",[["^ ","^R",28,"^S",306]],"^1B",[["^ ","^R",28,"^S",306,"^9","cljs.core/count"]],"^1C",[["^ ","^R",44,"^S",306,"^9","obj"]]],"~i199",["^ ","^14",[["^ ","^R",0,"^S",307],["^ ","^R",12,"^S",307,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",5,"^S",313]],"^19",[["^ ","^R",55,"^S",307]],"^Y",[["^ ","^R",55,"^S",307,"^9","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^10",[["^ ","^R",100,"^S",307,"^9","v"]],"^2;",[["^ ","^R",109,"^S",307,"^9","obj"]],"^1<",[["^ ","^R",114,"^S",307,"^9","phc"]],"~i44",[["^ ","^R",118,"^S",307]],"^1=",[["^ ","^R",118,"^S",307,"^9","cljs.core/mix-collection-hash"]],"^1V",[["^ ","^R",148,"^S",307,"^9","phc"]],"^1Z",[["^ ","^R",152,"^S",307,"^9","new-cnt"]],"~i78",[["^ ","^R",161,"^S",307,"^9","new-cnt"]]],"~i200",["^ ","^19",[["^ ","^R",169,"^S",307],["^ ","^R",186,"^S",307,"^9","or__5126__auto__"],["^ ","^R",0,"^S",308],["^ ","^R",0,"^S",308],["^ ","^R",3,"^S",308,"^9","or__5126__auto__"],["^ ","^R",0,"^S",309,"^9","or__5126__auto__"]],"^11",[["^ ","^R",205,"^S",307,"^9","dirty"]],"^12",[["^ ","^R",0,"^S",311]],"~i62",[["^ ","^R",7,"^S",311,"^9","obj"]]],"~i202",["^ ","~i8",[["^ ","^R",0,"^S",315],["^ ","^R",0,"^S",317]],"^U",[["^ ","^R",4,"^S",315,"^9","phc"]],"^1@",[["^ ","^R",10,"^S",315]],"^V",[["^ ","^R",11,"^S",315,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",80,"^S",315,"^9","instaparse.auto-flatten-seq/hash-cat"],["^ ","^R",163,"^S",315,"^9","instaparse.auto-flatten-seq/hash-cat"]],"^Y",[["^ ","^R",147,"^S",315,"^9","self"],["^ ","^R",210,"^S",315,"^9","self"]],"^10",[["^ ","^R",156,"^S",315,"^9","obj"],["^ ","^R",219,"^S",315,"^9","obj"]]],"~i203",["^ ","^U",[["^ ","^R",4,"^S",316,"^9","new-cnt"]],"^X",[["^ ","^R",14,"^S",316]],"^1[",[["^ ","^R",15,"^S",316,"^9","cnt"]],"^1:",[["^ ","^R",28,"^S",316]],"^1B",[["^ ","^R",28,"^S",316,"^9","cljs.core/count"]],"^1C",[["^ ","^R",44,"^S",316,"^9","obj"]]],"~i204",["^ ","^14",[["^ ","^R",0,"^S",317],["^ ","^R",12,"^S",317,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",169,"^S",317],["^ ","^R",174,"^S",317]],"^19",[["^ ","^R",55,"^S",317]],"^Y",[["^ ","^R",55,"^S",317,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^10",[["^ ","^R",100,"^S",317,"^9","v"]],"^2;",[["^ ","^R",109,"^S",317,"^9","obj"]],"^1<",[["^ ","^R",114,"^S",317,"^9","phc"]],"^2X",[["^ ","^R",118,"^S",317]],"^1=",[["^ ","^R",118,"^S",317,"^9","cljs.core/mix-collection-hash"]],"^1V",[["^ ","^R",148,"^S",317,"^9","phc"]],"^1Z",[["^ ","^R",152,"^S",317,"^9","new-cnt"]],"^2Y",[["^ ","^R",161,"^S",317,"^9","new-cnt"]]],"~i207",["^ ","~i6",[["^ ","^R",0,"^S",322],["^ ","^R",0,"^S",324]],"^W",[["^ ","^R",4,"^S",322,"^9","phc"]],"^15",[["^ ","^R",10,"^S",322]],"^Z",[["^ ","^R",10,"^S",322,"^9","instaparse.auto-flatten-seq/hash-conj"]],"^19",[["^ ","^R",48,"^S",322,"^9","premix-hashcode"]],"^1X",[["^ ","^R",71,"^S",322,"^9","obj"]]],"~i208",["^ ","^W",[["^ ","^R",4,"^S",323,"^9","new-cnt"]],"^1J",[["^ ","^R",14,"^S",323],["^ ","^R",28,"^S",323]],"^1[",[["^ ","^R",15,"^S",323,"^9","cnt"]]],"~i209",["^ ","~i8",[["^ ","^R",0,"^S",324],["^ ","^R",12,"^S",324,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",182,"^S",324]],"^1[",[["^ ","^R",55,"^S",324]],"^1G",[["^ ","^R",55,"^S",324,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^11",[["^ ","^R",100,"^S",324,"^9","v"]],"^10",[["^ ","^R",109,"^S",324,"^9","obj"]],"^1;",[["^ ","^R",114,"^S",324,"^9","phc"]],"^22",[["^ ","^R",118,"^S",324]],"^1X",[["^ ","^R",118,"^S",324,"^9","cljs.core/mix-collection-hash"]],"^1T",[["^ ","^R",148,"^S",324,"^9","phc"]],"^1Y",[["^ ","^R",152,"^S",324,"^9","new-cnt"]],"^25",[["^ ","^R",161,"^S",324,"^9","new-cnt"]],"~i84",[["^ ","^R",169,"^S",324,"^9","dirty"]]],"~i210",["^ ","^W",[["^ ","^R",125,"^S",330,"^9","self"],["^ ","^R",4,"^S",332,"^9","self"]],"^1@",[["^ ","^R",0,"^S",333,"^9","cached-seq"]]],"~i212",["^ ","^1E",[["^ ","^R",100,"^S",232,"^9","self"],["^ ","^R",4,"^S",234,"^9","self"]],"^Z",[["^ ","^R",0,"^S",235,"^9","cnt"]]],"~i214",["^ ","^W",[["^ ","^R",100,"^S",208,"^9","self"],["^ ","^R",4,"^S",210,"^9","self"]],"^Z",[["^ ","^R",105,"^S",208,"^9","key"]]],"~i215",["^ ","~i4",[["^ ","^R",0,"^S",211]],"~i5",[["^ ","^R",7,"^S",211,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",55,"^S",211,"^9","v"]],"^1?",[["^ ","^R",64,"^S",211,"^9","key"]]],"~i216",["^ ","^W",[["^ ","^R",100,"^S",214,"^9","self"],["^ ","^R",4,"^S",216,"^9","self"]],"^Z",[["^ ","^R",105,"^S",214,"^9","key"]],"^16",[["^ ","^R",109,"^S",214,"^9","not-found"]]],"~i217",["^ ","~i4",[["^ ","^R",0,"^S",217]],"~i5",[["^ ","^R",7,"^S",217,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3"]],"^T",[["^ ","^R",55,"^S",217,"^9","v"]],"^1?",[["^ ","^R",64,"^S",217,"^9","key"]],"^V",[["^ ","^R",68,"^S",217,"^9","not-found"]]],"~i219",["^ ","^1?",[["^ ","^R",105,"^S",280,"^9","self"],["^ ","^R",4,"^S",282,"^9","self"]],"^1J",[["^ ","^R",110,"^S",280,"^9","metamap"]]],"~i220",["^ ","~i4",[["^ ","^R",0,"^S",283],["^ ","^R",12,"^S",283,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",156,"^S",283]],"^16",[["^ ","^R",55,"^S",283]],"^X",[["^ ","^R",55,"^S",283,"^9","cljs.core/with-meta"]],"^[",[["^ ","^R",75,"^S",283,"^9","v"]],"^1H",[["^ ","^R",84,"^S",283,"^9","metamap"]],"^1X",[["^ ","^R",93,"^S",283,"^9","premix-hashcode"]],"^1Q",[["^ ","^R",116,"^S",283,"^9","hashcode"]],"~i68",[["^ ","^R",132,"^S",283,"^9","cnt"]],"~i72",[["^ ","^R",143,"^S",283,"^9","dirty"]]],"~i222",["^ ","^14",[["^ ","^R",96,"^S",220,"^9","self"],["^ ","^R",4,"^S",222,"^9","self"]]],"~i223",["^ ","~i4",[["^ ","^R",0,"^S",223]],"~i5",[["^ ","^R",7,"^S",223,"^9","cljs.core/meta"]],"^14",[["^ ","^R",22,"^S",223,"^9","v"]]],"~i225",["^ ","~i9",[["^ ","^R",98,"^S",268,"^9","self"],["^ ","^R",4,"^S",270,"^9","self"]]],"~i226",["^ ","~i4",[["^ ","^R",0,"^S",271]],"~i8",[["^ ","^R",20,"^S",271,"^9","cached-seq"]],"^V",[["^ ","^R",0,"^S",272,"^9","cached-seq"]]],"~i227",["^ ","~i6",[["^ ","^R",0,"^S",274]]],"~i228",["^ ","~i8",[["^ ","^R",0,"^S",274]],"^U",[["^ ","^R",0,"^S",274,"^9","cached-seq"]],"^1[",[["^ ","^R",20,"^S",274]],"^1:",[["^ ","^R",22,"^S",274,"^9","dirty"]],"^2;",[["^ ","^R",36,"^S",274]],"^1C",[["^ ","^R",36,"^S",274,"^9","instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1"]],"^1=",[["^ ","^R",103,"^S",274,"^9","v"]],"^20",[["^ ","^R",113,"^S",274]],"^18",[["^ ","^R",113,"^S",274,"^9","cljs.core/seq"]],"^1I",[["^ ","^R",127,"^S",274,"^9","v"]]],"~i229",["^ ","~i8",[["^ ","^R",0,"^S",276,"^9","cached-seq"]]],"~i239",["^ ","~i3",[["^ ","^R",0,"^S",352],["^ ","^R",39,"^S",352],["^ ","^R",0,"^S",353]],"^14",[["^ ","^R",0,"^S",352,"^9","instaparse.auto-flatten-seq/hash-cat"]],"^2X",[["^ ","^R",86,"^S",352,"^9","v1"]],"^1T",[["^ ","^R",89,"^S",352,"^9","v2"]]],"~i240",["^ ","~i5",[["^ ","^R",0,"^S",353],["^ ","^R",0,"^S",355]],"^1E",[["^ ","^R",4,"^S",353,"^9","c"]],"^T",[["^ ","^R",8,"^S",353]],"^U",[["^ ","^R",8,"^S",353,"^9","cljs.core/count"]],"^1J",[["^ ","^R",24,"^S",353,"^9","v2"]]],"~i241",["^ ","^1E",[["^ ","^R",4,"^S",354,"^9","e"]],"^T",[["^ ","^R",8,"^S",354],["^ ","^R",52,"^S",354]],"^1@",[["^ ","^R",9,"^S",354],["^ ","^R",42,"^S",354]],"^V",[["^ ","^R",9,"^S",354,"^9","instaparse.auto-flatten-seq/expt"]],"^19",[["^ ","^R",47,"^S",354,"^9","c"]]],"~i242",["^ ","~i7",[["^ ","^R",0,"^S",355]],"^14",[["^ ","^R",8,"^S",355]],"^1E",[["^ ","^R",8,"^S",355,"^9","cljs.core/imul"]],"^15",[["^ ","^R",23,"^S",355,"^9","e"]],"^1@",[["^ ","^R",25,"^S",355]],"^12",[["^ ","^R",25,"^S",355,"^9","v1"]]],"~i243",["^ ","^14",[["^ ","^R",47,"^S",355]],"^T",[["^ ","^R",48,"^S",355]],"^[",[["^ ","^R",48,"^S",355,"^9","v2"]],"^1C",[["^ ","^R",69,"^S",355,"^9","e"]]],"~i259",["^ ","~i3",[["^ ","^R",0,"^S",357],["^ ","^R",0,"^S",357],["^ ","^R",60,"^S",360],["^ ","^R",128,"^S",360,"^9","var_args"],["^ ","^R",0,"^S",361],["^ ","^R",0,"^S",361],["^ ","^R",4,"^S",361,"^9","G__29216"],["^ ","^R",15,"^S",361],["^ ","^R",15,"^S",361],["^ ","^R",0,"^S",362],["^ ","^R",0,"^S",362],["^ ","^R",8,"^S",362,"^9","G__29216"],["^ ","^R",5,"^S",363],["^ ","^R",0,"^S",364],["^ ","^R",7,"^S",364,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",95,"^S",364],["^ ","^R",96,"^S",364],["^ ","^R",106,"^S",364],["^ ","^R",5,"^S",367],["^ ","^R",0,"^S",368],["^ ","^R",7,"^S",368,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",95,"^S",368],["^ ","^R",96,"^S",368],["^ ","^R",106,"^S",368],["^ ","^R",112,"^S",368],["^ ","^R",113,"^S",368],["^ ","^R",123,"^S",368],["^ ","^R",0,"^S",372],["^ ","^R",6,"^S",372],["^ ","^R",11,"^S",372,"^9","js/Error"],["^ ","^R",17,"^S",372],["^ ","^R",18,"^S",372],["^ ","^R",80,"^S",372],["^ ","^R",80,"^S",372],["^ ","^R",0,"^S",377],["^ ","^R",0,"^S",377],["^ ","^R",90,"^S",377],["^ ","^R",0,"^S",378],["^ ","^R",0,"^S",381],["^ ","^R",0,"^S",381],["^ ","^R",90,"^S",381],["^ ","^R",0,"^S",382],["^ ","^R",0,"^S",398],["^ ","^R",0,"^S",398],["^ ","^R",84,"^S",398],["^ ","^R",0,"^S",400]],"^Z",[["^ ","^R",0,"^S",360,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",0,"^S",377,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",0,"^S",381,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"],["^ ","^R",0,"^S",398,"^9","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"]]],"~i261",["^ ","~i7",[["^ ","^R",101,"^S",377,"^9","coll"]]],"~i262",["^ ","~i6",[["^ ","^R",0,"^S",378],["^ ","^R",95,"^S",378]],"~i7",[["^ ","^R",7,"^S",378,"^9","instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2"]],"^1M",[["^ ","^R",99,"^S",378,"^9","coll"]]],"~i263",["^ ","~i7",[["^ ","^R",101,"^S",381,"^9","existing-unmixed-hash"]],"^1:",[["^ ","^R",123,"^S",381,"^9","coll"]]],"~i264",["^ ","~i6",[["^ ","^R",0,"^S",382],["^ ","^R",0,"^S",385]],"^T",[["^ ","^R",4,"^S",382,"^9","unmixed-hash"]],"^1G",[["^ ","^R",19,"^S",382,"^9","existing-unmixed-hash"]]],"~i265",["^ ","^T",[["^ ","^R",4,"^S",383,"^9","coll"]],"^1@",[["^ ","^R",15,"^S",383]],"^V",[["^ ","^R",15,"^S",383,"^9","cljs.core/seq"]],"^1K",[["^ ","^R",29,"^S",383,"^9","coll"]]],"~i266",["^ ","~i8",[["^ ","^R",0,"^S",385],["^ ","^R",3,"^S",385]],"^15",[["^ ","^R",5,"^S",385],["^ ","^R",18,"^S",385]],"^X",[["^ ","^R",6,"^S",385,"^9","coll"]]],"~i267",["^ ","^14",[["^ ","^R",0,"^S",386]],"^Z",[["^ ","^R",15,"^S",386],["^ ","^R",98,"^S",386]],"^1[",[["^ ","^R",16,"^S",386]],"^Y",[["^ ","^R",17,"^S",386],["^ ","^R",32,"^S",386]],"^1:",[["^ ","^R",17,"^S",386,"^9","cljs.core/imul"]],"^12",[["^ ","^R",37,"^S",386,"^9","unmixed-hash"]],"^1D",[["^ ","^R",53,"^S",386]],"^1F",[["^ ","^R",53,"^S",386,"^9","cljs.core/hash"]],"^1O",[["^ ","^R",68,"^S",386]],"^1P",[["^ ","^R",68,"^S",386,"^9","cljs.core/first"]],"^1U",[["^ ","^R",84,"^S",386,"^9","coll"]]],"~i268",["^ ","^Z",[["^ ","^R",15,"^S",387]],"^1@",[["^ ","^R",15,"^S",387,"^9","cljs.core/next"]],"^1K",[["^ ","^R",30,"^S",387,"^9","coll"]]],"~i269",["^ ","^14",[["^ ","^R",0,"^S",392,"^9","unmixed-hash"]]],"~i272",["^ ","~i3",[["^ ","^R",0,"^S",400],["^ ","^R",0,"^S",400],["^ ","^R",0,"^S",400],["^ ","^R",0,"^S",400],["^ ","^R",0,"^S",400],["^ ","^R",83,"^S",400,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",402],["^ ","^R",0,"^S",402],["^ ","^R",0,"^S",402]]],"~i273",["^ ","~i5",[["^ ","^R",0,"^S",400,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",0,"^S",402,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]]],"~i274",["^ ","~i5",[["^ ","^R",101,"^S",402],["^ ","^R",0,"^S",403],["^ ","^R",0,"^S",403],["^ ","^R",14,"^S",403],["^ ","^R",0,"^S",404]],"^1@",[["^ ","^R",112,"^S",402,"^9","afs"],["^ ","^R",4,"^S",403,"^9","afs"]],"^X",[["^ ","^R",116,"^S",402,"^9","writer"]],"^1:",[["^ ","^R",123,"^S",402,"^9","opts"]]],"~i275",["^ ","~i7",[["^ ","^R",0,"^S",404]],"~i8",[["^ ","^R",7,"^S",404,"^9","cljs.core/-pr-writer"]],"^V",[["^ ","^R",28,"^S",404]],"^1J",[["^ ","^R",28,"^S",404,"^9","cljs.core/seq"]],"^1A",[["^ ","^R",42,"^S",404,"^9","afs"]],"^1:",[["^ ","^R",51,"^S",404,"^9","writer"]],"^1C",[["^ ","^R",58,"^S",404,"^9","opts"]]],"~i277",["^ ","~i0",[["^ ","^R",0,"^S",406],["^ ","^R",47,"^S",406],["^ ","^R",0,"^S",407]],"~i6",[["^ ","^R",0,"^S",406,"^9","instaparse.auto-flatten-seq/auto-flatten-seq"]],"^1A",[["^ ","^R",102,"^S",406,"^9","v"]]],"~i278",["^ ","~i2",[["^ ","^R",0,"^S",407],["^ ","^R",0,"^S",408]],"~i8",[["^ ","^R",4,"^S",407,"^9","v"]],"^14",[["^ ","^R",12,"^S",407]],"^1E",[["^ ","^R",12,"^S",407,"^9","cljs.core/vec"]],"^1?",[["^ ","^R",26,"^S",407,"^9","v"]]],"~i279",["^ ","~i4",[["^ ","^R",0,"^S",408],["^ ","^R",12,"^S",408,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"],["^ ","^R",201,"^S",408],["^ ","^R",207,"^S",408]],"^16",[["^ ","^R",55,"^S",408,"^9","v"]]],"~i280",["^ ","^16",[["^ ","^R",61,"^S",408]],"^X",[["^ ","^R",61,"^S",408,"^9","instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1"]],"^1F",[["^ ","^R",149,"^S",408,"^9","v"]]],"~i281",["^ ","^16",[["^ ","^R",156,"^S",408]],"^X",[["^ ","^R",156,"^S",408,"^9","cljs.core/hash"]],"^19",[["^ ","^R",171,"^S",408,"^9","v"]],"^1B",[["^ ","^R",178,"^S",408]],"^11",[["^ ","^R",178,"^S",408,"^9","cljs.core/count"]],"^12",[["^ ","^R",194,"^S",408,"^9","v"]]],"~i284",["^ ","~i0",[["^ ","^R",0,"^S",410]],"~i5",[["^ ","^R",0,"^S",410,"^9","instaparse.auto-flatten-seq/EMPTY"]],"^1E",[["^ ","^R",36,"^S",410],["^ ","^R",81,"^S",410]],"^W",[["^ ","^R",36,"^S",410,"^9","instaparse.auto-flatten-seq/auto-flatten-seq"]]],"~i286",["^ ","~i0",[["^ ","^R",0,"^S",411],["^ ","^R",41,"^S",411],["^ ","^R",0,"^S",412]],"~i6",[["^ ","^R",0,"^S",411,"^9","instaparse.auto-flatten-seq/afs?"]],"^W",[["^ ","^R",90,"^S",411,"^9","s"]]],"~i287",["^ ","~i2",[["^ ","^R",0,"^S",412]],"^T",[["^ ","^R",21,"^S",412,"^9","instaparse.auto-flatten-seq/AutoFlattenSeq"]],"^Y",[["^ ","^R",8,"^S",412,"^9","s"]]],"~i289",["^ ","~i0",[["^ ","^R",0,"^S",414],["^ ","^R",41,"^S",414],["^ ","^R",0,"^S",415]],"~i6",[["^ ","^R",0,"^S",414,"^9","instaparse.auto-flatten-seq/true-count"]],"^1@",[["^ ","^R",90,"^S",414,"^9","v"]]],"~i290",["^ ","~i2",[["^ ","^R",0,"^S",415]],"~i6",[["^ ","^R",20,"^S",415]],"~i7",[["^ ","^R",20,"^S",415,"^9","instaparse.auto-flatten-seq/afs?"]],"^W",[["^ ","^R",59,"^S",415,"^9","v"]]],"~i291",["^ ","~i4",[["^ ","^R",0,"^S",416]],"~i5",[["^ ","^R",7,"^S",416,"^9","cljs.core/count"]],"^1E",[["^ ","^R",23,"^S",416]],"^[",[["^ ","^R",23,"^S",416,"^9","v"]]],"~i292",["^ ","~i4",[["^ ","^R",0,"^S",418]],"~i5",[["^ ","^R",7,"^S",418,"^9","cljs.core/count"]],"^1E",[["^ ","^R",23,"^S",418,"^9","v"]]],"~i296",["^ ","~i0",[["^ ","^R",0,"^S",421],["^ ","^R",46,"^S",421],["^ ","^R",0,"^S",423]],"~i6",[["^ ","^R",0,"^S",421,"^9","instaparse.auto-flatten-seq/flat-vec-helper"]],"^1K",[["^ ","^R",100,"^S",421,"^9","acc"]],"^19",[["^ ","^R",104,"^S",421,"^9","v"]]],"~i297",["^ ","~i2",[["^ ","^R",0,"^S",423],["^ ","^R",4,"^S",423,"^9","temp__5455__auto__"],["^ ","^R",0,"^S",424],["^ ","^R",0,"^S",424],["^ ","^R",3,"^S",424,"^9","temp__5455__auto__"],["^ ","^R",0,"^S",425],["^ ","^R",8,"^S",425,"^9","temp__5455__auto__"],["^ ","^R",0,"^S",426]],"^1E",[["^ ","^R",4,"^S",425,"^9","s"]],"^T",[["^ ","^R",25,"^S",423]],"^U",[["^ ","^R",25,"^S",423,"^9","cljs.core/seq"]],"^1@",[["^ ","^R",39,"^S",423,"^9","v"]]],"~i298",["^ ","~i4",[["^ ","^R",0,"^S",426],["^ ","^R",0,"^S",427]],"^14",[["^ ","^R",4,"^S",426,"^9","fst"]],"^U",[["^ ","^R",10,"^S",426]],"^1?",[["^ ","^R",10,"^S",426,"^9","cljs.core/first"]],"^16",[["^ ","^R",26,"^S",426,"^9","v"]]],"~i299",["^ ","~i6",[["^ ","^R",0,"^S",427]],"^14",[["^ ","^R",20,"^S",427]],"^1E",[["^ ","^R",20,"^S",427,"^9","instaparse.auto-flatten-seq/afs?"]],"^15",[["^ ","^R",59,"^S",427,"^9","fst"]]],"~i300",["^ ","~i8",[["^ ","^R",0,"^S",428]],"^1?",[["^ ","^R",15,"^S",428]],"^15",[["^ ","^R",16,"^S",428,"^9","instaparse.auto-flatten-seq/flat-vec-helper"],["^ ","^R",92,"^S",428,"^9","instaparse.auto-flatten-seq/flat-vec-helper"],["^ ","^R",177,"^S",428,"^9","instaparse.auto-flatten-seq/flat-vec-helper"]],"^[",[["^ ","^R",166,"^S",428,"^9","acc"],["^ ","^R",231,"^S",428,"^9","acc"]],"^1C",[["^ ","^R",170,"^S",428,"^9","fst"],["^ ","^R",235,"^S",428,"^9","fst"]],"~i41",[["^ ","^R",15,"^S",429]],"^22",[["^ ","^R",15,"^S",429,"^9","cljs.core/next"]],"^17",[["^ ","^R",30,"^S",429,"^9","v"]]],"~i301",["^ ","~i8",[["^ ","^R",0,"^S",434]],"^1?",[["^ ","^R",15,"^S",434]],"^15",[["^ ","^R",15,"^S",434,"^9","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^X",[["^ ","^R",66,"^S",434,"^9","acc"]],"^1G",[["^ ","^R",70,"^S",434,"^9","fst"]],"^11",[["^ ","^R",15,"^S",435]],"^[",[["^ ","^R",15,"^S",435,"^9","cljs.core/next"]],"^12",[["^ ","^R",30,"^S",435,"^9","v"]]],"~i302",["^ ","~i4",[["^ ","^R",0,"^S",441,"^9","acc"]]],"~i304",["^ ","~i0",[["^ ","^R",0,"^S",446],["^ ","^R",39,"^S",449],["^ ","^R",0,"^S",450]],"~i6",[["^ ","^R",0,"^S",449,"^9","instaparse.auto-flatten-seq/flat-vec"]]],"~i306",["^ ","~i3",[["^ ","^R",86,"^S",449,"^9","v"]]],"~i307",["^ ","~i2",[["^ ","^R",0,"^S",450]],"~i3",[["^ ","^R",7,"^S",450,"^9","cljs.core/persistent!"]],"^1?",[["^ ","^R",34,"^S",450]],"^15",[["^ ","^R",34,"^S",450,"^9","instaparse.auto-flatten-seq/flat-vec-helper"]],"^[",[["^ ","^R",78,"^S",450],["^ ","^R",99,"^S",450]],"^10",[["^ ","^R",78,"^S",450,"^9","cljs.core/transient"]],"^17",[["^ ","^R",133,"^S",450,"^9","v"]]],"~i309",["^ ","~i0",[["^ ","^R",0,"^S",452],["^ ","^R",0,"^S",452],["^ ","^R",0,"^S",453],["^ ","^R",37,"^S",456],["^ ","^R",0,"^S",458],["^ ","^R",38,"^S",458],["^ ","^R",0,"^S",459],["^ ","^R",0,"^S",459],["^ ","^R",3,"^S",459],["^ ","^R",4,"^S",459],["^ ","^R",6,"^S",459],["^ ","^R",15,"^S",459],["^ ","^R",27,"^S",459],["^ ","^R",29,"^S",459],["^ ","^R",30,"^S",459],["^ ","^R",89,"^S",459],["^ ","^R",0,"^S",460],["^ ","^R",0,"^S",462],["^ ","^R",4,"^S",462,"^9","x__5859__auto__"],["^ ","^R",22,"^S",462],["^ ","^R",24,"^S",462],["^ ","^R",33,"^S",462],["^ ","^R",40,"^S",462],["^ ","^R",4,"^S",463,"^9","m__5860__auto__"],["^ ","^R",22,"^S",463],["^ ","^R",23,"^S",463,"^9","instaparse/auto-flatten-seq.get-vec"],["^ ","^R",59,"^S",463],["^ ","^R",59,"^S",463,"^9","goog/typeOf"],["^ ","^R",71,"^S",463,"^9","x__5859__auto__"],["^ ","^R",0,"^S",464],["^ ","^R",0,"^S",464],["^ ","^R",3,"^S",464],["^ ","^R",5,"^S",464],["^ ","^R",6,"^S",464,"^9","m__5860__auto__"],["^ ","^R",25,"^S",464],["^ ","^R",0,"^S",465],["^ ","^R",8,"^S",465,"^9","m__5860__auto__"],["^ ","^R",56,"^S",465,"^9","m__5860__auto__"],["^ ","^R",110,"^S",465,"^9","m__5860__auto__"],["^ ","^R",0,"^S",467],["^ ","^R",4,"^S",467,"^9","m__5860__auto__"],["^ ","^R",26,"^S",467],["^ ","^R",27,"^S",467,"^9","instaparse/auto-flatten-seq.get-vec"],["^ ","^R",63,"^S",467],["^ ","^R",0,"^S",468],["^ ","^R",0,"^S",468],["^ ","^R",3,"^S",468],["^ ","^R",5,"^S",468],["^ ","^R",6,"^S",468,"^9","m__5860__auto__"],["^ ","^R",29,"^S",468],["^ ","^R",0,"^S",469],["^ ","^R",8,"^S",469,"^9","m__5860__auto__"],["^ ","^R",60,"^S",469,"^9","m__5860__auto__"],["^ ","^R",118,"^S",469,"^9","m__5860__auto__"],["^ ","^R",0,"^S",471],["^ ","^R",6,"^S",471],["^ ","^R",6,"^S",471,"^9","cljs.core/missing-protocol"],["^ ","^R",33,"^S",471],["^ ","^R",0,"^S",477]],"^T",[["^ ","^R",0,"^S",456,"^9","instaparse.auto-flatten-seq/GetVec"]]],"~i310",["^ ","^16",[["^ ","^R",0,"^S",458,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1B",[["^ ","^R",84,"^S",458,"^9","self"],["^ ","^R",7,"^S",459,"^9","self"],["^ ","^R",30,"^S",459,"^9","self"],["^ ","^R",7,"^S",460,"^9","self"],["^ ","^R",63,"^S",460,"^9","self"],["^ ","^R",25,"^S",462,"^9","self"],["^ ","^R",45,"^S",462,"^9","self"],["^ ","^R",102,"^S",465,"^9","self"],["^ ","^R",136,"^S",465,"^9","self"],["^ ","^R",110,"^S",469,"^9","self"],["^ ","^R",148,"^S",469,"^9","self"],["^ ","^R",50,"^S",471,"^9","self"]]],"~i421",["^ ","~i0",[["^ ","^R",0,"^S",477],["^ ","^R",0,"^S",477],["^ ","^R",0,"^S",508],["^ ","^R",0,"^S",508],["^ ","^R",0,"^S",508],["^ ","^R",0,"^S",508],["^ ","^R",71,"^S",508],["^ ","^R",0,"^S",510],["^ ","^R",0,"^S",510],["^ ","^R",11,"^S",510],["^ ","^R",0,"^S",511],["^ ","^R",0,"^S",514],["^ ","^R",0,"^S",514],["^ ","^R",0,"^S",514],["^ ","^R",96,"^S",514],["^ ","^R",0,"^S",516],["^ ","^R",0,"^S",516],["^ ","^R",15,"^S",516],["^ ","^R",0,"^S",517],["^ ","^R",0,"^S",520],["^ ","^R",0,"^S",520],["^ ","^R",0,"^S",520],["^ ","^R",96,"^S",520],["^ ","^R",0,"^S",522],["^ ","^R",0,"^S",522],["^ ","^R",15,"^S",522],["^ ","^R",0,"^S",523],["^ ","^R",0,"^S",526],["^ ","^R",0,"^S",526],["^ ","^R",0,"^S",526],["^ ","^R",98,"^S",526,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",528],["^ ","^R",0,"^S",528],["^ ","^R",0,"^S",528],["^ ","^R",113,"^S",528],["^ ","^R",0,"^S",530],["^ ","^R",0,"^S",530],["^ ","^R",15,"^S",530],["^ ","^R",0,"^S",531],["^ ","^R",0,"^S",546],["^ ","^R",7,"^S",546,"^9","cljs.core/deref"],["^ ","^R",0,"^S",549],["^ ","^R",0,"^S",549],["^ ","^R",0,"^S",549],["^ ","^R",101,"^S",549],["^ ","^R",0,"^S",551],["^ ","^R",0,"^S",551],["^ ","^R",15,"^S",551],["^ ","^R",0,"^S",552],["^ ","^R",0,"^S",555],["^ ","^R",0,"^S",555],["^ ","^R",0,"^S",555],["^ ","^R",94,"^S",555],["^ ","^R",0,"^S",557],["^ ","^R",0,"^S",557],["^ ","^R",15,"^S",557],["^ ","^R",0,"^S",558],["^ ","^R",0,"^S",561],["^ ","^R",0,"^S",561],["^ ","^R",0,"^S",561],["^ ","^R",94,"^S",561],["^ ","^R",0,"^S",563],["^ ","^R",0,"^S",563],["^ ","^R",15,"^S",563],["^ ","^R",0,"^S",564],["^ ","^R",0,"^S",567],["^ ","^R",0,"^S",567],["^ ","^R",0,"^S",567],["^ ","^R",97,"^S",567],["^ ","^R",0,"^S",569],["^ ","^R",0,"^S",569],["^ ","^R",15,"^S",569],["^ ","^R",0,"^S",570],["^ ","^R",0,"^S",573],["^ ","^R",0,"^S",573],["^ ","^R",0,"^S",573],["^ ","^R",92,"^S",573],["^ ","^R",0,"^S",575],["^ ","^R",0,"^S",575],["^ ","^R",15,"^S",575],["^ ","^R",0,"^S",576],["^ ","^R",0,"^S",583],["^ ","^R",0,"^S",583],["^ ","^R",0,"^S",583],["^ ","^R",96,"^S",583],["^ ","^R",0,"^S",585],["^ ","^R",0,"^S",585],["^ ","^R",15,"^S",585],["^ ","^R",0,"^S",586],["^ ","^R",0,"^S",589],["^ ","^R",0,"^S",589],["^ ","^R",0,"^S",589],["^ ","^R",93,"^S",589],["^ ","^R",0,"^S",591],["^ ","^R",0,"^S",591],["^ ","^R",15,"^S",591],["^ ","^R",0,"^S",592],["^ ","^R",0,"^S",595],["^ ","^R",0,"^S",595],["^ ","^R",0,"^S",595],["^ ","^R",92,"^S",595],["^ ","^R",0,"^S",597],["^ ","^R",0,"^S",597],["^ ","^R",15,"^S",597],["^ ","^R",0,"^S",598],["^ ","^R",0,"^S",601],["^ ","^R",0,"^S",601],["^ ","^R",0,"^S",601],["^ ","^R",98,"^S",601],["^ ","^R",0,"^S",603],["^ ","^R",0,"^S",603],["^ ","^R",15,"^S",603],["^ ","^R",0,"^S",604],["^ ","^R",0,"^S",611],["^ ","^R",0,"^S",611],["^ ","^R",0,"^S",611],["^ ","^R",92,"^S",611],["^ ","^R",0,"^S",613],["^ ","^R",0,"^S",613],["^ ","^R",15,"^S",613],["^ ","^R",0,"^S",614],["^ ","^R",0,"^S",617],["^ ","^R",0,"^S",617],["^ ","^R",0,"^S",617],["^ ","^R",94,"^S",617],["^ ","^R",0,"^S",619],["^ ","^R",0,"^S",619],["^ ","^R",15,"^S",619],["^ ","^R",0,"^S",620],["^ ","^R",0,"^S",623],["^ ","^R",0,"^S",623],["^ ","^R",0,"^S",623],["^ ","^R",108,"^S",623],["^ ","^R",0,"^S",625],["^ ","^R",0,"^S",625],["^ ","^R",15,"^S",625],["^ ","^R",0,"^S",626],["^ ","^R",0,"^S",629],["^ ","^R",0,"^S",629],["^ ","^R",0,"^S",629],["^ ","^R",100,"^S",629],["^ ","^R",0,"^S",631],["^ ","^R",0,"^S",631],["^ ","^R",15,"^S",631],["^ ","^R",0,"^S",632],["^ ","^R",0,"^S",635],["^ ","^R",0,"^S",635],["^ ","^R",0,"^S",635],["^ ","^R",114,"^S",635],["^ ","^R",0,"^S",637],["^ ","^R",0,"^S",637],["^ ","^R",15,"^S",637],["^ ","^R",0,"^S",638],["^ ","^R",0,"^S",641],["^ ","^R",0,"^S",641],["^ ","^R",0,"^S",641],["^ ","^R",94,"^S",641],["^ ","^R",0,"^S",643],["^ ","^R",0,"^S",643],["^ ","^R",15,"^S",643],["^ ","^R",0,"^S",644],["^ ","^R",0,"^S",647],["^ ","^R",0,"^S",647],["^ ","^R",0,"^S",647],["^ ","^R",101,"^S",647],["^ ","^R",0,"^S",649],["^ ","^R",0,"^S",649],["^ ","^R",15,"^S",649],["^ ","^R",0,"^S",650],["^ ","^R",0,"^S",657],["^ ","^R",0,"^S",657],["^ ","^R",0,"^S",657],["^ ","^R",98,"^S",657],["^ ","^R",0,"^S",659],["^ ","^R",0,"^S",659],["^ ","^R",15,"^S",659],["^ ","^R",0,"^S",660],["^ ","^R",0,"^S",663],["^ ","^R",0,"^S",663],["^ ","^R",0,"^S",663],["^ ","^R",67,"^S",663],["^ ","^R",29,"^S",665,"^9","self__"],["^ ","^R",0,"^S",667],["^ ","^R",0,"^S",667],["^ ","^R",4,"^S",667,"^9","self__"],["^ ","^R",17,"^S",667],["^ ","^R",0,"^S",668],["^ ","^R",0,"^S",668],["^ ","^R",11,"^S",668,"^9","self__"],["^ ","^R",0,"^S",669],["^ ","^R",29,"^S",671,"^9","self__"],["^ ","^R",0,"^S",673],["^ ","^R",0,"^S",673],["^ ","^R",4,"^S",673,"^9","self__"],["^ ","^R",17,"^S",673],["^ ","^R",0,"^S",674],["^ ","^R",0,"^S",674],["^ ","^R",11,"^S",674,"^9","self__"],["^ ","^R",0,"^S",675],["^ ","^R",20,"^S",677,"^9","self__"],["^ ","^R",29,"^S",680,"^9","self__"],["^ ","^R",29,"^S",682,"^9","self__"],["^ ","^R",0,"^S",692],["^ ","^R",0,"^S",692],["^ ","^R",0,"^S",692],["^ ","^R",68,"^S",692],["^ ","^R",79,"^S",692,"^9","self__"],["^ ","^R",86,"^S",692,"^9","args29231"],["^ ","^R",0,"^S",694],["^ ","^R",0,"^S",694],["^ ","^R",4,"^S",694,"^9","self__"],["^ ","^R",17,"^S",694],["^ ","^R",0,"^S",695],["^ ","^R",0,"^S",695],["^ ","^R",7,"^S",695],["^ ","^R",7,"^S",695,"^9","self__"],["^ ","^R",29,"^S",695,"^9","self__"],["^ ","^R",40,"^S",695],["^ ","^R",40,"^S",695],["^ ","^R",41,"^S",695,"^9","self__"],["^ ","^R",60,"^S",695],["^ ","^R",60,"^S",695,"^9","cljs.core/aclone"],["^ ","^R",77,"^S",695,"^9","args29231"],["^ ","^R",0,"^S",698],["^ ","^R",0,"^S",698],["^ ","^R",0,"^S",698],["^ ","^R",92,"^S",698],["^ ","^R",0,"^S",700],["^ ","^R",0,"^S",700],["^ ","^R",11,"^S",700],["^ ","^R",0,"^S",701],["^ ","^R",0,"^S",704],["^ ","^R",0,"^S",704],["^ ","^R",0,"^S",704],["^ ","^R",92,"^S",704],["^ ","^R",0,"^S",706],["^ ","^R",0,"^S",706],["^ ","^R",11,"^S",706],["^ ","^R",0,"^S",707],["^ ","^R",0,"^S",710],["^ ","^R",0,"^S",710],["^ ","^R",0,"^S",710],["^ ","^R",101,"^S",710],["^ ","^R",0,"^S",712],["^ ","^R",0,"^S",712],["^ ","^R",15,"^S",712],["^ ","^R",0,"^S",713],["^ ","^R",0,"^S",716],["^ ","^R",0,"^S",716],["^ ","^R",61,"^S",716],["^ ","^R",0,"^S",717],["^ ","^R",0,"^S",717],["^ ","^R",90,"^S",717],["^ ","^R",141,"^S",717],["^ ","^R",161,"^S",717],["^ ","^R",226,"^S",717],["^ ","^R",269,"^S",717],["^ ","^R",321,"^S",717],["^ ","^R",392,"^S",717],["^ ","^R",412,"^S",717],["^ ","^R",467,"^S",717],["^ ","^R",510,"^S",717],["^ ","^R",562,"^S",717],["^ ","^R",633,"^S",717],["^ ","^R",0,"^S",720],["^ ","^R",0,"^S",720],["^ ","^R",67,"^S",720],["^ ","^R",0,"^S",722],["^ ","^R",0,"^S",722],["^ ","^R",70,"^S",722],["^ ","^R",0,"^S",724],["^ ","^R",0,"^S",724],["^ ","^R",75,"^S",724],["^ ","^R",86,"^S",724,"^9","this__5797__auto__"],["^ ","^R",105,"^S",724,"^9","writer__5798__auto__"],["^ ","^R",126,"^S",724,"^9","opt__5799__auto__"],["^ ","^R",0,"^S",725],["^ ","^R",0,"^S",725],["^ ","^R",7,"^S",725,"^9","cljs.core/-write"],["^ ","^R",24,"^S",725,"^9","writer__5798__auto__"],["^ ","^R",45,"^S",725],["^ ","^R",0,"^S",728],["^ ","^R",57,"^S",728],["^ ","^R",0,"^S",729],["^ ","^R",0,"^S",729],["^ ","^R",12,"^S",729,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"~i9",[["^ ","^R",0,"^S",508,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",514,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",520,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",526,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",528,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",549,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",555,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",561,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",567,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",573,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",583,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",589,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",595,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",601,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",611,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",617,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",623,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",629,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",635,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",641,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",647,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",657,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",663,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",692,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",698,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",704,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",710,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",716,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",720,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",722,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",724,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",728,"^9","instaparse.auto-flatten-seq/->FlattenOnDemandVector"],["^ ","^R",0,"^S",732,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"^[",[["^ ","^R",122,"^S",728,"^9","v"],["^ ","^R",62,"^S",729,"^9","v"]]],"~i422",["^ ","^1<",[["^ ","^R",124,"^S",728,"^9","hashcode"],["^ ","^R",64,"^S",729,"^9","hashcode"]]],"~i423",["^ ","^1<",[["^ ","^R",133,"^S",728,"^9","cnt"],["^ ","^R",73,"^S",729,"^9","cnt"]]],"~i424",["^ ","^[",[["^ ","^R",137,"^S",728,"^9","flat"],["^ ","^R",77,"^S",729,"^9","flat"]]],"~i426",["^ ","^W",[["^ ","^R",124,"^S",528,"^9","self"],["^ ","^R",4,"^S",530,"^9","self"]]],"~i427",["^ ","~i4",[["^ ","^R",0,"^S",531],["^ ","^R",0,"^S",532],["^ ","^R",0,"^S",544]],"^14",[["^ ","^R",3,"^S",531],["^ ","^R",17,"^S",531],["^ ","^R",17,"^S",531,"^9","cljs.core/deref"]],"^1E",[["^ ","^R",3,"^S",531,"^9","cljs.core/not"]],"^15",[["^ ","^R",33,"^S",531,"^9","flat"]]],"~i428",["^ ","~i6",[["^ ","^R",0,"^S",532]],"~i7",[["^ ","^R",0,"^S",532,"^9","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",51,"^S",532,"^9","flat"]],"^1@",[["^ ","^R",63,"^S",532],["^ ","^R",0,"^S",534]],"^1K",[["^ ","^R",18,"^S",533,"^9","_"]],"^1G",[["^ ","^R",0,"^S",534]],"^19",[["^ ","^R",7,"^S",534,"^9","cljs.core/with-meta"]],"^12",[["^ ","^R",27,"^S",534],["^ ","^R",64,"^S",534],["^ ","^R",64,"^S",534,"^9","cljs.core/deref"]],"^1;",[["^ ","^R",27,"^S",534,"^9","instaparse.auto-flatten-seq/flat-vec"]],"^20",[["^ ","^R",80,"^S",534,"^9","v"]],"^1D",[["^ ","^R",91,"^S",534],["^ ","^R",106,"^S",534],["^ ","^R",106,"^S",534,"^9","cljs.core/deref"]],"^1F",[["^ ","^R",91,"^S",534,"^9","cljs.core/meta"]],"^1P",[["^ ","^R",122,"^S",534,"^9","v"]]],"~i429",["^ ","~i6",[["^ ","^R",0,"^S",538]],"~i7",[["^ ","^R",0,"^S",538,"^9","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",51,"^S",538,"^9","v"]],"^1?",[["^ ","^R",60,"^S",538],["^ ","^R",0,"^S",540],["^ ","^R",0,"^S",540]],"^1J",[["^ ","^R",18,"^S",539,"^9","_"]]],"~i430",["^ ","~i5",[["^ ","^R",23,"^S",546,"^9","flat"]]],"~i433",["^ ","^T",[["^ ","^R",4,"^S",510,"^9","self"]]],"~i434",["^ ","~i4",[["^ ","^R",0,"^S",511]],"~i5",[["^ ","^R",7,"^S",511,"^9","cljs.core/pr-str*"]],"^T",[["^ ","^R",30,"^S",511]],"^U",[["^ ","^R",30,"^S",511,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",66,"^S",511,"^9","self"]]],"~i436",["^ ","^14",[["^ ","^R",103,"^S",611,"^9","self"],["^ ","^R",4,"^S",613,"^9","self"]],"^15",[["^ ","^R",0,"^S",614,"^9","hashcode"]]],"~i438",["^ ","^1E",[["^ ","^R",105,"^S",617,"^9","self"],["^ ","^R",4,"^S",619,"^9","self"]],"^15",[["^ ","^R",110,"^S",617,"^9","other"]]],"~i440",["^ ","~i5",[["^ ","^R",0,"^S",620]],"^14",[["^ ","^R",8,"^S",620]],"^1E",[["^ ","^R",8,"^S",620,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",53,"^S",620,"^9","hashcode"]],"^X",[["^ ","^R",69,"^S",620]],"^1K",[["^ ","^R",69,"^S",620,"^9","cljs.core/hash"]],"^Y",[["^ ","^R",84,"^S",620,"^9","other"]]],"~i441",["^ ","^14",[["^ ","^R",97,"^S",620]],"^1E",[["^ ","^R",97,"^S",620,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",142,"^S",620,"^9","cnt"]],"^Z",[["^ ","^R",153,"^S",620]],"^1@",[["^ ","^R",153,"^S",620,"^9","cljs.core/count"]],"^1A",[["^ ","^R",169,"^S",620,"^9","other"]]],"~i442",["^ ","^14",[["^ ","^R",182,"^S",620]],"^1E",[["^ ","^R",182,"^S",620,"^9","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",227,"^S",620]],"^U",[["^ ","^R",227,"^S",620,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",263,"^S",620,"^9","self"]],"^Y",[["^ ","^R",273,"^S",620,"^9","other"]]],"~i444",["^ ","^1E",[["^ ","^R",119,"^S",623,"^9","self"],["^ ","^R",4,"^S",625,"^9","self"]],"^Z",[["^ ","^R",0,"^S",626],["^ ","^R",27,"^S",626]],"^1@",[["^ ","^R",7,"^S",626,"^9","cljs.core/with-meta"]],"^11",[["^ ","^R",60,"^S",626]],"^[",[["^ ","^R",60,"^S",626,"^9","cljs.core/meta"]],"^12",[["^ ","^R",75,"^S",626,"^9","self"]]],"~i446",["^ ","^1E",[["^ ","^R",107,"^S",583,"^9","self"],["^ ","^R",4,"^S",585,"^9","self"]],"^Z",[["^ ","^R",0,"^S",586,"^9","cnt"]]],"~i448",["^ ","^T",[["^ ","^R",108,"^S",567,"^9","self"],["^ ","^R",4,"^S",569,"^9","self"]],"^1@",[["^ ","^R",113,"^S",567,"^9","i"]],"^1J",[["^ ","^R",115,"^S",567,"^9","val"]]],"~i449",["^ ","~i4",[["^ ","^R",0,"^S",570]],"~i5",[["^ ","^R",7,"^S",570,"^9","cljs.core/-assoc-n"]],"^U",[["^ ","^R",26,"^S",570]],"^1?",[["^ ","^R",26,"^S",570,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1K",[["^ ","^R",62,"^S",570,"^9","self"]],"^1:",[["^ ","^R",72,"^S",570,"^9","i"]],"^11",[["^ ","^R",74,"^S",570,"^9","val"]]],"~i451",["^ ","^14",[["^ ","^R",109,"^S",657,"^9","self"],["^ ","^R",4,"^S",659,"^9","self"]],"^1?",[["^ ","^R",114,"^S",657,"^9","obj"]]],"~i452",["^ ","~i4",[["^ ","^R",0,"^S",660]],"~i5",[["^ ","^R",7,"^S",660,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^14",[["^ ","^R",52,"^S",660]],"^1E",[["^ ","^R",52,"^S",660,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",88,"^S",660,"^9","self"]],"^1[",[["^ ","^R",98,"^S",660,"^9","obj"]]],"~i454",["^ ","^1?",[["^ ","^R",112,"^S",647,"^9","self"],["^ ","^R",4,"^S",649,"^9","self"]],"^1J",[["^ ","^R",117,"^S",647,"^9","metamap"]]],"~i455",["^ ","~i4",[["^ ","^R",0,"^S",650],["^ ","^R",20,"^S",650],["^ ","^R",20,"^S",650,"^9","cljs.core/deref"]],"~i9",[["^ ","^R",36,"^S",650,"^9","flat"]]],"~i456",["^ ","~i6",[["^ ","^R",0,"^S",651],["^ ","^R",12,"^S",651,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"^1B",[["^ ","^R",62,"^S",651],["^ ","^R",107,"^S",651],["^ ","^R",107,"^S",651,"^9","cljs.core/deref"]],"^11",[["^ ","^R",62,"^S",651,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^12",[["^ ","^R",123,"^S",651,"^9","v"]],"^1<",[["^ ","^R",134,"^S",651,"^9","hashcode"]],"^18",[["^ ","^R",150,"^S",651,"^9","cnt"]],"^1I",[["^ ","^R",161,"^S",651]],"^1L",[["^ ","^R",161,"^S",651,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^1Q",[["^ ","^R",206,"^S",651],["^ ","^R",226,"^S",651],["^ ","^R",226,"^S",651,"^9","cljs.core/deref"]],"^1R",[["^ ","^R",206,"^S",651,"^9","cljs.core/with-meta"]],"~i71",[["^ ","^R",242,"^S",651,"^9","flat"]],"^25",[["^ ","^R",255,"^S",651,"^9","metamap"]]],"~i457",["^ ","~i6",[["^ ","^R",0,"^S",653],["^ ","^R",12,"^S",653,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]],"^1B",[["^ ","^R",62,"^S",653]],"^11",[["^ ","^R",62,"^S",653,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^1C",[["^ ","^R",107,"^S",653],["^ ","^R",127,"^S",653],["^ ","^R",127,"^S",653,"^9","cljs.core/deref"]],"^12",[["^ ","^R",107,"^S",653,"^9","cljs.core/with-meta"]],"^20",[["^ ","^R",143,"^S",653,"^9","v"]],"^1>",[["^ ","^R",153,"^S",653,"^9","metamap"]],"^1R",[["^ ","^R",163,"^S",653,"^9","hashcode"]],"^1Z",[["^ ","^R",179,"^S",653,"^9","cnt"]],"^23",[["^ ","^R",190,"^S",653],["^ ","^R",235,"^S",653],["^ ","^R",235,"^S",653,"^9","cljs.core/deref"]],"~i74",[["^ ","^R",190,"^S",653,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^28",[["^ ","^R",251,"^S",653,"^9","flat"]]],"~i459",["^ ","^14",[["^ ","^R",103,"^S",573,"^9","self"],["^ ","^R",4,"^S",575,"^9","self"]]],"~i460",["^ ","~i4",[["^ ","^R",0,"^S",576],["^ ","^R",20,"^S",576],["^ ","^R",20,"^S",576,"^9","cljs.core/deref"]],"~i9",[["^ ","^R",36,"^S",576,"^9","flat"]],"^U",[["^ ","^R",0,"^S",577],["^ ","^R",22,"^S",577],["^ ","^R",22,"^S",577,"^9","cljs.core/deref"]],"^1?",[["^ ","^R",7,"^S",577,"^9","cljs.core/meta"]],"^16",[["^ ","^R",38,"^S",577,"^9","flat"]],"^19",[["^ ","^R",0,"^S",579],["^ ","^R",22,"^S",579],["^ ","^R",22,"^S",579,"^9","cljs.core/deref"]],"^Y",[["^ ","^R",7,"^S",579,"^9","cljs.core/meta"]],"^1H",[["^ ","^R",38,"^S",579,"^9","v"]]],"~i463",["^ ","~i9",[["^ ","^R",105,"^S",641,"^9","self"],["^ ","^R",4,"^S",643,"^9","self"]]],"~i464",["^ ","~i4",[["^ ","^R",0,"^S",644]],"~i5",[["^ ","^R",7,"^S",644,"^9","cljs.core/seq"]],"~i9",[["^ ","^R",21,"^S",644]],"^14",[["^ ","^R",21,"^S",644,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1@",[["^ ","^R",57,"^S",644,"^9","self"]]],"~i466",["^ ","^W",[["^ ","^R",107,"^S",514,"^9","self"],["^ ","^R",4,"^S",516,"^9","self"]],"^Z",[["^ ","^R",112,"^S",514,"^9","key"]]],"~i467",["^ ","~i4",[["^ ","^R",0,"^S",517]],"~i5",[["^ ","^R",7,"^S",517,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",55,"^S",517]],"^U",[["^ ","^R",55,"^S",517,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",517,"^9","self"]],"^Y",[["^ ","^R",101,"^S",517,"^9","key"]]],"~i468",["^ ","^W",[["^ ","^R",107,"^S",520,"^9","self"],["^ ","^R",4,"^S",522,"^9","self"]],"^Z",[["^ ","^R",112,"^S",520,"^9","key"]],"^16",[["^ ","^R",116,"^S",520,"^9","not-found"]]],"~i469",["^ ","~i4",[["^ ","^R",0,"^S",523]],"~i5",[["^ ","^R",7,"^S",523,"^9","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3"]],"^T",[["^ ","^R",55,"^S",523]],"^U",[["^ ","^R",55,"^S",523,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",523,"^9","self"]],"^Y",[["^ ","^R",101,"^S",523,"^9","key"]],"^[",[["^ ","^R",105,"^S",523,"^9","not-found"]]],"~i471",["^ ","~i9",[["^ ","^R",105,"^S",555,"^9","self"],["^ ","^R",4,"^S",557,"^9","self"]],"^U",[["^ ","^R",110,"^S",555,"^9","i"]]],"~i472",["^ ","~i4",[["^ ","^R",0,"^S",558]],"~i5",[["^ ","^R",7,"^S",558,"^9","cljs.core._nth.cljs$core$IFn$_invoke$arity$2"]],"^14",[["^ ","^R",52,"^S",558]],"^1E",[["^ ","^R",52,"^S",558,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",88,"^S",558,"^9","self"]],"^1[",[["^ ","^R",98,"^S",558,"^9","i"]]],"~i473",["^ ","~i9",[["^ ","^R",105,"^S",561,"^9","self"],["^ ","^R",4,"^S",563,"^9","self"]],"^U",[["^ ","^R",110,"^S",561,"^9","i"]],"^15",[["^ ","^R",112,"^S",561,"^9","not-found"]]],"~i474",["^ ","~i4",[["^ ","^R",0,"^S",564]],"~i5",[["^ ","^R",7,"^S",564,"^9","cljs.core._nth.cljs$core$IFn$_invoke$arity$3"]],"^14",[["^ ","^R",52,"^S",564]],"^1E",[["^ ","^R",52,"^S",564,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",88,"^S",564,"^9","self"]],"^1[",[["^ ","^R",98,"^S",564,"^9","i"]],"^19",[["^ ","^R",100,"^S",564,"^9","not-found"]]],"~i476",["^ ","^W",[["^ ","^R",4,"^S",668,"^9","self"],["^ ","^R",4,"^S",700,"^9","self"]],"^Z",[["^ ","^R",36,"^S",665,"^9","arg"],["^ ","^R",103,"^S",698,"^9","arg"]]],"~i477",["^ ","~i4",[["^ ","^R",0,"^S",669],["^ ","^R",0,"^S",701]],"~i5",[["^ ","^R",7,"^S",669,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$2"],["^ ","^R",7,"^S",701,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$2"]],"^T",[["^ ","^R",55,"^S",669],["^ ","^R",55,"^S",701]],"^U",[["^ ","^R",55,"^S",669,"^9","instaparse.auto-flatten-seq/get-vec"],["^ ","^R",55,"^S",701,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",669,"^9","self"],["^ ","^R",91,"^S",701,"^9","self"]],"^Y",[["^ ","^R",97,"^S",669,"^9","arg"],["^ ","^R",97,"^S",701,"^9","arg"]]],"~i478",["^ ","^W",[["^ ","^R",4,"^S",674,"^9","self"],["^ ","^R",4,"^S",706,"^9","self"]],"^Z",[["^ ","^R",36,"^S",671,"^9","arg"],["^ ","^R",27,"^S",677,"^9","arg"],["^ ","^R",36,"^S",680,"^9","arg"],["^ ","^R",36,"^S",682,"^9","arg"],["^ ","^R",103,"^S",704,"^9","arg"]],"^16",[["^ ","^R",40,"^S",671,"^9","not-found"],["^ ","^R",31,"^S",677,"^9","not-found"],["^ ","^R",40,"^S",682,"^9","not-found"],["^ ","^R",107,"^S",704,"^9","not-found"]]],"~i479",["^ ","~i4",[["^ ","^R",0,"^S",675],["^ ","^R",0,"^S",707]],"~i5",[["^ ","^R",7,"^S",675,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$3"],["^ ","^R",7,"^S",707,"^9","cljs.core._invoke.cljs$core$IFn$_invoke$arity$3"]],"^T",[["^ ","^R",55,"^S",675],["^ ","^R",55,"^S",707]],"^U",[["^ ","^R",55,"^S",675,"^9","instaparse.auto-flatten-seq/get-vec"],["^ ","^R",55,"^S",707,"^9","instaparse.auto-flatten-seq/get-vec"]],"^X",[["^ ","^R",91,"^S",675,"^9","self"],["^ ","^R",91,"^S",707,"^9","self"]],"^Y",[["^ ","^R",97,"^S",675,"^9","arg"],["^ ","^R",97,"^S",707,"^9","arg"]],"^[",[["^ ","^R",101,"^S",675,"^9","not-found"],["^ ","^R",101,"^S",707,"^9","not-found"]]],"~i481",["^ ","^14",[["^ ","^R",109,"^S",601,"^9","self"],["^ ","^R",4,"^S",603,"^9","self"]]],"~i482",["^ ","~i4",[["^ ","^R",0,"^S",604],["^ ","^R",0,"^S",607]],"~i8",[["^ ","^R",3,"^S",604],["^ ","^R",17,"^S",604]],"^U",[["^ ","^R",4,"^S",604,"^9","cnt"]]],"~i483",["^ ","~i6",[["^ ","^R",0,"^S",605]],"~i7",[["^ ","^R",7,"^S",605,"^9","cljs.core/rseq"]],"^W",[["^ ","^R",22,"^S",605]],"^T",[["^ ","^R",22,"^S",605,"^9","instaparse.auto-flatten-seq/get-vec"]],"^16",[["^ ","^R",58,"^S",605,"^9","self"]]],"~i486",["^ ","^14",[["^ ","^R",104,"^S",589,"^9","self"],["^ ","^R",4,"^S",591,"^9","self"]]],"~i487",["^ ","~i4",[["^ ","^R",0,"^S",592]],"~i5",[["^ ","^R",7,"^S",592,"^9","cljs.core/-peek"]],"^1E",[["^ ","^R",23,"^S",592]],"^W",[["^ ","^R",23,"^S",592,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1J",[["^ ","^R",59,"^S",592,"^9","self"]]],"~i488",["^ ","~i9",[["^ ","^R",103,"^S",595,"^9","self"],["^ ","^R",4,"^S",597,"^9","self"]]],"~i489",["^ ","~i4",[["^ ","^R",0,"^S",598]],"~i5",[["^ ","^R",7,"^S",598,"^9","cljs.core/-pop"]],"^14",[["^ ","^R",22,"^S",598]],"^1E",[["^ ","^R",22,"^S",598,"^9","instaparse.auto-flatten-seq/get-vec"]],"^V",[["^ ","^R",58,"^S",598,"^9","self"]]],"~i491",["^ ","^1E",[["^ ","^R",111,"^S",629,"^9","self"],["^ ","^R",4,"^S",631,"^9","self"]],"^15",[["^ ","^R",116,"^S",629,"^9","i"]],"^1@",[["^ ","^R",118,"^S",629,"^9","val"]]],"~i492",["^ ","~i4",[["^ ","^R",0,"^S",632]],"~i5",[["^ ","^R",7,"^S",632,"^9","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1E",[["^ ","^R",53,"^S",632]],"^W",[["^ ","^R",53,"^S",632,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1J",[["^ ","^R",89,"^S",632,"^9","self"]],"^1G",[["^ ","^R",99,"^S",632,"^9","i"]],"^Y",[["^ ","^R",101,"^S",632,"^9","val"]]],"~i493",["^ ","^V",[["^ ","^R",125,"^S",635,"^9","self"],["^ ","^R",4,"^S",637,"^9","self"]],"^1A",[["^ ","^R",130,"^S",635,"^9","k"]]],"~i494",["^ ","~i4",[["^ ","^R",0,"^S",638]],"~i5",[["^ ","^R",7,"^S",638,"^9","cljs.core/-contains-key?"]],"^1J",[["^ ","^R",38,"^S",638]],"^16",[["^ ","^R",38,"^S",638,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1:",[["^ ","^R",74,"^S",638,"^9","self"]],"^2;",[["^ ","^R",84,"^S",638,"^9","k"]]],"~i496",["^ ","^1?",[["^ ","^R",112,"^S",549,"^9","self"],["^ ","^R",4,"^S",551,"^9","self"]],"^1J",[["^ ","^R",117,"^S",549,"^9","f"]],"^X",[["^ ","^R",119,"^S",549,"^9","init"]]],"~i497",["^ ","~i4",[["^ ","^R",0,"^S",552]],"~i5",[["^ ","^R",7,"^S",552,"^9","cljs.core/-kv-reduce"]],"^15",[["^ ","^R",28,"^S",552]],"^Z",[["^ ","^R",28,"^S",552,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1[",[["^ ","^R",64,"^S",552,"^9","self"]],"^11",[["^ ","^R",74,"^S",552,"^9","f"]],"^10",[["^ ","^R",76,"^S",552,"^9","init"]]],"~i499",["^ ","^T",[["^ ","^R",112,"^S",710,"^9","self"],["^ ","^R",4,"^S",712,"^9","self"]],"^1@",[["^ ","^R",117,"^S",710,"^9","that"]]],"~i500",["^ ","~i4",[["^ ","^R",0,"^S",713]],"~i5",[["^ ","^R",7,"^S",713,"^9","cljs.core/-compare"]],"^U",[["^ ","^R",26,"^S",713]],"^1?",[["^ ","^R",26,"^S",713,"^9","instaparse.auto-flatten-seq/get-vec"]],"^1K",[["^ ","^R",62,"^S",713,"^9","self"]],"^1:",[["^ ","^R",72,"^S",713,"^9","that"]]],"~i504",["^ ","~i3",[["^ ","^R",0,"^S",732],["^ ","^R",0,"^S",732],["^ ","^R",0,"^S",732],["^ ","^R",0,"^S",732],["^ ","^R",0,"^S",732],["^ ","^R",90,"^S",732,"^9","cljs.core/PROTOCOL_SENTINEL"],["^ ","^R",0,"^S",734],["^ ","^R",0,"^S",734],["^ ","^R",0,"^S",734]]],"~i505",["^ ","~i5",[["^ ","^R",0,"^S",732,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"],["^ ","^R",0,"^S",734,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]]],"~i506",["^ ","~i5",[["^ ","^R",108,"^S",734],["^ ","^R",0,"^S",735],["^ ","^R",0,"^S",735],["^ ","^R",12,"^S",735],["^ ","^R",0,"^S",736]],"^1@",[["^ ","^R",119,"^S",734,"^9","v"],["^ ","^R",4,"^S",735,"^9","v"]],"^1J",[["^ ","^R",121,"^S",734,"^9","writer"]],"^19",[["^ ","^R",128,"^S",734,"^9","opts"]]],"~i507",["^ ","~i7",[["^ ","^R",0,"^S",736]],"~i8",[["^ ","^R",7,"^S",736,"^9","cljs.core/-pr-writer"]],"^V",[["^ ","^R",28,"^S",736]],"^1J",[["^ ","^R",28,"^S",736,"^9","instaparse.auto-flatten-seq/get-vec"]],"^Y",[["^ ","^R",64,"^S",736,"^9","v"]],"^11",[["^ ","^R",71,"^S",736,"^9","writer"]],"^1;",[["^ ","^R",78,"^S",736,"^9","opts"]]],"~i509",["^ ","~i0",[["^ ","^R",0,"^S",738],["^ ","^R",49,"^S",738],["^ ","^R",0,"^S",739]],"~i6",[["^ ","^R",0,"^S",738,"^9","instaparse.auto-flatten-seq/convert-afs-to-vec"]],"^22",[["^ ","^R",106,"^S",738,"^9","afs"]]],"~i510",["^ ","~i2",[["^ ","^R",0,"^S",739],["^ ","^R",0,"^S",746]]],"~i511",["^ ","~i4",[["^ ","^R",20,"^S",739]],"^T",[["^ ","^R",20,"^S",739,"^9","afs"]]],"~i512",["^ ","~i4",[["^ ","^R",0,"^S",740]],"~i8",[["^ ","^R",20,"^S",740]],"~i9",[["^ ","^R",20,"^S",740,"^9","instaparse.auto-flatten-seq/cached?"]],"^Z",[["^ ","^R",62,"^S",740,"^9","afs"]]],"~i513",["^ ","~i6",[["^ ","^R",0,"^S",741]],"~i7",[["^ ","^R",7,"^S",741,"^9","cljs.core/vec"]],"^1E",[["^ ","^R",21,"^S",741]],"^W",[["^ ","^R",21,"^S",741,"^9","cljs.core/seq"]],"^15",[["^ ","^R",35,"^S",741,"^9","afs"]]],"~i521",["^ ","~i9",[["^ ","^R",0,"^S",743],["^ ","^R",12,"^S",743,"^9","instaparse.auto-flatten-seq/FlattenOnDemandVector"]]],"~i522",["^ ","^14",[["^ ","^R",62,"^S",743]],"^1E",[["^ ","^R",62,"^S",743,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^15",[["^ ","^R",107,"^S",743]],"^16",[["^ ","^R",107,"^S",743,"^9","afs"]]],"~i523",["^ ","^14",[["^ ","^R",114,"^S",743]],"^X",[["^ ","^R",114,"^S",743,"^9","afs"]]],"~i524",["^ ","^14",[["^ ","^R",127,"^S",743]],"^Z",[["^ ","^R",127,"^S",743,"^9","afs"]]],"~i525",["^ ","^14",[["^ ","^R",135,"^S",743],["^ ","^R",180,"^S",743]],"^1E",[["^ ","^R",135,"^S",743,"^9","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i527",["^ ","~i4",[["^ ","^R",0,"^S",746]],"~i9",[["^ ","^R",7,"^S",746,"^9","afs"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["^J","instaparse/auto_flatten_seq.cljc"],1516731432000,["~:macro","^?"],1516731430000,["^J","goog/math/math.js"],1516731431000,["^J","goog/array/array.js"],1516731431000,["^J","goog/debug/error.js"],1516731431000,["^J","goog/dom/nodetype.js"],1516731431000,["^J","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^J","goog/math/long.js"],1516731431000,["^J","goog/functions/functions.js"],1516731431000,["^J","goog/structs/map.js"],1516731431000,["^J","goog/asserts/asserts.js"],1516731431000,["^J","goog/uri/uri.js"],1516731431000,["^J","goog/base.js"],1516731431000,["^J","goog/structs/structs.js"],1516731431000,["^J","goog/string/string.js"],1516731431000,["^J","goog/reflect/reflect.js"],1516731431000,["^J","goog/string/stringbuffer.js"],1516731431000,["^J","goog/iter/iter.js"],1516731431000,["^J","cljs/core.cljs"],1516731430000,["^J","goog/math/integer.js"],1516731431000,["^J","goog/uri/utils.js"],1516731431000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ "],"^6",null,"^7",["^8",["~$EMPTY"]],"~:shadow/js-access-properties",["^8",["toString"]],"^9","^:","^=",null,"^>",["^ ","^?","^?","^@","^@"],"^A",["^8",[]],"~:shadow/js-access-global",["^8",["Error"]],"^B",null,"~:defs",["^ ","~$FlattenOnDemandVector",["^ ","^9","~$instaparse.auto-flatten-seq/FlattenOnDemandVector","~:type",true,"~:tag","^6E","~:num-fields",4,"~:record",false,"~:file","instaparse/auto_flatten_seq.cljc","~:line",422,"~:column",10],"~$AutoFlattenSeq",["^ ","^9","~$instaparse.auto-flatten-seq/AutoFlattenSeq","^6F",true,"^6G","^6N","^6H",6,"^6I",false,"^6J","instaparse/auto_flatten_seq.cljc","^6K",167,"^6L",10],"~$GetVec",["^ ","^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",310,"^6L",14,"~:end-line",310,"~:end-column",20,"~:doc",null,"~:protocol-symbol",true,"~:jsdoc",["^E",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$get-vec",[["~$self"]]]]],"^6S",true,"^9","~$instaparse.auto-flatten-seq/GetVec","^6J","instaparse/auto_flatten_seq.cljc","^6Q",20,"^6L",1,"^6K",310,"^6U",["^ ","^6V",["^ ","^6W",[["^6X"]]]],"~:info",null,"^6P",310,"^6G","~$any","~:impls",["^8",["^6E"]],"^6R",null,"^6T",["^E",["@interface"]]],"~$delve",["^ ","~:protocol-inline",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",57,"^6L",7,"^6P",57,"^6Q",12,"~:arglists",["^E",["~$quote",["^E",[["~$v","~$index"]]]]]],"^9","~$instaparse.auto-flatten-seq/delve","~:variadic",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",12,"~:method-params",["^E",[["~$v","^75"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^6L",1,"^6K",57,"^6P",57,"~:max-fixed-arity",2,"~:fn-var",true,"^73",["^E",["^74",["^E",[["~$v","^75"]]]]]],"~$flat-seq",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",76,"^6L",7,"^6P",76,"^6Q",15,"^73",["^E",["^74",["^E",[["~$v"],["~$v","^75"]]]]],"~:top-fn",["^ ","^77",false,"^7;",2,"^78",["^E",[["~$v"],["~$v","^75"]]],"^73",["^E",[["~$v"],["~$v","^75"]]],"^7:",["^E",[null,null]]]],"^9","~$instaparse.auto-flatten-seq/flat-seq","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",15,"^7>",["^ ","^77",false,"^7;",2,"^78",["^E",[["~$v"],["~$v","^75"]]],"^73",["^E",[["~$v"],["~$v","^75"]]],"^7:",["^E",[null,null]]],"^78",["^E",[["~$v"],["~$v","^75"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",76,"^6P",76,"^7;",2,"^7<",true,"^73",["^E",[["~$v"],["~$v","^75"]]]],"~$advance",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",64,"^6L",7,"^6P",64,"^6Q",14,"^73",["^E",["^74",["^E",[["~$v","^75"]]]]]],"^9","~$instaparse.auto-flatten-seq/advance","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",14,"^78",["^E",[["~$v","^75"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",64,"^6P",64,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["~$v","^75"]]]]]],"~$expt",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",47,"^6L",11,"^6P",47,"^6Q",15,"~:private",true,"^73",["^E",["^74",["^E",[["~$base","~$pow"]]]]]],"^7C",true,"^9","~$instaparse.auto-flatten-seq/expt","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",15,"^78",["^E",[["^7D","^7E"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",47,"^6P",47,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^7D","^7E"]]]]]],"~$flat-vec",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",305,"^6L",7,"^6P",305,"^6Q",15,"^73",["^E",["^74",["^E",[["~$v"]]]]],"^6R","Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec"],"^9","~$instaparse.auto-flatten-seq/flat-vec","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",15,"^78",["^E",[["~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",305,"^6P",305,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$v"]]]]],"^6R","Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec"],"~$flat-vec-helper",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",297,"^6L",7,"^6P",297,"^6Q",22,"^73",["^E",["^74",["^E",[["~$acc","~$v"]]]]]],"^9","~$instaparse.auto-flatten-seq/flat-vec-helper","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",22,"^78",["^E",[["^7J","~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",297,"^6P",297,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^7J","~$v"]]]]]],"~$hash-conj",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",29,"^6L",18,"^6P",29,"^6Q",27,"^6G","~$number","^73",["^E",["^74",["^E",[["~$unmixed-hash","~$item"]]]]],"^6R","Returns the hash code, consistent with =, for an external ordered\n  collection implementing Iterable.\n  See http://clojure.org/data_structures#hash for full algorithms."],"^9","~$instaparse.auto-flatten-seq/hash-conj","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",27,"^78",["^E",[["^7N","^7O"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",29,"~:ret-tag","^7M","^6P",29,"^7;",2,"^6G","^7M","^7<",true,"^73",["^E",["^74",["^E",[["^7N","^7O"]]]]],"^6R","Returns the hash code, consistent with =, for an external ordered\n  collection implementing Iterable.\n  See http://clojure.org/data_structures#hash for full algorithms."],"~$hash-ordered-coll-without-mix",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",260,"^6L",18,"^6P",260,"^6Q",47,"^6G","^7M","^73",["^E",["^74",["^E",[["~$coll"],["~$existing-unmixed-hash","^7S"]]]]],"^6R","Returns the partially calculated hash code, still requires a call to mix-collection-hash","^7>",["^ ","^77",false,"^7;",2,"^78",["^E",[["^7S"],["^7T","^7S"]]],"^73",["^E",[["^7S"],["^7T","^7S"]]],"^7:",["^E",[null,null]]]],"^9","~$instaparse.auto-flatten-seq/hash-ordered-coll-without-mix","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",47,"^7>",["^ ","^77",false,"^7;",2,"^78",["^E",[["^7S"],["^7T","^7S"]]],"^73",["^E",[["^7S"],["^7T","^7S"]]],"^7:",["^E",[null,null]]],"^78",["^E",[["^7S"],["^7T","^7S"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",260,"^7Q","^7M","^6P",260,"^7;",2,"^6G","^7M","^7<",true,"^73",["^E",[["^7S"],["^7T","^7S"]]],"^6R","Returns the partially calculated hash code, still requires a call to mix-collection-hash"],"~$true-count",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",290,"^6L",7,"^6P",290,"^6Q",17,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"^9","~$instaparse.auto-flatten-seq/true-count","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",17,"^78",["^E",[["~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",290,"^6P",290,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"~$convert-afs-to-vec",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",510,"^6L",7,"^6P",510,"^6Q",25,"^73",["^E",["^74",["^E",[["~$afs"]]]]]],"^9","~$instaparse.auto-flatten-seq/convert-afs-to-vec","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",25,"^78",["^E",[["^7Y"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",510,"^6P",510,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["^7Y"]]]]]],"~$hash-cat",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",240,"^6L",11,"^6P",240,"^6Q",19,"^7C",true,"^73",["^E",["^74",["^E",[["~$v1","~$v2"]]]]]],"^7C",true,"^9","~$instaparse.auto-flatten-seq/hash-cat","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",19,"^78",["^E",[["^80","^81"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",4,"^6K",240,"^6P",240,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^80","^81"]]]]]],"~$auto-flatten-seq",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",278,"^6L",7,"^6P",278,"^6Q",23,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"^9","~$instaparse.auto-flatten-seq/auto-flatten-seq","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",23,"^78",["^E",[["~$v"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",278,"^6P",278,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$v"]]]]]],"~$afs?",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",287,"^6L",7,"^6P",287,"^6Q",11,"^73",["^E",["^74",["^E",[["~$s"]]]]]],"^9","~$instaparse.auto-flatten-seq/afs?","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",11,"^78",["^E",[["~$s"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",287,"^6P",287,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["~$s"]]]]]],"~$threshold",["^ ","^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",5,"^6L",14,"^6P",5,"^6Q",23,"~:const",true],"^9","~$instaparse.auto-flatten-seq/threshold","^6J","instaparse/auto_flatten_seq.cljc","^6Q",23,"~:const-expr",["^ ","^;","~:constant","~:env",["^ ","~:context","~:expr"],"^D",32,"^6G","^7M"],"^6L",1,"^88",true,"^6K",5,"^6P",5,"^6G","^7M"],"~$->FlattenOnDemandVector",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",422,"^6L",10,"^6P",422,"^6Q",31,"~:protocols",["^8",["~$cljs.core/IIndexed","~$cljs.core/IVector","~$cljs.core/IReversible","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/IEmptyableCollection","~$cljs.core/ICounted","^6Y","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/IStack","~$cljs.core/IComparable","~$cljs.core/ISequential","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/ILookup"]],"~:skip-protocol-flag",["^8",["^8A","^8B","^8C","^8D","^8E","^8F","^8G","^8H","^8J","^8K","^8L","^8M","^8N","^8O","^8P","^8Q","^8R","^8S"]],"~:factory","~:positional","^73",["^E",["^74",["^E",[["~$v","~$hashcode","~$cnt","~$flat"]]]]]],"^8@",["^8",["^8A","^8B","^8C","^8D","^8E","^8F","^8G","^8H","^8I","^8J","^8K","^6Y","^8L","^8M","^8N","^8O","^8P","^8Q","^8R","^8S"]],"^9","~$instaparse.auto-flatten-seq/->FlattenOnDemandVector","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",31,"^78",["^E",[["~$v","^8W","^8X","^8Y"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^8U","^8V","^6K",422,"^6P",422,"^7;",4,"^7<",true,"^73",["^E",["^74",["^E",[["~$v","^8W","^8X","^8Y"]]]]],"^8T",["^8",["^8A","^8B","^8C","^8D","^8E","^8F","^8G","^8H","^8J","^8K","^8L","^8M","^8N","^8O","^8P","^8Q","^8R","^8S"]]],"~$conj-flat",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",8,"^6L",4,"^6P",8,"^6Q",13,"~:protocol","~$instaparse.auto-flatten-seq/ConjFlat","^6R",null,"^73",["^E",["^74",["^E",[["^6X","~$obj"]]]]]],"^90","^91","^9","~$instaparse.auto-flatten-seq/conj-flat","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",13,"^78",["^E",[["^6X","^92"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",7,"^6P",8,"^7;",2,"^7<",true,"^73",["^E",["^74",["^E",[["^6X","^92"]]]]],"^6R",null],"^6W",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",311,"^6L",22,"^6P",311,"^6Q",29,"^6G","~$PersistentVector","^90","^6Y","^6R",null,"^73",["^E",["^74",["^E",[["^6X"]]]]]],"^90","^6Y","^9","~$instaparse.auto-flatten-seq/get-vec","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",29,"^78",["^E",[["^6X"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",310,"^7Q","^94","^6P",311,"^7;",1,"^6G","^94","^7<",true,"^73",["^E",["^74",["^E",[["^6X"]]]]],"^6R",null],"~$->AutoFlattenSeq",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",167,"^6L",10,"^6P",167,"^6Q",24,"^8@",["^8",["^8E","^8F","^8H","^8I","^8J","^8K","~$cljs.core/ISeq","~$cljs.core/INext","^91","^8L","^8M","^8P","^8Q","^8S"]],"^8T",["^8",["^8E","^8F","^8H","^8J","^8K","^97","^98","^8L","^8M","^8P","^8Q","^8S"]],"^8U","^8V","^73",["^E",["^74",["^E",[["~$v","~$premix-hashcode","^8W","^8X","~$dirty","~$cached-seq"]]]]]],"^8@",["^8",["^8E","^8F","^8H","^8I","^8J","^8K","^97","^98","^91","^8L","^8M","^8P","^8Q","^8S"]],"^9","~$instaparse.auto-flatten-seq/->AutoFlattenSeq","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",24,"^78",["^E",[["~$v","^99","^8W","^8X","^9:","^9;"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^8U","^8V","^6K",167,"^6P",167,"^7;",6,"^7<",true,"^73",["^E",["^74",["^E",[["~$v","^99","^8W","^8X","^9:","^9;"]]]]],"^8T",["^8",["^8E","^8F","^8H","^8J","^8K","^97","^98","^8L","^8M","^8P","^8Q","^8S"]]],"^6@",["^ ","^9","~$instaparse.auto-flatten-seq/EMPTY","^6J","instaparse/auto_flatten_seq.cljc","^6K",285,"^6L",1,"^6P",285,"^6Q",11,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",285,"^6L",6,"^6P",285,"^6Q",11],"^6G","^6["],"~$ConjFlat",["^ ","^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",7,"^6L",14,"^6P",7,"^6Q",22,"^6R",null,"^6S",true,"^6T",["^E",["@interface"]],"^6U",["^ ","^6V",["^ ","^8[",[["^6X","^92"]],"~$cached?",[["^6X"]]]]],"^6S",true,"^9","^91","^6J","instaparse/auto_flatten_seq.cljc","^6Q",22,"^6L",1,"^6K",7,"^6U",["^ ","^6V",["^ ","^8[",[["^6X","^92"]],"^9?",[["^6X"]]]],"^6Z",null,"^6P",7,"^6G","^6[","^70",["^8",["^6N"]],"^6R",null,"^6T",["^E",["@interface"]]],"^9?",["^ ","^72",null,"^5",["^ ","^6J","instaparse/auto_flatten_seq.cljc","^6K",9,"^6L",4,"^6P",9,"^6Q",11,"^90","^91","^6R",null,"^73",["^E",["^74",["^E",[["^6X"]]]]]],"^90","^91","^9","~$instaparse.auto-flatten-seq/cached?","^77",false,"^6J","instaparse/auto_flatten_seq.cljc","^6Q",11,"^78",["^E",[["^6X"]]],"^79",null,"^7:",["^E",[null,null]],"^6L",1,"^6K",7,"^6P",9,"^7;",1,"^7<",true,"^73",["^E",["^74",["^E",[["^6X"]]]]],"^6R",null]],"^C",["^ ","^?","^?"],"~:cljs.analyzer/constants",["^ ","^A",["^8",["~$boolean","^99","~:else","^9:","~$v","^7M","^9;","~:unsynchronized-mutable","^94","~$ISeq","^8X","^6G","^8Y","^8W"]],"~:order",["^9C","~$v","^6G","^94","^99","^7M","^8W","^8X","^9:","^9B","^9;","^9D","^9E","^8Y"]],"^G",["^ "],"^H",["^@","^?"]],"^<","^:","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^6<",[["^9I","~:static-fns"],true,["^9I","~:elide-asserts"],false,["^9I","~:optimize-constants"],null,["^9I","~:emit-constants"],null,["^9I","~:infer-externs"],true,["^9I","^O"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^9I","~:fn-invoke-direct"],null,["^9I","^Q"],"/dev/null"]]]