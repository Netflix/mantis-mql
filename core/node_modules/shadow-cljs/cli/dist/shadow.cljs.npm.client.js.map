{"version":3,"file":"shadow.cljs.npm.client.js","sources":["shadow/cljs/npm/client.cljs"],"mappings":"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","names":["shadow.cljs.npm.client/repl-client","socket","args","last-prompt-ref","cljs.core/volatile!","rl","G__33082","js/shadow.js.shim.module$readline.createInterface","js/process.stdin","js/process.stdout","prefix","callback","cljs.core/deref","last-prompt","cljs.core/not","G__33083","G__33084","cljs.core/clj->js","G__33085","G__33086","write","text","cljs.core/vreset!","repl-mode?","exit-token","cljs.core/random-uuid","error-token","stop!","cljs.core/println","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","line","data","vec__33087","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","txt","action","clojure.string/includes?","clojure.string/replace","js/process.stdout.write","G__33090","cljs.core/Keyword","js/Error","js/process.exit","prompts","cljs.core/re-seq","seq__33091","cljs.core/seq","chunk__33092","count__33093","i__33094","vec__33095","temp__5457__auto__","cljs.core/chunked-seq?","c__17073__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33098","cljs.core/first","cljs.core/next","prompt","root-id","level-id","ns","m","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","js/parseInt","shadow.cljs.npm.client/socket-pipe","stdin-read","buffer","js/process.stdin.on","vec__33133","G__33136","js/process.stdin.removeListener","shadow.cljs.npm.client/run","project-root","config","server-pid-file","opts","cli-repl","shadow.cljs.npm.util/slurp","G__33138","G__33139","cljs.core/pos-int?","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","connect-listener","err","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__33140","G__33141","js/shadow.js.shim.module$net.connect","js/shadow.js.shim.module$fs.unlinkSync"],"sourcesContent":["(ns shadow.cljs.npm.client\n  (:require [cljs.reader :as reader]\n            [\"readline\" :as rl]\n            [\"net\" :as node-net]\n            [\"fs\" :as fs]\n            [shadow.cljs.npm.util :as util]\n            [clojure.string :as str]))\n\n(defn repl-client\n  \"readline client that tries to maintain a prompt. not quite smart yet.\"\n  [^js socket args]\n  (let [last-prompt-ref\n        (volatile! nil)\n\n        rl\n        (rl/createInterface\n          #js {:input js/process.stdin\n               :output js/process.stdout\n               :completer\n               (fn [prefix callback]\n                 (let [last-prompt @last-prompt-ref]\n                   ;; without a prompt we can't autocomplete\n                   (if-not last-prompt\n                     (callback nil (clj->js [[] prefix]))\n\n                     ;; FIXME: hook this up properly\n                     (callback nil (clj->js [[] prefix])))))})\n\n        write\n        (fn [text]\n          ;; assume that everything we send is (read) which reads something\n          ;; we can never autocomplete\n          ;; and only a new prompt enables it\n          (vreset! last-prompt-ref nil)\n          (.write socket text))\n\n        repl-mode?\n        false\n\n        exit-token\n        (str (random-uuid))\n\n        error-token\n        (str (random-uuid))\n\n        stop!\n        (fn []\n          (.close rl)\n          (.end socket)\n          (println))]\n\n    (println \"shadow-cljs - connected to server\")\n\n    ;; FIXME: this is an ugly hack that will be removed soon\n    ;; its just a quick way to interact with the server without a proper API protocol\n    (write (str \"(shadow.cljs.devtools.cli/from-remote \" (pr-str exit-token) \" \" (pr-str error-token) \" \" (pr-str (into [] args)) \")\\n\"))\n\n    (.on rl \"line\"\n      (fn [line]\n        (write (str line \"\\n\"))))\n\n    ;; CTRL+D closes the rl\n    (.on rl \"close\"\n      (fn []\n        (stop!)))\n\n    (.on socket \"data\"\n      (fn [data]\n        (let [txt\n              (.toString data)\n\n              [action txt]\n              (cond\n                (str/includes? txt exit-token)\n                [:close (str/replace txt (str exit-token \"\\n\") \"\")]\n\n                (str/includes? txt error-token)\n                [:exit (str/replace txt (str error-token \"\\n\") \"\")]\n\n                :else\n                [:continue txt])]\n\n          (js/process.stdout.write txt)\n\n          (case action\n            :close\n            (stop!)\n\n            :exit\n            (js/process.exit 1)\n\n            :continue\n            (let [prompts\n                  (re-seq #\"\\[(\\d+):(\\d+)\\]\\~([^=> \\n]+)=> \" txt)]\n\n              (doseq [[prompt root-id level-id ns :as m] prompts]\n                (vreset! last-prompt-ref {:text prompt\n                                          :ns (symbol ns)\n                                          :level (js/parseInt level-id 10)\n                                          :root (js/parseInt root-id 10)})\n                (.setPrompt rl prompt))\n\n              (when @last-prompt-ref\n                (.prompt rl true)))))))\n\n    (.on socket \"end\" #(.close rl))\n    ))\n\n(defn socket-pipe\n  \"client that just pipes everything through the socket without any processing\"\n  [^js socket args]\n  (let [write\n        (fn [text]\n          (.write socket text))\n\n        exit-token\n        (str (random-uuid))\n\n        error-token\n        (str (random-uuid))\n\n        stop!\n        (fn []\n          (.end socket))\n\n        stdin-read\n        (fn [buffer]\n          (write (.toString buffer)))]\n\n    (write (str \"(shadow.cljs.devtools.cli/from-remote \" (pr-str exit-token) \" \" (pr-str error-token) \" \" (pr-str (into [] args)) \")\\n\"))\n\n    (js/process.stdin.on \"data\" stdin-read)\n    (js/process.stdin.on \"close\" stop!)\n\n    (.on socket \"data\"\n      (fn [data]\n        (let [txt\n              (.toString data)\n\n              [action txt]\n              (cond\n                (str/includes? txt exit-token)\n                [:close (str/replace txt (str exit-token \"\\n\") \"\")]\n\n                (str/includes? txt error-token)\n                [:exit (str/replace txt (str error-token \"\\n\") \"\")]\n\n                :else\n                [:continue txt])]\n\n          (js/process.stdout.write txt)\n\n          (case action\n            :close\n            (stop!)\n\n            :exit\n            (js/process.exit 1)\n\n            :continue\n            nil))))\n\n    (.on socket \"end\"\n      (fn []\n        (js/process.stdin.removeListener \"data\" stdin-read)\n        (js/process.stdin.removeListener \"close\" stop!)\n        ))))\n\n(defn run [project-root config server-pid-file opts args]\n  (let [cli-repl\n        (-> (util/slurp server-pid-file)\n            (js/parseInt 10))]\n\n    (if-not (pos-int? cli-repl)\n      (prn [:no-socket-repl-port server-pid-file cli-repl])\n      (let [connect-listener\n            (fn [err]\n              (this-as socket\n                (if (get-in opts [:options :stdin])\n                  (socket-pipe socket args)\n                  (repl-client socket args))))\n\n            socket\n            (node-net/connect\n              #js {:port cli-repl\n                   :host \"localhost\"\n                   :timeout 1000}\n              connect-listener)]\n\n        (.on socket \"error\"\n          (fn [err]\n            (println \"shadow-cljs - socket connect failed, server process dead?\")\n            (fs/unlinkSync server-pid-file)\n            ;; FIXME: should do this automatically?\n            (println \"deleted pid file, please retry command to start new server\")\n            (js/process.exit 1)))\n        ))))\n\n"]}