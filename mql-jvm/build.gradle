buildscript {
  repositories { 
    maven {
    url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.netflix.nebula:nebula-clojure-plugin:8.1.4'
    classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
  }
}

apply plugin: 'nebula.clojure'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

group = "io.mantisrx" 

clojure.aotCompile = true

repositories { 
  mavenCentral()
  maven { url "https://clojars.org/repo" }
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
  compile project(":mql-core")
  compile 'org.clojure:clojure:1.8.0'
  compile 'org.clojure:data.json:0.2.3'
  compile 'instaparse:instaparse:1.4.9'
  compile 'io.reactivex:rxjava:1.+'
  compile 'io.reactivex:rxclojure:1.+'
  testCompile 'criterium:criterium:0.4.4'
  testCompile 'org.clojure:test.check:0.9.0'
  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:3.12.2'
  testCompile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.9'
  testCompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.9'
  testCompile 'com.fasterxml.jackson.core:jackson-core:2.9.9'
  testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
  testCompile 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
}

jar {
  enabled = false
}
jar.dependsOn(shadowJar)

shadowJar {
    classifier = null
      dependencies {
        include dependency("org.clojure:clojure:1.8.0")
        include dependency("org.clojure:data.json:0.2.3")
        include dependency("instaparse:instaparse:1.4.9")
        include dependency("io.reactivex:rxjava:1.+")
        include dependency("io.reactivex:rxclojure:1.+")
        include dependency(":mql-core")
      }
    relocate 'clojure', 'io.mantisrx.mql.shaded.clojure'
    relocate 'instaparse', 'io.mantisrx.mql.shaded.instaparse'
    relocate 'rx', 'io.mantisrx.mql.shaded.rx'
  }

publishing {
  publications {
    // to remove shaded dependency from pom.xml
    withType(MavenPublication) {
      pom.withXml {
        asNode()
          .dependencies
          .dependency
          .findAll {
            ['clojure',
             'data.json',
             'instaparse',
             'rxjava',
             'rxclojure'
            ].contains(it.artifactId.text())
          }
        .each { it.parent().remove(it) }
      }
    }
  }
}
