buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.netflix.nebula:nebula-clojure-plugin:8.1.4"
  }
}

repositories {
  mavenCentral()
  maven { url "https://clojars.org/repo" }
}

apply plugin: 'java'
apply plugin: 'nebula.clojure'

clojure.aotCompile=true

group = "io.mantisrx" 

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
  compile 'org.clojure:clojure:1.8.0'
  compile 'org.clojure:data.json:0.2.3'
  compile 'instaparse:instaparse:1.4.9'
  compile 'io.reactivex:rxjava:1.+'
  compile 'io.reactivex:rxclojure:1.+'
  testCompile 'criterium:criterium:0.4.4'
  testCompile 'org.clojure:test.check:0.9.0'
  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:3.11.1'
}


////////////////////////////////////////////////////////////////////////////////
// Define a task that runs an nrepl server. The port is given with the nreplPort
// property:
//    gradlew nrepl -PnreplPort=9999
// or put the property in ~/.gradle/gradle.propertie9s

def nreplPortValue = project.hasProperty('nreplPort') ? project.nreplPort : '9999'

configurations { nrepl }
dependencies { nrepl 'org.clojure:tools.nrepl:0.2.2' }
task nrepl(type: JavaExec) {
  classpath project.sourceSets.main.clojure.srcDirs,
            project.sourceSets.test.clojure.srcDirs,
            sourceSets.main.runtimeClasspath,
            sourceSets.test.runtimeClasspath,
            configurations.nrepl

              main = "clojure.main"
              args '--eval', "(ns gradle-nrepl (:require [clojure.tools.nrepl.server :refer (start-server stop-server)]))",
            '--eval', "(println \"Starting nrepl server on port $nreplPortValue\")",
            '--eval', "(def server (start-server :port $nreplPortValue))"
}
