["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (max){\nreturn (function (p1__31091_SHARP_){\nreturn (max === p1__31091_SHARP_);\n});})(max))\n,coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__31106 = arguments.length;\nswitch (G__31106) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__6428__auto__ = [];\nvar len__6405__auto___31129 = arguments.length;\nvar i__6406__auto___31130 = (0);\nwhile(true){\nif((i__6406__auto___31130 < len__6405__auto___31129)){\nargs_arr__6428__auto__.push((arguments[i__6406__auto___31130]));\n\nvar G__31131 = (i__6406__auto___31130 + (1));\ni__6406__auto___31130 = G__31131;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__6429__auto__ = (new cljs.core.IndexedSeq(args_arr__6428__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6429__auto__);\n\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\nclojure.set.union.cljs$lang$applyTo = (function (seq31103){\nvar G__31104 = cljs.core.first(seq31103);\nvar seq31103__$1 = cljs.core.next(seq31103);\nvar G__31105 = cljs.core.first(seq31103__$1);\nvar seq31103__$2 = cljs.core.next(seq31103__$1);\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__31104,G__31105,seq31103__$2);\n});\n\nclojure.set.union.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__31147 = arguments.length;\nswitch (G__31147) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__6428__auto__ = [];\nvar len__6405__auto___31150 = arguments.length;\nvar i__6406__auto___31151 = (0);\nwhile(true){\nif((i__6406__auto___31151 < len__6405__auto___31150)){\nargs_arr__6428__auto__.push((arguments[i__6406__auto___31151]));\n\nvar G__31152 = (i__6406__auto___31151 + (1));\ni__6406__auto___31151 = G__31152;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__6429__auto__ = (new cljs.core.IndexedSeq(args_arr__6428__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6429__auto__);\n\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__31153 = s2;\nvar G__31154 = s1;\ns1 = G__31153;\ns2 = G__31154;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__31138_SHARP_){\nreturn (- cljs.core.count(p1__31138_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\nclojure.set.intersection.cljs$lang$applyTo = (function (seq31144){\nvar G__31145 = cljs.core.first(seq31144);\nvar seq31144__$1 = cljs.core.next(seq31144);\nvar G__31146 = cljs.core.first(seq31144__$1);\nvar seq31144__$2 = cljs.core.next(seq31144__$1);\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__31145,G__31146,seq31144__$2);\n});\n\nclojure.set.intersection.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__31163 = arguments.length;\nswitch (G__31163) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__6428__auto__ = [];\nvar len__6405__auto___31175 = arguments.length;\nvar i__6406__auto___31176 = (0);\nwhile(true){\nif((i__6406__auto___31176 < len__6405__auto___31175)){\nargs_arr__6428__auto__.push((arguments[i__6406__auto___31176]));\n\nvar G__31177 = (i__6406__auto___31176 + (1));\ni__6406__auto___31176 = G__31177;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__6429__auto__ = (new cljs.core.IndexedSeq(args_arr__6428__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6429__auto__);\n\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n});\n\nclojure.set.difference.cljs$lang$applyTo = (function (seq31160){\nvar G__31161 = cljs.core.first(seq31160);\nvar seq31160__$1 = cljs.core.next(seq31160);\nvar G__31162 = cljs.core.first(seq31160__$1);\nvar seq31160__$2 = cljs.core.next(seq31160__$1);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__31161,G__31162,seq31160__$2);\n});\n\nclojure.set.difference.cljs$lang$maxFixedArity = (2);\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__31180_SHARP_){\nreturn cljs.core.select_keys(p1__31180_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__31186){\nvar vec__31187 = p__31186;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31187,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31187,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__31191_SHARP_){\nreturn clojure.set.rename_keys(p1__31191_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__31200){\nvar vec__31201 = p__31200;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31201,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31201,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__31209 = arguments.length;\nswitch (G__31209) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif((cljs.core.seq(xrel)) && (cljs.core.seq(yrel))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__31212 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31212,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31212,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ks,vec__31212,r,s,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__31215 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__31215) : idx.call(null,G__31215));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,ks,vec__31212,r,s,idx){\nreturn (function (p1__31204_SHARP_,p2__31205_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__31204_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__31205_SHARP_,x], 0)));\n});})(found,ks,vec__31212,r,s,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(ks,vec__31212,r,s,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__31216 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31216,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31216,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31216,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__31216,r,s,k,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__31221 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__31221) : idx.call(null,G__31221));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,vec__31216,r,s,k,idx){\nreturn (function (p1__31206_SHARP_,p2__31207_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__31206_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__31207_SHARP_,x], 0)));\n});})(found,vec__31216,r,s,k,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(vec__31216,r,s,k,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n});\n\nclojure.set.join.cljs$lang$maxFixedArity = 3;\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn ((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__31223_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__31223_SHARP_);\n}),set1));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn ((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__31224_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__31224_SHARP_);\n}),set2));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ "],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^?","~$goog","^@"],"~:seen",["^8",[]],"~:uses",null,"~:require-macros",["^ ","^?","^?"],"~:form",["~#list",["~$ns","^:"]],"~:js-deps",["^ "],"~:deps",["^@","^?"]],"^<","^:","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1535412028051,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^8",["~:cljs"]],"~:source-map",["^ ","~i12",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",1],["^ ","^S",29,"^T",1],["^ ","^S",0,"^T",2],["^ ","^S",0,"^T",2]],"~i7",[["^ ","^S",0,"^T",1,"^9","clojure.set/bubble-max-key"]],"~i23",[["^ ","^S",66,"^T",1,"^9","k"]],"~i25",[["^ ","^S",68,"^T",1,"^9","coll"]]],"~i15",["^ ","~i2",[["^ ","^S",0,"^T",3],["^ ","^S",0,"^T",4]],"~i8",[["^ ","^S",4,"^T",3,"^9","max"]],"^R",[["^ ","^S",10,"^T",3]],"~i13",[["^ ","^S",10,"^T",3,"^9","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"]],"~i19",[["^ ","^S",56,"^T",3,"^9","cljs.core/max-key"]],"~i27",[["^ ","^S",74,"^T",3,"^9","k"]],"~i29",[["^ ","^S",76,"^T",3,"^9","coll"]]],"~i16",["^ ","~i4",[["^ ","^S",0,"^T",4]],"~i5",[["^ ","^S",7,"^T",4,"^9","cljs.core/cons"]],"~i10",[["^ ","^S",22,"^T",4,"^9","max"]],"~i14",[["^ ","^S",26,"^T",4],["^ ","^S",73,"^T",4],["^ ","^S",18,"^T",5,"^9","p1__31091#"],["^ ","^S",0,"^T",6]],"^W",[["^ ","^S",26,"^T",4,"^9","cljs.core.remove.cljs$core$IFn$_invoke$arity$2"]],"^U",[["^ ","^S",0,"^T",6],["^ ","^S",16,"^T",6,"^9","p1__31091#"]],"~i35",[["^ ","^S",8,"^T",6,"^9","max"]],"~i42",[["^ ","^S",1,"^T",8,"^9","coll"]]],"~i18",["^ ","~i0",[["^ ","^S",0,"^T",10],["^ ","^S",0,"^T",10],["^ ","^S",20,"^T",13],["^ ","^S",48,"^T",13,"^9","var_args"],["^ ","^S",0,"^T",14],["^ ","^S",0,"^T",14],["^ ","^S",4,"^T",14,"^9","G__31106"],["^ ","^S",15,"^T",14],["^ ","^S",15,"^T",14],["^ ","^S",0,"^T",15],["^ ","^S",0,"^T",15],["^ ","^S",8,"^T",15,"^9","G__31106"],["^ ","^S",5,"^T",16],["^ ","^S",0,"^T",17],["^ ","^S",7,"^T",17,"^9","clojure.set/union"],["^ ","^S",5,"^T",20],["^ ","^S",0,"^T",21],["^ ","^S",7,"^T",21,"^9","clojure.set/union"],["^ ","^S",55,"^T",21],["^ ","^S",56,"^T",21],["^ ","^S",66,"^T",21],["^ ","^S",5,"^T",24],["^ ","^S",0,"^T",25],["^ ","^S",7,"^T",25,"^9","clojure.set/union"],["^ ","^S",55,"^T",25],["^ ","^S",56,"^T",25],["^ ","^S",66,"^T",25],["^ ","^S",72,"^T",25],["^ ","^S",73,"^T",25],["^ ","^S",83,"^T",25],["^ ","^S",0,"^T",29],["^ ","^S",4,"^T",29,"^9","args-arr__6428__auto__"],["^ ","^S",29,"^T",29],["^ ","^S",0,"^T",30],["^ ","^S",0,"^T",30],["^ ","^S",4,"^T",30,"^9","len__6405__auto__"],["^ ","^S",30,"^T",30],["^ ","^S",30,"^T",30],["^ ","^S",0,"^T",31],["^ ","^S",0,"^T",31],["^ ","^S",4,"^T",31,"^9","i__6406__auto__"],["^ ","^S",28,"^T",31],["^ ","^S",0,"^T",33],["^ ","^S",0,"^T",33],["^ ","^S",3,"^T",33],["^ ","^S",4,"^T",33,"^9","i__6406__auto__"],["^ ","^S",28,"^T",33,"^9","len__6405__auto__"],["^ ","^S",0,"^T",34],["^ ","^S",0,"^T",34],["^ ","^S",0,"^T",34,"^9","args-arr__6428__auto__"],["^ ","^S",28,"^T",34],["^ ","^S",29,"^T",34],["^ ","^S",39,"^T",34,"^9","i__6406__auto__"],["^ ","^S",0,"^T",36],["^ ","^S",15,"^T",36],["^ ","^S",16,"^T",36,"^9","i__6406__auto__"],["^ ","^S",40,"^T",36],["^ ","^S",0,"^T",40],["^ ","^S",0,"^T",44],["^ ","^S",4,"^T",44,"^9","argseq__6429__auto__"],["^ ","^S",27,"^T",44],["^ ","^S",32,"^T",44,"^9","cljs.core/IndexedSeq"],["^ ","^S",53,"^T",44],["^ ","^S",53,"^T",44,"^9","args-arr__6428__auto__"],["^ ","^S",82,"^T",44],["^ ","^S",87,"^T",44],["^ ","^S",91,"^T",44],["^ ","^S",0,"^T",45],["^ ","^S",0,"^T",45],["^ ","^S",7,"^T",45,"^9","clojure.set/union"],["^ ","^S",62,"^T",45],["^ ","^S",63,"^T",45],["^ ","^S",73,"^T",45],["^ ","^S",79,"^T",45],["^ ","^S",80,"^T",45],["^ ","^S",90,"^T",45],["^ ","^S",96,"^T",45,"^9","argseq__6429__auto__"],["^ ","^S",0,"^T",50],["^ ","^S",0,"^T",50],["^ ","^S",50,"^T",50],["^ ","^S",0,"^T",51],["^ ","^S",0,"^T",51],["^ ","^S",0,"^T",54],["^ ","^S",0,"^T",54],["^ ","^S",50,"^T",54],["^ ","^S",0,"^T",55],["^ ","^S",0,"^T",58],["^ ","^S",0,"^T",58],["^ ","^S",50,"^T",58],["^ ","^S",0,"^T",59],["^ ","^S",0,"^T",66],["^ ","^S",0,"^T",66],["^ ","^S",0,"^T",66],["^ ","^S",57,"^T",66],["^ ","^S",0,"^T",67],["^ ","^S",0,"^T",71],["^ ","^S",0,"^T",71],["^ ","^S",38,"^T",71],["^ ","^S",49,"^T",71,"^9","seq31103"],["^ ","^S",0,"^T",72],["^ ","^S",0,"^T",72],["^ ","^S",4,"^T",72,"^9","G__31104"],["^ ","^S",15,"^T",72],["^ ","^S",15,"^T",72,"^9","cljs.core/first"],["^ ","^S",31,"^T",72,"^9","seq31103"],["^ ","^S",4,"^T",73,"^9","seq31103"],["^ ","^S",19,"^T",73],["^ ","^S",19,"^T",73,"^9","cljs.core/next"],["^ ","^S",34,"^T",73,"^9","seq31103"],["^ ","^S",4,"^T",74,"^9","G__31105"],["^ ","^S",15,"^T",74],["^ ","^S",15,"^T",74,"^9","cljs.core/first"],["^ ","^S",31,"^T",74,"^9","seq31103"],["^ ","^S",4,"^T",75,"^9","seq31103"],["^ ","^S",19,"^T",75],["^ ","^S",19,"^T",75,"^9","cljs.core/next"],["^ ","^S",34,"^T",75,"^9","seq31103"],["^ ","^S",0,"^T",76],["^ ","^S",0,"^T",76],["^ ","^S",62,"^T",76,"^9","G__31104"],["^ ","^S",71,"^T",76,"^9","G__31105"],["^ ","^S",80,"^T",76,"^9","seq31103"],["^ ","^S",0,"^T",79],["^ ","^S",0,"^T",79],["^ ","^S",44,"^T",79],["^ ","^S",0,"^T",81]],"~i6",[["^ ","^S",0,"^T",13,"^9","clojure.set/union"],["^ ","^S",0,"^T",50,"^9","clojure.set/union"],["^ ","^S",0,"^T",54,"^9","clojure.set/union"],["^ ","^S",0,"^T",58,"^9","clojure.set/union"],["^ ","^S",0,"^T",66,"^9","clojure.set/union"],["^ ","^S",0,"^T",71,"^9","clojure.set/union"],["^ ","^S",7,"^T",76,"^9","clojure.set/union"],["^ ","^S",0,"^T",79,"^9","clojure.set/union"]]],"~i21",["^ ","~i4",[["^ ","^S",61,"^T",54,"^9","s1"]],"~i8",[["^ ","^S",0,"^T",55,"^9","s1"]]],"~i22",["^ ","~i4",[["^ ","^S",61,"^T",58,"^9","s1"]],"~i7",[["^ ","^S",64,"^T",58,"^9","s2"]]],"^U",["^ ","~i5",[["^ ","^S",0,"^T",59]],"~i9",[["^ ","^S",3,"^T",59]],"^R",[["^ ","^S",4,"^T",59]],"^X",[["^ ","^S",4,"^T",59,"^9","cljs.core/count"]],"^Y",[["^ ","^S",20,"^T",59,"^9","s1"]],"^U",[["^ ","^S",26,"^T",59]],"~i24",[["^ ","^S",26,"^T",59,"^9","cljs.core/count"]],"~i30",[["^ ","^S",42,"^T",59,"^9","s2"]]],"^18",["^ ","~i7",[["^ ","^S",0,"^T",60]],"~i8",[["^ ","^S",7,"^T",60,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",60,"^9","cljs.core/conj"]],"~i20",[["^ ","^S",69,"^T",60,"^9","s2"]],"^U",[["^ ","^S",72,"^T",60,"^9","s1"]]],"^V",["^ ","~i7",[["^ ","^S",0,"^T",62]],"~i8",[["^ ","^S",7,"^T",62,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",62,"^9","cljs.core/conj"]],"^1:",[["^ ","^S",69,"^T",62,"^9","s1"]],"^U",[["^ ","^S",72,"^T",62,"^9","s2"]]],"~i26",["^ ","~i4",[["^ ","^S",68,"^T",66,"^9","s1"]],"~i7",[["^ ","^S",71,"^T",66,"^9","s2"]],"^R",[["^ ","^S",74,"^T",66,"^9","sets"]]],"^Z",["^ ","~i5",[["^ ","^S",0,"^T",67],["^ ","^S",0,"^T",68]],"~i11",[["^ ","^S",4,"^T",67,"^9","bubbled-sets"]],"^18",[["^ ","^S",19,"^T",67]],"^V",[["^ ","^S",19,"^T",67,"^9","clojure.set/bubble-max-key"]],"~i40",[["^ ","^S",46,"^T",67,"^9","cljs.core/count"]],"~i46",[["^ ","^S",62,"^T",67]],"~i47",[["^ ","^S",62,"^T",67,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic"]],"~i52",[["^ ","^S",114,"^T",67,"^9","sets"]],"~i57",[["^ ","^S",119,"^T",67,"^9","s2"]],"~i60",[["^ ","^S",172,"^T",67,"^9","s1"]]],"~i28",["^ ","~i7",[["^ ","^S",0,"^T",68]],"~i8",[["^ ","^S",7,"^T",68,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",68,"^9","cljs.core/into"]],"^1:",[["^ ","^S",69,"^T",68]],"^16",[["^ ","^S",69,"^T",68,"^9","cljs.core/first"]],"^Z",[["^ ","^S",85,"^T",68,"^9","bubbled-sets"]],"~i41",[["^ ","^S",99,"^T",68]],"^14",[["^ ","^S",99,"^T",68,"^9","cljs.core/rest"]],"^1?",[["^ ","^S",114,"^T",68,"^9","bubbled-sets"]]],"^19",["^ ","~i0",[["^ ","^S",0,"^T",81],["^ ","^S",0,"^T",81],["^ ","^S",27,"^T",84],["^ ","^S",62,"^T",84,"^9","var_args"],["^ ","^S",0,"^T",85],["^ ","^S",0,"^T",85],["^ ","^S",4,"^T",85,"^9","G__31147"],["^ ","^S",15,"^T",85],["^ ","^S",15,"^T",85],["^ ","^S",0,"^T",86],["^ ","^S",0,"^T",86],["^ ","^S",8,"^T",86,"^9","G__31147"],["^ ","^S",5,"^T",87],["^ ","^S",0,"^T",88],["^ ","^S",7,"^T",88,"^9","clojure.set/intersection"],["^ ","^S",62,"^T",88],["^ ","^S",63,"^T",88],["^ ","^S",73,"^T",88],["^ ","^S",5,"^T",91],["^ ","^S",0,"^T",92],["^ ","^S",7,"^T",92,"^9","clojure.set/intersection"],["^ ","^S",62,"^T",92],["^ ","^S",63,"^T",92],["^ ","^S",73,"^T",92],["^ ","^S",79,"^T",92],["^ ","^S",80,"^T",92],["^ ","^S",90,"^T",92],["^ ","^S",0,"^T",96],["^ ","^S",4,"^T",96,"^9","args-arr__6428__auto__"],["^ ","^S",29,"^T",96],["^ ","^S",0,"^T",97],["^ ","^S",0,"^T",97],["^ ","^S",4,"^T",97,"^9","len__6405__auto__"],["^ ","^S",30,"^T",97],["^ ","^S",30,"^T",97],["^ ","^S",0,"^T",98],["^ ","^S",0,"^T",98],["^ ","^S",4,"^T",98,"^9","i__6406__auto__"],["^ ","^S",28,"^T",98],["^ ","^S",0,"^T",100],["^ ","^S",0,"^T",100],["^ ","^S",3,"^T",100],["^ ","^S",4,"^T",100,"^9","i__6406__auto__"],["^ ","^S",28,"^T",100,"^9","len__6405__auto__"],["^ ","^S",0,"^T",101],["^ ","^S",0,"^T",101],["^ ","^S",0,"^T",101,"^9","args-arr__6428__auto__"],["^ ","^S",28,"^T",101],["^ ","^S",29,"^T",101],["^ ","^S",39,"^T",101,"^9","i__6406__auto__"],["^ ","^S",0,"^T",103],["^ ","^S",15,"^T",103],["^ ","^S",16,"^T",103,"^9","i__6406__auto__"],["^ ","^S",40,"^T",103],["^ ","^S",0,"^T",107],["^ ","^S",0,"^T",111],["^ ","^S",4,"^T",111,"^9","argseq__6429__auto__"],["^ ","^S",27,"^T",111],["^ ","^S",32,"^T",111,"^9","cljs.core/IndexedSeq"],["^ ","^S",53,"^T",111],["^ ","^S",53,"^T",111,"^9","args-arr__6428__auto__"],["^ ","^S",82,"^T",111],["^ ","^S",87,"^T",111],["^ ","^S",91,"^T",111],["^ ","^S",0,"^T",112],["^ ","^S",0,"^T",112],["^ ","^S",7,"^T",112,"^9","clojure.set/intersection"],["^ ","^S",69,"^T",112],["^ ","^S",70,"^T",112],["^ ","^S",80,"^T",112],["^ ","^S",86,"^T",112],["^ ","^S",87,"^T",112],["^ ","^S",97,"^T",112],["^ ","^S",103,"^T",112,"^9","argseq__6429__auto__"],["^ ","^S",0,"^T",117],["^ ","^S",0,"^T",117],["^ ","^S",57,"^T",117],["^ ","^S",0,"^T",118],["^ ","^S",0,"^T",121],["^ ","^S",0,"^T",121],["^ ","^S",57,"^T",121],["^ ","^S",0,"^T",123],["^ ","^S",0,"^T",144],["^ ","^S",0,"^T",144],["^ ","^S",0,"^T",144],["^ ","^S",64,"^T",144],["^ ","^S",0,"^T",145],["^ ","^S",0,"^T",151],["^ ","^S",0,"^T",151],["^ ","^S",45,"^T",151],["^ ","^S",56,"^T",151,"^9","seq31144"],["^ ","^S",0,"^T",152],["^ ","^S",0,"^T",152],["^ ","^S",4,"^T",152,"^9","G__31145"],["^ ","^S",15,"^T",152],["^ ","^S",15,"^T",152,"^9","cljs.core/first"],["^ ","^S",31,"^T",152,"^9","seq31144"],["^ ","^S",4,"^T",153,"^9","seq31144"],["^ ","^S",19,"^T",153],["^ ","^S",19,"^T",153,"^9","cljs.core/next"],["^ ","^S",34,"^T",153,"^9","seq31144"],["^ ","^S",4,"^T",154,"^9","G__31146"],["^ ","^S",15,"^T",154],["^ ","^S",15,"^T",154,"^9","cljs.core/first"],["^ ","^S",31,"^T",154,"^9","seq31144"],["^ ","^S",4,"^T",155,"^9","seq31144"],["^ ","^S",19,"^T",155],["^ ","^S",19,"^T",155,"^9","cljs.core/next"],["^ ","^S",34,"^T",155,"^9","seq31144"],["^ ","^S",0,"^T",156],["^ ","^S",0,"^T",156],["^ ","^S",69,"^T",156,"^9","G__31145"],["^ ","^S",78,"^T",156,"^9","G__31146"],["^ ","^S",87,"^T",156,"^9","seq31144"],["^ ","^S",0,"^T",159],["^ ","^S",0,"^T",159],["^ ","^S",51,"^T",159],["^ ","^S",0,"^T",161]],"~i6",[["^ ","^S",0,"^T",84,"^9","clojure.set/intersection"],["^ ","^S",0,"^T",117,"^9","clojure.set/intersection"],["^ ","^S",0,"^T",121,"^9","clojure.set/intersection"],["^ ","^S",0,"^T",144,"^9","clojure.set/intersection"],["^ ","^S",0,"^T",151,"^9","clojure.set/intersection"],["^ ","^S",7,"^T",156,"^9","clojure.set/intersection"],["^ ","^S",0,"^T",159,"^9","clojure.set/intersection"]]],"~i32",["^ ","~i4",[["^ ","^S",68,"^T",117,"^9","s1"]],"~i8",[["^ ","^S",0,"^T",118,"^9","s1"]]],"~i33",["^ ","~i4",[["^ ","^S",68,"^T",121,"^9","s1"]],"~i7",[["^ ","^S",71,"^T",121,"^9","s2"]]],"~i34",["^ ","~i5",[["^ ","^S",0,"^T",123]],"~i9",[["^ ","^S",3,"^T",123]],"^R",[["^ ","^S",4,"^T",123]],"^X",[["^ ","^S",4,"^T",123,"^9","cljs.core/count"]],"^Y",[["^ ","^S",20,"^T",123,"^9","s2"]],"^U",[["^ ","^S",26,"^T",123]],"^18",[["^ ","^S",26,"^T",123,"^9","cljs.core/count"]],"^19",[["^ ","^S",42,"^T",123,"^9","s1"]]],"^13",["^ ","~i7",[["^ ","^S",0,"^T",124]],"^12",[["^ ","^S",15,"^T",124,"^9","s2"]],"~i17",[["^ ","^S",15,"^T",125,"^9","s1"]]],"~i36",["^ ","~i7",[["^ ","^S",0,"^T",130]],"~i8",[["^ ","^S",7,"^T",130,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",130],["^ ","^S",0,"^T",132]],"^1:",[["^ ","^S",18,"^T",131,"^9","result"]],"^Z",[["^ ","^S",25,"^T",131,"^9","item"]]],"~i37",["^ ","^Y",[["^ ","^S",0,"^T",132]],"^U",[["^ ","^S",3,"^T",132]],"^18",[["^ ","^S",3,"^T",132,"^9","cljs.core/contains?"]],"^1G",[["^ ","^S",29,"^T",132,"^9","s2"]],"^1J",[["^ ","^S",32,"^T",132,"^9","item"]]],"~i38",["^ ","~i7",[["^ ","^S",0,"^T",133,"^9","result"]]],"~i39",["^ ","^16",[["^ ","^S",0,"^T",135]],"^17",[["^ ","^S",7,"^T",135,"^9","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^Z",[["^ ","^S",52,"^T",135,"^9","result"]],"^1G",[["^ ","^S",59,"^T",135,"^9","item"]]],"^1=",["^ ","~i8",[["^ ","^S",1,"^T",138,"^9","s1"]],"^1<",[["^ ","^S",4,"^T",138,"^9","s1"]]],"^1D",["^ ","~i4",[["^ ","^S",75,"^T",144,"^9","s1"]],"~i7",[["^ ","^S",78,"^T",144,"^9","s2"]],"^R",[["^ ","^S",81,"^T",144,"^9","sets"]]],"^14",["^ ","~i5",[["^ ","^S",0,"^T",145],["^ ","^S",0,"^T",148]],"^1<",[["^ ","^S",4,"^T",145,"^9","bubbled-sets"]],"^18",[["^ ","^S",19,"^T",145],["^ ","^S",46,"^T",145],["^ ","^S",57,"^T",145,"^9","p1__31138#"],["^ ","^S",0,"^T",146]],"^V",[["^ ","^S",19,"^T",145,"^9","clojure.set/bubble-max-key"]],"^1D",[["^ ","^S",0,"^T",146]],"~i44",[["^ ","^S",10,"^T",146],["^ ","^S",26,"^T",146,"^9","p1__31138#"]],"~i45",[["^ ","^S",10,"^T",146,"^9","cljs.core/count"]],"~i55",[["^ ","^S",3,"^T",147]],"~i56",[["^ ","^S",3,"^T",147,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic"]],"~i61",[["^ ","^S",55,"^T",147,"^9","sets"]],"~i66",[["^ ","^S",60,"^T",147,"^9","s2"]],"~i69",[["^ ","^S",113,"^T",147,"^9","s1"]]],"~i43",["^ ","~i7",[["^ ","^S",0,"^T",148]],"~i8",[["^ ","^S",7,"^T",148,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",148,"^9","clojure.set/intersection"]],"^1C",[["^ ","^S",79,"^T",148]],"^[",[["^ ","^S",79,"^T",148,"^9","cljs.core/first"]],"^13",[["^ ","^S",95,"^T",148,"^9","bubbled-sets"]],"~i49",[["^ ","^S",109,"^T",148]],"~i50",[["^ ","^S",109,"^T",148,"^9","cljs.core/rest"]],"^1O",[["^ ","^S",124,"^T",148,"^9","bubbled-sets"]]],"^1N",["^ ","~i0",[["^ ","^S",0,"^T",161],["^ ","^S",0,"^T",161],["^ ","^S",25,"^T",164],["^ ","^S",58,"^T",164,"^9","var_args"],["^ ","^S",0,"^T",165],["^ ","^S",0,"^T",165],["^ ","^S",4,"^T",165,"^9","G__31163"],["^ ","^S",15,"^T",165],["^ ","^S",15,"^T",165],["^ ","^S",0,"^T",166],["^ ","^S",0,"^T",166],["^ ","^S",8,"^T",166,"^9","G__31163"],["^ ","^S",5,"^T",167],["^ ","^S",0,"^T",168],["^ ","^S",7,"^T",168,"^9","clojure.set/difference"],["^ ","^S",60,"^T",168],["^ ","^S",61,"^T",168],["^ ","^S",71,"^T",168],["^ ","^S",5,"^T",171],["^ ","^S",0,"^T",172],["^ ","^S",7,"^T",172,"^9","clojure.set/difference"],["^ ","^S",60,"^T",172],["^ ","^S",61,"^T",172],["^ ","^S",71,"^T",172],["^ ","^S",77,"^T",172],["^ ","^S",78,"^T",172],["^ ","^S",88,"^T",172],["^ ","^S",0,"^T",176],["^ ","^S",4,"^T",176,"^9","args-arr__6428__auto__"],["^ ","^S",29,"^T",176],["^ ","^S",0,"^T",177],["^ ","^S",0,"^T",177],["^ ","^S",4,"^T",177,"^9","len__6405__auto__"],["^ ","^S",30,"^T",177],["^ ","^S",30,"^T",177],["^ ","^S",0,"^T",178],["^ ","^S",0,"^T",178],["^ ","^S",4,"^T",178,"^9","i__6406__auto__"],["^ ","^S",28,"^T",178],["^ ","^S",0,"^T",180],["^ ","^S",0,"^T",180],["^ ","^S",3,"^T",180],["^ ","^S",4,"^T",180,"^9","i__6406__auto__"],["^ ","^S",28,"^T",180,"^9","len__6405__auto__"],["^ ","^S",0,"^T",181],["^ ","^S",0,"^T",181],["^ ","^S",0,"^T",181,"^9","args-arr__6428__auto__"],["^ ","^S",28,"^T",181],["^ ","^S",29,"^T",181],["^ ","^S",39,"^T",181,"^9","i__6406__auto__"],["^ ","^S",0,"^T",183],["^ ","^S",15,"^T",183],["^ ","^S",16,"^T",183,"^9","i__6406__auto__"],["^ ","^S",40,"^T",183],["^ ","^S",0,"^T",187],["^ ","^S",0,"^T",191],["^ ","^S",4,"^T",191,"^9","argseq__6429__auto__"],["^ ","^S",27,"^T",191],["^ ","^S",32,"^T",191,"^9","cljs.core/IndexedSeq"],["^ ","^S",53,"^T",191],["^ ","^S",53,"^T",191,"^9","args-arr__6428__auto__"],["^ ","^S",82,"^T",191],["^ ","^S",87,"^T",191],["^ ","^S",91,"^T",191],["^ ","^S",0,"^T",192],["^ ","^S",0,"^T",192],["^ ","^S",7,"^T",192,"^9","clojure.set/difference"],["^ ","^S",67,"^T",192],["^ ","^S",68,"^T",192],["^ ","^S",78,"^T",192],["^ ","^S",84,"^T",192],["^ ","^S",85,"^T",192],["^ ","^S",95,"^T",192],["^ ","^S",101,"^T",192,"^9","argseq__6429__auto__"],["^ ","^S",0,"^T",197],["^ ","^S",0,"^T",197],["^ ","^S",55,"^T",197],["^ ","^S",0,"^T",198],["^ ","^S",0,"^T",201],["^ ","^S",0,"^T",201],["^ ","^S",55,"^T",201],["^ ","^S",0,"^T",202],["^ ","^S",0,"^T",215],["^ ","^S",0,"^T",215],["^ ","^S",0,"^T",215],["^ ","^S",62,"^T",215],["^ ","^S",0,"^T",216],["^ ","^S",0,"^T",219],["^ ","^S",0,"^T",219],["^ ","^S",43,"^T",219],["^ ","^S",54,"^T",219,"^9","seq31160"],["^ ","^S",0,"^T",220],["^ ","^S",0,"^T",220],["^ ","^S",4,"^T",220,"^9","G__31161"],["^ ","^S",15,"^T",220],["^ ","^S",15,"^T",220,"^9","cljs.core/first"],["^ ","^S",31,"^T",220,"^9","seq31160"],["^ ","^S",4,"^T",221,"^9","seq31160"],["^ ","^S",19,"^T",221],["^ ","^S",19,"^T",221,"^9","cljs.core/next"],["^ ","^S",34,"^T",221,"^9","seq31160"],["^ ","^S",4,"^T",222,"^9","G__31162"],["^ ","^S",15,"^T",222],["^ ","^S",15,"^T",222,"^9","cljs.core/first"],["^ ","^S",31,"^T",222,"^9","seq31160"],["^ ","^S",4,"^T",223,"^9","seq31160"],["^ ","^S",19,"^T",223],["^ ","^S",19,"^T",223,"^9","cljs.core/next"],["^ ","^S",34,"^T",223,"^9","seq31160"],["^ ","^S",0,"^T",224],["^ ","^S",0,"^T",224],["^ ","^S",67,"^T",224,"^9","G__31161"],["^ ","^S",76,"^T",224,"^9","G__31162"],["^ ","^S",85,"^T",224,"^9","seq31160"],["^ ","^S",0,"^T",227],["^ ","^S",0,"^T",227],["^ ","^S",49,"^T",227],["^ ","^S",0,"^T",229]],"~i6",[["^ ","^S",0,"^T",164,"^9","clojure.set/difference"],["^ ","^S",0,"^T",197,"^9","clojure.set/difference"],["^ ","^S",0,"^T",201,"^9","clojure.set/difference"],["^ ","^S",0,"^T",215,"^9","clojure.set/difference"],["^ ","^S",0,"^T",219,"^9","clojure.set/difference"],["^ ","^S",7,"^T",224,"^9","clojure.set/difference"],["^ ","^S",0,"^T",227,"^9","clojure.set/difference"]]],"^1?",["^ ","~i4",[["^ ","^S",66,"^T",197,"^9","s1"]],"~i8",[["^ ","^S",0,"^T",198,"^9","s1"]]],"~i48",["^ ","~i4",[["^ ","^S",66,"^T",201,"^9","s1"]],"~i7",[["^ ","^S",69,"^T",201,"^9","s2"]]],"^1U",["^ ","~i5",[["^ ","^S",0,"^T",202]],"~i9",[["^ ","^S",3,"^T",202]],"^R",[["^ ","^S",4,"^T",202]],"^X",[["^ ","^S",4,"^T",202,"^9","cljs.core/count"]],"^Y",[["^ ","^S",20,"^T",202,"^9","s1"]],"^U",[["^ ","^S",26,"^T",202]],"^18",[["^ ","^S",26,"^T",202,"^9","cljs.core/count"]],"^19",[["^ ","^S",42,"^T",202,"^9","s2"]]],"^1V",["^ ","~i7",[["^ ","^S",0,"^T",203]],"~i8",[["^ ","^S",7,"^T",203,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",203],["^ ","^S",0,"^T",204]],"^1:",[["^ ","^S",65,"^T",203,"^9","result"]],"^Z",[["^ ","^S",72,"^T",203,"^9","item"]]],"~i51",["^ ","^Y",[["^ ","^S",0,"^T",204]],"^U",[["^ ","^S",3,"^T",204]],"^18",[["^ ","^S",3,"^T",204,"^9","cljs.core/contains?"]],"^1G",[["^ ","^S",29,"^T",204,"^9","s2"]],"^1J",[["^ ","^S",32,"^T",204,"^9","item"]]],"^1@",["^ ","^16",[["^ ","^S",0,"^T",205]],"^17",[["^ ","^S",7,"^T",205,"^9","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^Z",[["^ ","^S",52,"^T",205,"^9","result"]],"^1G",[["^ ","^S",59,"^T",205,"^9","item"]]],"~i53",["^ ","^16",[["^ ","^S",0,"^T",207,"^9","result"]]],"~i54",["^ ","^W",[["^ ","^S",3,"^T",209,"^9","s1"]],"^15",[["^ ","^S",6,"^T",209,"^9","s1"]]],"^1O",["^ ","~i7",[["^ ","^S",0,"^T",211]],"~i8",[["^ ","^S",7,"^T",211,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",211,"^9","cljs.core/disj"]],"^1:",[["^ ","^S",69,"^T",211,"^9","s1"]],"^U",[["^ ","^S",72,"^T",211,"^9","s2"]]],"^1P",["^ ","~i4",[["^ ","^S",73,"^T",215,"^9","s1"]],"~i7",[["^ ","^S",76,"^T",215,"^9","s2"]],"^R",[["^ ","^S",79,"^T",215,"^9","sets"]]],"^1A",["^ ","~i5",[["^ ","^S",0,"^T",216]],"~i6",[["^ ","^S",7,"^T",216,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^X",[["^ ","^S",54,"^T",216,"^9","clojure.set/difference"]],"^18",[["^ ","^S",77,"^T",216,"^9","s1"]],"^Z",[["^ ","^S",80,"^T",216]],"^1C",[["^ ","^S",80,"^T",216,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1F",[["^ ","^S",125,"^T",216,"^9","sets"]],"^1K",[["^ ","^S",130,"^T",216,"^9","s2"]]],"^1B",["^ ","~i0",[["^ ","^S",0,"^T",229],["^ ","^S",21,"^T",232],["^ ","^S",0,"^T",233]],"~i6",[["^ ","^S",0,"^T",232,"^9","clojure.set/select"]]],"~i62",["^ ","~i3",[["^ ","^S",50,"^T",232,"^9","pred"]],"~i8",[["^ ","^S",55,"^T",232,"^9","xset"]]],"~i63",["^ ","~i4",[["^ ","^S",0,"^T",233]],"~i5",[["^ ","^S",7,"^T",233,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^R",[["^ ","^S",54,"^T",233],["^ ","^S",0,"^T",234]],"^1H",[["^ ","^S",65,"^T",233,"^9","s"]],"^Y",[["^ ","^S",67,"^T",233,"^9","k"]],"^17",[["^ ","^S",0,"^T",234]],"^1;",[["^ ","^S",20,"^T",234]],"^Z",[["^ ","^S",21,"^T",234,"^9","pred"],["^ ","^S",58,"^T",234,"^9","pred"],["^ ","^S",98,"^T",234,"^9","pred"]],"^1E",[["^ ","^S",93,"^T",234,"^9","k"],["^ ","^S",113,"^T",234,"^9","k"]],"^13",[["^ ","^S",0,"^T",235,"^9","s"]],"^1J",[["^ ","^S",0,"^T",237]],"^1K",[["^ ","^S",7,"^T",237,"^9","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^1T",[["^ ","^S",52,"^T",237,"^9","s"]],"^1N",[["^ ","^S",54,"^T",237,"^9","k"]]],"~i64",["^ ","^R",[["^ ","^S",3,"^T",239,"^9","xset"]],"^1H",[["^ ","^S",8,"^T",239,"^9","xset"]]],"^1R",["^ ","~i0",[["^ ","^S",0,"^T",241],["^ ","^S",22,"^T",244],["^ ","^S",0,"^T",245]],"~i6",[["^ ","^S",0,"^T",244,"^9","clojure.set/project"]]],"~i68",["^ ","~i3",[["^ ","^S",52,"^T",244,"^9","xrel"]],"~i8",[["^ ","^S",57,"^T",244,"^9","ks"]]],"^1S",["^ ","~i4",[["^ ","^S",0,"^T",245]],"~i5",[["^ ","^S",7,"^T",245,"^9","cljs.core/set"]],"~i9",[["^ ","^S",21,"^T",245],["^ ","^S",65,"^T",245],["^ ","^S",76,"^T",245,"^9","p1__31180#"],["^ ","^S",0,"^T",246]],"^11",[["^ ","^S",21,"^T",245,"^9","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^W",[["^ ","^S",0,"^T",246],["^ ","^S",29,"^T",246,"^9","p1__31180#"]],"^10",[["^ ","^S",7,"^T",246,"^9","cljs.core/select-keys"]],"^19",[["^ ","^S",46,"^T",246,"^9","ks"]],"^1G",[["^ ","^S",3,"^T",247,"^9","xrel"]]],"~i71",["^ ","~i0",[["^ ","^S",0,"^T",249],["^ ","^S",26,"^T",252],["^ ","^S",0,"^T",253]],"~i6",[["^ ","^S",0,"^T",252,"^9","clojure.set/rename-keys"]]],"~i73",["^ ","~i3",[["^ ","^S",60,"^T",252,"^9","map"]],"~i7",[["^ ","^S",64,"^T",252,"^9","kmap"]]],"~i74",["^ ","~i4",[["^ ","^S",0,"^T",253]],"~i5",[["^ ","^S",7,"^T",253,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i75",["^ ","~i5",[["^ ","^S",54,"^T",253],["^ ","^S",67,"^T",253,"^9","p__31186"],["^ ","^S",0,"^T",254],["^ ","^S",0,"^T",254],["^ ","^S",4,"^T",254,"^9","vec__31187"],["^ ","^S",17,"^T",254,"^9","p__31186"],["^ ","^S",10,"^T",255],["^ ","^S",10,"^T",255,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",54,"^T",255,"^9","vec__31187"],["^ ","^S",65,"^T",255],["^ ","^S",69,"^T",255],["^ ","^S",11,"^T",256],["^ ","^S",11,"^T",256,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",55,"^T",256,"^9","vec__31187"],["^ ","^S",66,"^T",256],["^ ","^S",70,"^T",256],["^ ","^S",0,"^T",257]],"^11",[["^ ","^S",65,"^T",253,"^9","m"]],"^X",[["^ ","^S",4,"^T",255,"^9","old"]],"^1H",[["^ ","^S",4,"^T",256,"^9","new"]]],"~i76",["^ ","~i7",[["^ ","^S",0,"^T",257]],"^1<",[["^ ","^S",3,"^T",257]],"^R",[["^ ","^S",3,"^T",257,"^9","cljs.core/contains?"]],"^17",[["^ ","^S",29,"^T",257,"^9","map"]],"^1;",[["^ ","^S",33,"^T",257,"^9","old"]]],"~i77",["^ ","~i9",[["^ ","^S",0,"^T",258]],"^11",[["^ ","^S",7,"^T",258,"^9","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^10",[["^ ","^S",53,"^T",258,"^9","m"]],"^15",[["^ ","^S",55,"^T",258,"^9","new"]],"^17",[["^ ","^S",60,"^T",258]],"^U",[["^ ","^S",60,"^T",258,"^9","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^Z",[["^ ","^S",104,"^T",258,"^9","map"]],"~i31",[["^ ","^S",108,"^T",258,"^9","old"]]],"~i78",["^ ","~i9",[["^ ","^S",0,"^T",260,"^9","m"]]],"~i79",["^ ","~i5",[["^ ","^S",3,"^T",262]],"~i6",[["^ ","^S",3,"^T",262,"^9","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"]],"^R",[["^ ","^S",49,"^T",262,"^9","cljs.core/dissoc"]],"^Y",[["^ ","^S",66,"^T",262,"^9","map"]],"^U",[["^ ","^S",70,"^T",262]],"^18",[["^ ","^S",70,"^T",262,"^9","cljs.core/keys"]],"^[",[["^ ","^S",85,"^T",262,"^9","kmap"]],"^1I",[["^ ","^S",92,"^T",262,"^9","kmap"]]],"~i81",["^ ","~i0",[["^ ","^S",0,"^T",264],["^ ","^S",21,"^T",267],["^ ","^S",0,"^T",268]],"~i6",[["^ ","^S",0,"^T",267,"^9","clojure.set/rename"]]],"~i83",["^ ","~i3",[["^ ","^S",50,"^T",267,"^9","xrel"]],"~i8",[["^ ","^S",55,"^T",267,"^9","kmap"]]],"~i84",["^ ","~i4",[["^ ","^S",0,"^T",268]],"~i5",[["^ ","^S",7,"^T",268,"^9","cljs.core/set"]],"~i9",[["^ ","^S",21,"^T",268],["^ ","^S",65,"^T",268],["^ ","^S",76,"^T",268,"^9","p1__31191#"],["^ ","^S",0,"^T",269]],"^11",[["^ ","^S",21,"^T",268,"^9","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^W",[["^ ","^S",0,"^T",269],["^ ","^S",31,"^T",269,"^9","p1__31191#"]],"^10",[["^ ","^S",7,"^T",269,"^9","clojure.set/rename-keys"]],"^19",[["^ ","^S",48,"^T",269,"^9","kmap"]],"^1I",[["^ ","^S",3,"^T",270,"^9","xrel"]]],"~i86",["^ ","~i0",[["^ ","^S",0,"^T",272],["^ ","^S",20,"^T",276],["^ ","^S",0,"^T",277]],"~i6",[["^ ","^S",0,"^T",276,"^9","clojure.set/index"]]],"~i89",["^ ","~i3",[["^ ","^S",48,"^T",276,"^9","xrel"]],"~i8",[["^ ","^S",53,"^T",276,"^9","ks"]]],"~i90",["^ ","~i4",[["^ ","^S",0,"^T",277],["^ ","^S",3,"^T",280]],"~i5",[["^ ","^S",7,"^T",277,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i91",["^ ","~i5",[["^ ","^S",54,"^T",277],["^ ","^S",0,"^T",278]],"^11",[["^ ","^S",65,"^T",277,"^9","m"]],"^R",[["^ ","^S",67,"^T",277,"^9","x"]]],"~i92",["^ ","~i7",[["^ ","^S",0,"^T",278],["^ ","^S",0,"^T",279]],"^X",[["^ ","^S",4,"^T",278,"^9","ik"]],"^10",[["^ ","^S",9,"^T",278]],"^1H",[["^ ","^S",9,"^T",278,"^9","cljs.core/select-keys"]],"^[",[["^ ","^S",31,"^T",278,"^9","x"]],"^29",[["^ ","^S",33,"^T",278,"^9","ks"]]],"~i93",["^ ","~i9",[["^ ","^S",0,"^T",279]],"^11",[["^ ","^S",7,"^T",279,"^9","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^10",[["^ ","^S",53,"^T",279,"^9","m"]],"^15",[["^ ","^S",55,"^T",279,"^9","ik"]],"^16",[["^ ","^S",58,"^T",279]],"^17",[["^ ","^S",58,"^T",279,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^Z",[["^ ","^S",103,"^T",279],["^ ","^S",152,"^T",279]],"^1C",[["^ ","^S",103,"^T",279,"^9","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"^1E",[["^ ","^S",147,"^T",279,"^9","m"]],"^1G",[["^ ","^S",149,"^T",279,"^9","ik"]],"^14",[["^ ","^S",187,"^T",279,"^9","x"]]],"~i94",["^ ","~i8",[["^ ","^S",38,"^T",280,"^9","xrel"]]],"~i96",["^ ","~i0",[["^ ","^S",0,"^T",282],["^ ","^S",25,"^T",285],["^ ","^S",0,"^T",286]],"~i6",[["^ ","^S",0,"^T",285,"^9","clojure.set/map-invert"]]],"~i98",["^ ","~i3",[["^ ","^S",58,"^T",285,"^9","m"]],"~i6",[["^ ","^S",0,"^T",286],["^ ","^S",3,"^T",291]],"~i7",[["^ ","^S",7,"^T",286,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^12",[["^ ","^S",54,"^T",286],["^ ","^S",71,"^T",286,"^9","p__31200"],["^ ","^S",0,"^T",287],["^ ","^S",0,"^T",287],["^ ","^S",4,"^T",287,"^9","vec__31201"],["^ ","^S",17,"^T",287,"^9","p__31200"],["^ ","^S",8,"^T",288],["^ ","^S",8,"^T",288,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",288,"^9","vec__31201"],["^ ","^S",63,"^T",288],["^ ","^S",67,"^T",288],["^ ","^S",8,"^T",289],["^ ","^S",8,"^T",289,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",289,"^9","vec__31201"],["^ ","^S",63,"^T",289],["^ ","^S",67,"^T",289],["^ ","^S",0,"^T",290]],"^Y",[["^ ","^S",65,"^T",286,"^9","m"]],"^17",[["^ ","^S",4,"^T",288,"^9","k"]],"^18",[["^ ","^S",4,"^T",289,"^9","v"]],"^1C",[["^ ","^S",0,"^T",290]],"^[",[["^ ","^S",7,"^T",290,"^9","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^13",[["^ ","^S",53,"^T",290,"^9","m"]],"^1J",[["^ ","^S",59,"^T",290,"^9","v"]],"^1L",[["^ ","^S",61,"^T",290,"^9","k"]],"^1>",[["^ ","^S",38,"^T",291,"^9","m"]]],"~i100",["^ ","~i0",[["^ ","^S",0,"^T",293],["^ ","^S",0,"^T",293],["^ ","^S",19,"^T",298],["^ ","^S",46,"^T",298,"^9","var_args"],["^ ","^S",0,"^T",299],["^ ","^S",0,"^T",299],["^ ","^S",4,"^T",299,"^9","G__31209"],["^ ","^S",15,"^T",299],["^ ","^S",15,"^T",299],["^ ","^S",0,"^T",300],["^ ","^S",0,"^T",300],["^ ","^S",8,"^T",300,"^9","G__31209"],["^ ","^S",5,"^T",301],["^ ","^S",0,"^T",302],["^ ","^S",7,"^T",302,"^9","clojure.set/join"],["^ ","^S",54,"^T",302],["^ ","^S",55,"^T",302],["^ ","^S",65,"^T",302],["^ ","^S",71,"^T",302],["^ ","^S",72,"^T",302],["^ ","^S",82,"^T",302],["^ ","^S",5,"^T",305],["^ ","^S",0,"^T",306],["^ ","^S",7,"^T",306,"^9","clojure.set/join"],["^ ","^S",54,"^T",306],["^ ","^S",55,"^T",306],["^ ","^S",65,"^T",306],["^ ","^S",71,"^T",306],["^ ","^S",72,"^T",306],["^ ","^S",82,"^T",306],["^ ","^S",88,"^T",306],["^ ","^S",89,"^T",306],["^ ","^S",99,"^T",306],["^ ","^S",0,"^T",310],["^ ","^S",6,"^T",310],["^ ","^S",11,"^T",310,"^9","js/Error"],["^ ","^S",17,"^T",310],["^ ","^S",18,"^T",310],["^ ","^S",80,"^T",310],["^ ","^S",80,"^T",310],["^ ","^S",0,"^T",315],["^ ","^S",0,"^T",315],["^ ","^S",49,"^T",315],["^ ","^S",0,"^T",316],["^ ","^S",0,"^T",343],["^ ","^S",0,"^T",343],["^ ","^S",49,"^T",343],["^ ","^S",0,"^T",344],["^ ","^S",0,"^T",367],["^ ","^S",0,"^T",367],["^ ","^S",43,"^T",367],["^ ","^S",0,"^T",369]],"~i6",[["^ ","^S",0,"^T",298,"^9","clojure.set/join"],["^ ","^S",0,"^T",315,"^9","clojure.set/join"],["^ ","^S",0,"^T",343,"^9","clojure.set/join"],["^ ","^S",0,"^T",367,"^9","clojure.set/join"]]],"~i104",["^ ","~i4",[["^ ","^S",60,"^T",315,"^9","xrel"]],"~i9",[["^ ","^S",65,"^T",315,"^9","yrel"]]],"~i105",["^ ","~i3",[["^ ","^S",0,"^T",316],["^ ","^S",0,"^T",339]],"~i7",[["^ ","^S",3,"^T",316]],"^R",[["^ ","^S",4,"^T",316]],"^X",[["^ ","^S",4,"^T",316,"^9","cljs.core/seq"]],"^1H",[["^ ","^S",18,"^T",316,"^9","xrel"]],"^U",[["^ ","^S",29,"^T",316]],"^18",[["^ ","^S",29,"^T",316,"^9","cljs.core/seq"]],"^1C",[["^ ","^S",43,"^T",316,"^9","yrel"]]],"~i106",["^ ","~i5",[["^ ","^S",0,"^T",317],["^ ","^S",4,"^T",318,"^9","vec__31212"],["^ ","^S",8,"^T",319],["^ ","^S",8,"^T",319,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",319,"^9","vec__31212"],["^ ","^S",63,"^T",319],["^ ","^S",67,"^T",319],["^ ","^S",8,"^T",320],["^ ","^S",8,"^T",320,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",320,"^9","vec__31212"],["^ ","^S",63,"^T",320],["^ ","^S",67,"^T",320],["^ ","^S",0,"^T",322]],"^1<",[["^ ","^S",4,"^T",317,"^9","ks"]],"^12",[["^ ","^S",9,"^T",317]],"^W",[["^ ","^S",9,"^T",317,"^9","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2"]],"^1C",[["^ ","^S",64,"^T",317]],"^[",[["^ ","^S",64,"^T",317,"^9","cljs.core/set"]],"^1F",[["^ ","^S",78,"^T",317]],"^1G",[["^ ","^S",78,"^T",317,"^9","cljs.core/keys"]],"^1L",[["^ ","^S",93,"^T",317]],"^1=",[["^ ","^S",93,"^T",317,"^9","cljs.core/first"]],"^1>",[["^ ","^S",109,"^T",317,"^9","xrel"]],"^1Z",[["^ ","^S",117,"^T",317]],"^1O",[["^ ","^S",117,"^T",317,"^9","cljs.core/set"]],"~i59",[["^ ","^S",131,"^T",317]],"^1B",[["^ ","^S",131,"^T",317,"^9","cljs.core/keys"]],"~i65",[["^ ","^S",146,"^T",317]],"^1R",[["^ ","^S",146,"^T",317,"^9","cljs.core/first"]],"~i72",[["^ ","^S",162,"^T",317,"^9","yrel"]]],"~i107",["^ ","^R",[["^ ","^S",4,"^T",319,"^9","r"]],"^12",[["^ ","^S",4,"^T",320,"^9","s"]],"^1H",[["^ ","^S",17,"^T",318],["^ ","^S",69,"^T",318],["^ ","^S",170,"^T",318]],"^16",[["^ ","^S",19,"^T",318]],"^V",[["^ ","^S",20,"^T",318]],"^1;",[["^ ","^S",20,"^T",318,"^9","cljs.core/count"]],"^1E",[["^ ","^S",36,"^T",318,"^9","xrel"]],"^1K",[["^ ","^S",45,"^T",318]],"^1L",[["^ ","^S",45,"^T",318,"^9","cljs.core/count"]],"^1N",[["^ ","^S",61,"^T",318,"^9","yrel"]]],"~i108",["^ ","^1:",[["^ ","^S",152,"^T",318,"^9","xrel"]],"^V",[["^ ","^S",157,"^T",318,"^9","yrel"]]],"~i109",["^ ","^1:",[["^ ","^S",253,"^T",318,"^9","yrel"]],"^V",[["^ ","^S",258,"^T",318,"^9","xrel"]]],"~i110",["^ ","^1<",[["^ ","^S",4,"^T",321,"^9","idx"]],"^W",[["^ ","^S",10,"^T",321]],"^10",[["^ ","^S",10,"^T",321,"^9","clojure.set/index"]],"^17",[["^ ","^S",28,"^T",321,"^9","r"]],"^18",[["^ ","^S",30,"^T",321,"^9","ks"]]],"~i111",["^ ","~i7",[["^ ","^S",0,"^T",322],["^ ","^S",1,"^T",337]],"~i8",[["^ ","^S",7,"^T",322,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^W",[["^ ","^S",54,"^T",322],["^ ","^S",0,"^T",324]],"^1:",[["^ ","^S",18,"^T",323,"^9","ret"]],"^18",[["^ ","^S",22,"^T",323,"^9","x"]]],"~i112",["^ ","^1H",[["^ ","^S",0,"^T",324],["^ ","^S",0,"^T",327]],"^U",[["^ ","^S",4,"^T",324,"^9","found"]],"^[",[["^ ","^S",12,"^T",324],["^ ","^S",29,"^T",324,"^9","G__31215"],["^ ","^S",0,"^T",325],["^ ","^S",0,"^T",325],["^ ","^S",78,"^T",325,"^9","G__31215"],["^ ","^S",104,"^T",325,"^9","G__31215"]],"^19",[["^ ","^S",8,"^T",325,"^9","idx"],["^ ","^S",44,"^T",325,"^9","idx"],["^ ","^S",90,"^T",325,"^9","idx"]],"^1G",[["^ ","^S",40,"^T",324]],"^13",[["^ ","^S",40,"^T",324,"^9","cljs.core/select-keys"]],"^1?",[["^ ","^S",62,"^T",324,"^9","x"]],"^1U",[["^ ","^S",64,"^T",324,"^9","ks"]]],"~i113",["^ ","^Y",[["^ ","^S",0,"^T",327]],"^U",[["^ ","^S",20,"^T",327,"^9","found"]]],"~i114",["^ ","^16",[["^ ","^S",0,"^T",328],["^ ","^S",54,"^T",328],["^ ","^S",18,"^T",329,"^9","p1__31204#"],["^ ","^S",35,"^T",329,"^9","p2__31205#"],["^ ","^S",0,"^T",330]],"^17",[["^ ","^S",7,"^T",328,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^19",[["^ ","^S",0,"^T",330],["^ ","^S",52,"^T",330,"^9","p1__31204#"]],"^29",[["^ ","^S",7,"^T",330,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1L",[["^ ","^S",69,"^T",330],["^ ","^S",172,"^T",330,"^9","p2__31205#"]],"^1=",[["^ ","^S",69,"^T",330,"^9","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1U",[["^ ","^S",189,"^T",330,"^9","x"]],"^1Y",[["^ ","^S",1,"^T",332,"^9","ret"]],"^1A",[["^ ","^S",5,"^T",332,"^9","found"]]],"~i115",["^ ","^16",[["^ ","^S",0,"^T",334,"^9","ret"]]],"~i116",["^ ","^Y",[["^ ","^S",35,"^T",337,"^9","s"]]],"~i118",["^ ","~i4",[["^ ","^S",60,"^T",343,"^9","xrel"]],"~i9",[["^ ","^S",65,"^T",343,"^9","yrel"]],"^12",[["^ ","^S",70,"^T",343,"^9","km"]]],"~i119",["^ ","~i3",[["^ ","^S",0,"^T",344],["^ ","^S",4,"^T",344,"^9","vec__31216"],["^ ","^S",8,"^T",345],["^ ","^S",8,"^T",345,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",345,"^9","vec__31216"],["^ ","^S",63,"^T",345],["^ ","^S",67,"^T",345],["^ ","^S",8,"^T",346],["^ ","^S",8,"^T",346,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",346,"^9","vec__31216"],["^ ","^S",63,"^T",346],["^ ","^S",67,"^T",346],["^ ","^S",8,"^T",347],["^ ","^S",8,"^T",347,"^9","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^S",52,"^T",347,"^9","vec__31216"],["^ ","^S",63,"^T",347],["^ ","^S",67,"^T",347],["^ ","^S",0,"^T",349]],"^11",[["^ ","^S",4,"^T",345,"^9","r"]],"^R",[["^ ","^S",4,"^T",346,"^9","s"]],"^12",[["^ ","^S",4,"^T",347,"^9","k"]],"^1H",[["^ ","^S",17,"^T",344],["^ ","^S",69,"^T",344],["^ ","^S",197,"^T",344]],"^16",[["^ ","^S",19,"^T",344]],"^V",[["^ ","^S",20,"^T",344]],"^1;",[["^ ","^S",20,"^T",344,"^9","cljs.core/count"]],"^1E",[["^ ","^S",36,"^T",344,"^9","xrel"]],"^1K",[["^ ","^S",45,"^T",344]],"^1L",[["^ ","^S",45,"^T",344,"^9","cljs.core/count"]],"^1N",[["^ ","^S",61,"^T",344,"^9","yrel"]]],"~i120",["^ ","^1:",[["^ ","^S",152,"^T",344,"^9","xrel"]],"^V",[["^ ","^S",157,"^T",344,"^9","yrel"]],"^19",[["^ ","^S",162,"^T",344]],"^29",[["^ ","^S",162,"^T",344,"^9","clojure.set/map-invert"]],"^14",[["^ ","^S",185,"^T",344,"^9","km"]]],"~i121",["^ ","^1:",[["^ ","^S",280,"^T",344,"^9","yrel"]],"^V",[["^ ","^S",285,"^T",344,"^9","xrel"]],"^19",[["^ ","^S",290,"^T",344,"^9","km"]]],"~i122",["^ ","~i9",[["^ ","^S",4,"^T",348,"^9","idx"]],"^X",[["^ ","^S",10,"^T",348]],"^12",[["^ ","^S",10,"^T",348,"^9","clojure.set/index"]],"^1:",[["^ ","^S",28,"^T",348,"^9","r"]],"^17",[["^ ","^S",30,"^T",348]],"^U",[["^ ","^S",30,"^T",348,"^9","cljs.core/vals"]],"^1C",[["^ ","^S",45,"^T",348,"^9","k"]]],"~i123",["^ ","~i5",[["^ ","^S",0,"^T",349],["^ ","^S",1,"^T",364]],"~i6",[["^ ","^S",7,"^T",349,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^X",[["^ ","^S",54,"^T",349],["^ ","^S",0,"^T",351]],"^15",[["^ ","^S",18,"^T",350,"^9","ret"]],"^17",[["^ ","^S",22,"^T",350,"^9","x"]]],"~i124",["^ ","^W",[["^ ","^S",0,"^T",351],["^ ","^S",0,"^T",354]],"^16",[["^ ","^S",4,"^T",351,"^9","found"]],"^Z",[["^ ","^S",12,"^T",351],["^ ","^S",29,"^T",351,"^9","G__31221"],["^ ","^S",0,"^T",352],["^ ","^S",0,"^T",352],["^ ","^S",78,"^T",352,"^9","G__31221"],["^ ","^S",104,"^T",352,"^9","G__31221"]],"^1C",[["^ ","^S",8,"^T",352,"^9","idx"],["^ ","^S",44,"^T",352,"^9","idx"],["^ ","^S",90,"^T",352,"^9","idx"]],"^1E",[["^ ","^S",40,"^T",351]],"^1F",[["^ ","^S",40,"^T",351,"^9","clojure.set/rename-keys"]],"^1N",[["^ ","^S",64,"^T",351]],"^1>",[["^ ","^S",64,"^T",351,"^9","cljs.core/select-keys"]],"~i58",[["^ ","^S",86,"^T",351,"^9","x"]],"^1B",[["^ ","^S",88,"^T",351]],"^1Q",[["^ ","^S",88,"^T",351,"^9","cljs.core/keys"]],"^1R",[["^ ","^S",103,"^T",351,"^9","k"]],"~i70",[["^ ","^S",107,"^T",351,"^9","k"]]],"~i125",["^ ","^1H",[["^ ","^S",0,"^T",354]],"^16",[["^ ","^S",20,"^T",354,"^9","found"]]],"~i126",["^ ","^Y",[["^ ","^S",0,"^T",355],["^ ","^S",54,"^T",355],["^ ","^S",18,"^T",356,"^9","p1__31206#"],["^ ","^S",35,"^T",356,"^9","p2__31207#"],["^ ","^S",0,"^T",357]],"^1:",[["^ ","^S",7,"^T",355,"^9","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1C",[["^ ","^S",0,"^T",357],["^ ","^S",52,"^T",357,"^9","p1__31206#"]],"^[",[["^ ","^S",7,"^T",357,"^9","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^S",69,"^T",357],["^ ","^S",172,"^T",357,"^9","p2__31207#"]],"^1K",[["^ ","^S",69,"^T",357,"^9","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1?",[["^ ","^S",189,"^T",357,"^9","x"]],"^1X",[["^ ","^S",1,"^T",359,"^9","ret"]],"^1O",[["^ ","^S",5,"^T",359,"^9","found"]]],"~i127",["^ ","^Y",[["^ ","^S",0,"^T",361,"^9","ret"]]],"~i128",["^ ","^1H",[["^ ","^S",35,"^T",364,"^9","s"]]],"~i130",["^ ","~i0",[["^ ","^S",0,"^T",369],["^ ","^S",28,"^T",372],["^ ","^S",0,"^T",373]],"~i6",[["^ ","^S",0,"^T",372,"^9","clojure.set/subset?"]]],"~i132",["^ ","~i3",[["^ ","^S",64,"^T",372,"^9","set1"]],"~i8",[["^ ","^S",69,"^T",372,"^9","set2"]]],"~i133",["^ ","~i2",[["^ ","^S",0,"^T",373]],"~i7",[["^ ","^S",8,"^T",373]],"^1<",[["^ ","^S",9,"^T",373]],"^R",[["^ ","^S",9,"^T",373,"^9","cljs.core/count"]],"^15",[["^ ","^S",25,"^T",373,"^9","set1"]],"^18",[["^ ","^S",34,"^T",373]],"^V",[["^ ","^S",34,"^T",373,"^9","cljs.core/count"]],"^29",[["^ ","^S",50,"^T",373,"^9","set2"]]],"~i134",["^ ","~i7",[["^ ","^S",62,"^T",373],["^ ","^S",85,"^T",373],["^ ","^S",96,"^T",373,"^9","p1__31223#"],["^ ","^S",0,"^T",374]],"~i8",[["^ ","^S",62,"^T",373,"^9","cljs.core/every?"]],"^10",[["^ ","^S",0,"^T",374],["^ ","^S",38,"^T",374,"^9","p1__31223#"]],"^1H",[["^ ","^S",7,"^T",374,"^9","cljs.core/contains?"]],"^Z",[["^ ","^S",33,"^T",374,"^9","set2"]],"^13",[["^ ","^S",3,"^T",375,"^9","set1"]]],"~i136",["^ ","~i0",[["^ ","^S",0,"^T",377],["^ ","^S",30,"^T",380],["^ ","^S",0,"^T",381]],"~i6",[["^ ","^S",0,"^T",380,"^9","clojure.set/superset?"]]],"~i138",["^ ","~i3",[["^ ","^S",68,"^T",380,"^9","set1"]],"~i8",[["^ ","^S",73,"^T",380,"^9","set2"]]],"~i139",["^ ","~i2",[["^ ","^S",0,"^T",381]],"~i7",[["^ ","^S",8,"^T",381]],"^1<",[["^ ","^S",9,"^T",381]],"^R",[["^ ","^S",9,"^T",381,"^9","cljs.core/count"]],"^15",[["^ ","^S",25,"^T",381,"^9","set1"]],"^18",[["^ ","^S",34,"^T",381]],"^V",[["^ ","^S",34,"^T",381,"^9","cljs.core/count"]],"^29",[["^ ","^S",50,"^T",381,"^9","set2"]]],"~i140",["^ ","~i7",[["^ ","^S",62,"^T",381],["^ ","^S",85,"^T",381],["^ ","^S",96,"^T",381,"^9","p1__31224#"],["^ ","^S",0,"^T",382]],"~i8",[["^ ","^S",62,"^T",381,"^9","cljs.core/every?"]],"^10",[["^ ","^S",0,"^T",382],["^ ","^S",38,"^T",382,"^9","p1__31224#"]],"^1H",[["^ ","^S",7,"^T",382,"^9","cljs.core/contains?"]],"^Z",[["^ ","^S",33,"^T",382,"^9","set1"]],"^13",[["^ ","^S",3,"^T",383,"^9","set2"]]],"~i142",["^ ","~i0",[["^ ","^S",0,"^T",385]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^?"],1516731430000,["^J","goog/math/math.js"],1516731431000,["^J","goog/array/array.js"],1516731431000,["^J","goog/debug/error.js"],1516731431000,["^J","goog/dom/nodetype.js"],1516731431000,["^J","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^J","goog/math/long.js"],1516731431000,["^J","goog/functions/functions.js"],1516731431000,["^J","goog/structs/map.js"],1516731431000,["^J","goog/asserts/asserts.js"],1516731431000,["^J","goog/uri/uri.js"],1516731431000,["^J","goog/base.js"],1516731431000,["^J","goog/structs/structs.js"],1516731431000,["^J","goog/string/string.js"],1516731431000,["^J","goog/reflect/reflect.js"],1516731431000,["^J","goog/string/stringbuffer.js"],1516731431000,["^J","goog/iter/iter.js"],1516731431000,["^J","cljs/core.cljs"],1516731430000,["^J","goog/math/integer.js"],1516731431000,["^J","clojure/set.cljs"],1516731430000,["^J","goog/uri/utils.js"],1516731431000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ "],"^6",null,"^7",["^8",[]],"^9","^:","^=",null,"^>",["^ ","^?","^?","^@","^@"],"^A",["^8",[]],"~:shadow/js-access-global",["^8",["Error"]],"^B",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","~:file","clojure/set.cljs","~:line",19,"~:column",7,"~:end-line",19,"~:end-column",12,"~:arglists",["^E",["~$quote",["^E",[[],["~$s1"],["^3T","~$s2"],["^3T","^3U","~$&","~$sets"]]]]],"~:doc","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",["^E",[[],["^3T"],["^3T","^3U"]]],"^3R",["^E",[[],["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"~:arglists-meta",["^E",[null,null,null,null]]]],"^9","~$clojure.set/union","^3Y",true,"^3M","clojure/set.cljs","^3Q",12,"^3X",["^ ","^3Y",true,"^3Z",2,"^3[",["^E",[[],["^3T"],["^3T","^3U"]]],"^3R",["^E",[[],["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^40",["^E",[null,null,null,null]]],"^3[",["^E",[[],["^3T"],["^3T","^3U"]]],"~:protocol-impl",null,"^40",["^E",[null,null,null,null]],"^3O",1,"^3N",19,"^3P",19,"^3Z",2,"~:fn-var",true,"^3R",["^E",[[],["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^3W","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",97,"^3O",7,"^3P",97,"^3Q",17,"^3R",["^E",["^3S",["^E",[["~$m"]]]]],"^3W","Returns the map with the vals mapped to the keys."],"^9","~$clojure.set/map-invert","^3Y",false,"^3M","clojure/set.cljs","^3Q",17,"^3[",["^E",[["~$m"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",97,"^3P",97,"^3Z",1,"^43",true,"^3R",["^E",["^3S",["^E",[["~$m"]]]]],"^3W","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",101,"^3O",7,"^3P",101,"^3Q",11,"^3R",["^E",["^3S",["^E",[["~$xrel","~$yrel"],["^47","^48","~$km"]]]]],"^3W","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^3X",["^ ","^3Y",false,"^3Z",3,"^3[",["^E",[["^47","^48"],["^47","^48","^49"]]],"^3R",["^E",[["^47","^48"],["^47","^48","^49"]]],"^40",["^E",[null,null]]]],"^9","~$clojure.set/join","^3Y",false,"^3M","clojure/set.cljs","^3Q",11,"^3X",["^ ","^3Y",false,"^3Z",3,"^3[",["^E",[["^47","^48"],["^47","^48","^49"]]],"^3R",["^E",[["^47","^48"],["^47","^48","^49"]]],"^40",["^E",[null,null]]],"^3[",["^E",[["^47","^48"],["^47","^48","^49"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",101,"^3P",101,"^3Z",3,"^43",true,"^3R",["^E",[["^47","^48"],["^47","^48","^49"]]],"^3W","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",61,"^3O",7,"^3P",61,"^3Q",13,"^3R",["^E",["^3S",["^E",[["~$pred","~$xset"]]]]],"^3W","Returns a set of the elements for which pred is true"],"^9","~$clojure.set/select","^3Y",false,"^3M","clojure/set.cljs","^3Q",13,"^3[",["^E",[["^4<","^4="]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",61,"^3P",61,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^4<","^4="]]]]],"^3W","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",31,"^3O",7,"^3P",31,"^3Q",19,"^3R",["^E",["^3S",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]]]],"^3W","Return a set that is the intersection of the input sets","^3X",["^ ","^3Y",true,"^3Z",2,"^3[",["^E",[["^3T"],["^3T","^3U"]]],"^3R",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^40",["^E",[null,null,null]]]],"^9","~$clojure.set/intersection","^3Y",true,"^3M","clojure/set.cljs","^3Q",19,"^3X",["^ ","^3Y",true,"^3Z",2,"^3[",["^E",[["^3T"],["^3T","^3U"]]],"^3R",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^40",["^E",[null,null,null]]],"^3[",["^E",[["^3T"],["^3T","^3U"]]],"^42",null,"^40",["^E",[null,null,null]],"^3O",1,"^3N",31,"^3P",31,"^3Z",2,"^43",true,"^3R",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^3W","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",137,"^3O",7,"^3P",137,"^3Q",16,"^3R",["^E",["^3S",["^E",[["~$set1","~$set2"]]]]],"^3W","Is set1 a superset of set2?"],"^9","~$clojure.set/superset?","^3Y",false,"^3M","clojure/set.cljs","^3Q",16,"^3[",["^E",[["^4B","^4C"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",137,"^3P",137,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^4B","^4C"]]]]],"^3W","Is set1 a superset of set2?"],"~$index",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",87,"^3O",7,"^3P",87,"^3Q",12,"^3R",["^E",["^3S",["^E",[["^47","~$ks"]]]]],"^3W","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^9","~$clojure.set/index","^3Y",false,"^3M","clojure/set.cljs","^3Q",12,"^3[",["^E",[["^47","^4F"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",87,"^3P",87,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^47","^4F"]]]]],"^3W","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",13,"^3O",8,"^3P",13,"^3Q",22,"~:private",true,"^3R",["^E",["^3S",["^E",[["~$k","~$coll"]]]]]],"^4I",true,"^9","~$clojure.set/bubble-max-key","^3Y",false,"^3M","clojure/set.cljs","^3Q",22,"^3[",["^E",[["~$k","^4J"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",13,"^3P",13,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["~$k","^4J"]]]]]],"~$subset?",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",131,"^3O",7,"^3P",131,"^3Q",14,"^3R",["^E",["^3S",["^E",[["^4B","^4C"]]]]],"^3W","Is set1 a subset of set2?"],"^9","~$clojure.set/subset?","^3Y",false,"^3M","clojure/set.cljs","^3Q",14,"^3[",["^E",[["^4B","^4C"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",131,"^3P",131,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^4B","^4C"]]]]],"^3W","Is set1 a subset of set2?"],"~$rename",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",82,"^3O",7,"^3P",82,"^3Q",13,"^3R",["^E",["^3S",["^E",[["^47","~$kmap"]]]]],"^3W","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^9","~$clojure.set/rename","^3Y",false,"^3M","clojure/set.cljs","^3Q",13,"^3[",["^E",[["^47","^4O"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",82,"^3P",82,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^47","^4O"]]]]],"^3W","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",72,"^3O",7,"^3P",72,"^3Q",18,"^3R",["^E",["^3S",["^E",[["~$map","^4O"]]]]],"^3W","Returns the map with the keys in kmap renamed to the vals in kmap"],"^9","~$clojure.set/rename-keys","^3Y",false,"^3M","clojure/set.cljs","^3Q",18,"^3[",["^E",[["^4R","^4O"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",72,"^3P",72,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^4R","^4O"]]]]],"^3W","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",67,"^3O",7,"^3P",67,"^3Q",14,"^3R",["^E",["^3S",["^E",[["^47","^4F"]]]]],"^3W","Returns a rel of the elements of xrel with only the keys in ks"],"^9","~$clojure.set/project","^3Y",false,"^3M","clojure/set.cljs","^3Q",14,"^3[",["^E",[["^47","^4F"]]],"^42",null,"^40",["^E",[null,null]],"^3O",1,"^3N",67,"^3P",67,"^3Z",2,"^43",true,"^3R",["^E",["^3S",["^E",[["^47","^4F"]]]]],"^3W","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^3L",null,"^5",["^ ","^3M","clojure/set.cljs","^3N",46,"^3O",7,"^3P",46,"^3Q",17,"^3R",["^E",["^3S",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]]]],"^3W","Return a set that is the first set without elements of the remaining sets","^3X",["^ ","^3Y",true,"^3Z",2,"^3[",["^E",[["^3T"],["^3T","^3U"]]],"^3R",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^40",["^E",[null,null,null]]]],"^9","~$clojure.set/difference","^3Y",true,"^3M","clojure/set.cljs","^3Q",17,"^3X",["^ ","^3Y",true,"^3Z",2,"^3[",["^E",[["^3T"],["^3T","^3U"]]],"^3R",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^40",["^E",[null,null,null]]],"^3[",["^E",[["^3T"],["^3T","^3U"]]],"^42",null,"^40",["^E",[null,null,null]],"^3O",1,"^3N",46,"^3P",46,"^3Z",2,"^43",true,"^3R",["^E",[["^3T"],["^3T","^3U"],["^3T","^3U","~$&","^3V"]]],"^3W","Return a set that is the first set without elements of the remaining sets"]],"^C",["^ ","^?","^?"],"^G",["^ "],"^H",["^@","^?"]],"^<","^:","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^3E",[["^4Z","~:static-fns"],true,["^4Z","~:elide-asserts"],true,["^4Z","~:optimize-constants"],null,["^4Z","~:emit-constants"],null,["^4Z","~:infer-externs"],true,["^4Z","^O"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^4Z","~:fn-invoke-direct"],null,["^4Z","^Q"],null]]]