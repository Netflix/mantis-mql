clojure.aotCompile = true

configurations {
    shadedAndRelocatedConfiguration
    implementation.extendsFrom shadedAndRelocatedConfiguration
}

repositories { 
  mavenCentral()
  maven { url "https://clojars.org/repo" }
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
  shadedAndRelocatedConfiguration 'org.clojure:clojure:1.8.0'
  shadedAndRelocatedConfiguration 'org.clojure:data.json:0.2.3'
  shadedAndRelocatedConfiguration 'instaparse:instaparse:1.4.9'
  shadedAndRelocatedConfiguration 'io.reactivex:rxjava:1.3.8'
  implementation 'io.reactivex:rxclojure:1.0.0'
  testImplementation 'criterium:criterium:0.4.4'
  testImplementation 'org.clojure:test.check:0.9.0'
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.assertj:assertj-core:3.12.2'
  testImplementation 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.9'
  testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.9'
  testImplementation 'com.fasterxml.jackson.core:jackson-core:2.9.9'
  testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
  testImplementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
}

// Disable for gradle 7.x compatibility with netflixoss
//gradle.startParameter.excludedTaskNames += "licenseMain"
//gradle.startParameter.excludedTaskNames += "licenseTest"

shadowJar {
    classifier null // this configuration is used to produce only the shadowed jar
    relocate 'instaparse', 'io.mantisrx.mql.shaded.instaparse'
    relocate 'clojure', 'io.mantisrx.mql.shaded.clojure'
    relocate 'rx.lang.clojure', 'io.mantisrx.mql.shaded.rx.lang.clojure'
    configurations = [project.configurations.shadedAndRelocatedConfiguration] // shadowJar should only bundle dependencies on this configuration
}

jar {
    enabled = false // this configuration is used to produce only the shadowed jar
}
jar.dependsOn shadowJar // this configuration is used to produce only the shadowed jar

afterEvaluate {
    publishing {
      publications {
        // to remove shaded dependency from ivy.xml
        withType(IvyPublication) {
          descriptor.withXml {
            asNode()
              .dependencies
              .dependency
              .findAll {
                ['clojure',
                 'data.json',
                 'instaparse',
                 'rxclojure'
                ].contains(it.artifactId.text())
              }
              .each { it.parent().remove(it) }
          }
        }
        // to remove shaded dependency from pom.xml
        withType(MavenPublication) {
          pom.withXml {
            asNode()
              .dependencies
              .dependency
              .findAll {
                ['clojure',
                 'data.json',
                 'instaparse',
                 'rxclojure'
                ].contains(it.artifactId.text())
              }
              .each { it.parent().remove(it) }
          }
        }
      }
    }
}
