{"version":3,"file":"cljs.tools.reader.edn.js","sources":["cljs/tools/reader/edn.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.commons/read-comment","cljs.tools.reader.impl.errors/throw-invalid","reader","token","res","f","ch","opts","cljs.tools.reader.reader-types/get-file-name","cljs.core/PROTOCOL_SENTINEL","o","cljs.core/count","the-set","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","coll","cljs.tools.reader.reader-types/read-char","rdr","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.tools.reader.edn/read","dm","cljs.tools.reader.edn/escape-char","sb","cljs.tools.reader.reader-types/peek-char","G__33799","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-delimited","_","name","s","cljs.tools.reader.reader-types/indexing-reader?","object","cljs.tools.reader.edn.read_unicode_char.cljs$core$IFn$_invoke$arity$5","cljs.core/set","temp__5455__auto__","ns","G__33967","cljs.tools.reader.impl.commons/parse-symbol","cljs.tools.reader.impl.utils/second'","token-len","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$4","eof-error?","eof","G__33917","G__33918","js/parseInt","uc","cljs.tools.reader.reader-types/unread","cljs.tools.reader.edn/read-unmatched-delimiter","l","offset","length","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.edn/read-set","obj","cljs.core/PersistentHashMap","cljs.core/to-array","the-map","cljs.tools.reader.edn/not-constituent?","mret","macrofn","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.edn/dispatch-macros","cljs.tools.reader.impl.utils/ex-info?","e","i","cljs.tools.reader.edn/read-meta","cljs.tools.reader.edn/read-symbolic-value","initch","cljs.tools.reader.edn.read_token.cljs$core$IFn$_invoke$arity$3","kind","delim","base","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","cljs.core/not","len","js/Error","cljs.tools.reader.edn/read-string*","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","exact?","ks","cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.utils/whitespace?","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.edn/read-char*","keys","cljs.tools.reader.impl.errors/throw-bad-metadata-target","d","ic","cljs.tools.reader.edn/lower-limit","a","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.edn/read-dispatch","cljs.tools.reader.edn/read-map","goog/string.StringBuffer","cljs.tools.reader/char-code","c","cljs.tools.reader.edn.read_unicode_char.cljs$core$IFn$_invoke$arity$4","cljs.tools.reader.impl.commons/throwing-reader","sym","cljs.tools.reader.edn/macros","G__34011","cljs.tools.reader.edn/upper-limit","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","and__7067__auto__","cljs.tools.reader.impl.commons/number-literal?","cljs.tools.reader.edn/read-number","cljs.core/contains?","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","js/Number.NEGATIVE_INFINITY","cljs.tools.reader.edn/read-tagged","G__33963","the-list","or__7079__auto__","cljs.tools.reader.impl.commons/match-number","items","cljs.core/List","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","p","e34036","cljs.tools.reader.impl.utils/namespace-keys","js/String.fromCharCode","tag","cljs.tools.reader.impl.utils/char","cljs.tools.reader.edn/read-discard","cljs.tools.reader.edn/read-namespaced-map","cljs.core/ex-data","cljs.tools.reader.impl.errors/throw-single-colon","cljs.core/transient","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.core/meta","cljs.core/with-meta","G__33896","cljs.tools.reader.impl.errors/throw-bad-reader-tag","G__33973","var_args","G__33791","cljs.tools.reader.edn/read-token","cljs.tools.reader.edn/read-vector","cljs.tools.reader.impl.errors/throw-odd-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/Symbol","map-count","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","G__33924","cljs.tools.reader.edn.read_token.cljs$core$IFn$_invoke$arity$4","cljs.tools.reader.impl.errors/throw-bad-char","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader/default-data-readers","validate-leading?","cljs.tools.reader.edn/read-symbol","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/wrapping-reader","key-set","G__33928","G__33915","temp__5457__auto__","vec__33847","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","start-line","start-column","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1","G__34052","cljs.tools.reader.edn/read-string","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","goog.string/startsWith","cljs.tools.reader.impl.commons/read-past","js/Number.POSITIVE_INFINITY","js/Number.NaN","cljs.tools.reader.edn/read-list","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.impl.errors/throw-eof-at-start","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.impl.errors/throw-invalid-number","cljs.tools.reader.edn/macro-terminating?","cljs.tools.reader.edn/read-keyword","G__34003","cljs.tools.reader.impl.errors/throw-invalid-character-literal","cljs.tools.reader.impl.errors.throw_eof_reading.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-bad-metadata","G__33926","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","x__8033__auto__","cljs.core/-conj","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","cljs.core/odd?","cljs.core/zipmap","vals","cljs.core/map?","backslash","cljs.core/persistent!","cljs.tools.reader.impl.errors.throw_eof_delimited.cljs$core$IFn$_invoke$arity$5","vec__33863","cljs.tools.reader.impl.errors/throw-no-dispatch","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/list","G__33941","G__33875","cljs.core/rest","cljs.tools.reader.impl.errors/throw-eof-error","G__33806","G__33803","G__33804","G__33805","cljs.core/empty?","G__34025","p__34031","map__34032","cljs.core/hash-map","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","G__33851","G__33852","G__33853","G__33854","G__33855","G__33816","cljs.tools.reader.edn/read-unicode-char"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second']]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers char-code]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch (do (unread rdr initch) initch)]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (str sb)\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append (read-char rdr))) (peek-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (if-let [obj (read-tagged (doto rdr (unread ch)) ch opts)]\n        obj\n        (err/throw-no-dispatch rdr ch)))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (int \\uD7ff))\n(def ^:private ^:const lower-limit (int \\uE000))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr c)\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (unread rdr ch)\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword token) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword token)))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"]}