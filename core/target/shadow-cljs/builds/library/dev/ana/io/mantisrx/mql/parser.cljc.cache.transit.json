["^ ","~:output",["^ ","~:js","goog.provide('io.mantisrx.mql.parser');\ngoog.require('cljs.core');\ngoog.require('instaparse.core');\nio.mantisrx.mql.parser.mql = \"\\nQUERY = AGG_QUERY | NORMAL_QUERY\\nNORMAL_QUERY = SELECT <whitespace> TABLE [<whitespace> LIMIT] [<whitespace> ORDER] [<whitespace> SAMPLE]\\nAGG_QUERY = AGG_SELECT <whitespace> TABLE [<whitespace> HAVING] [<whitespace> ORDER] [<whitespace> LIMIT] [<whitespace> SAMPLE]\\n<SELECT> = <select_kw> <whitespace> (asterisk | SELECTLIST)\\n<AGG_SELECT> = <select_kw> <whitespace> AGG_LIST\\nSAMPLE = sample_kw #'.*'\\nAGG_LIST = (AGG_OP | operand) (<whitespace>? <','> <whitespace>? (AGG_OP | operand))*\\nAGG_OP = func_kw <'('> (operand | asterisk | distinct_operand) <')'>\\nTABLE = FROM [<whitespace> WINDOW] [<whitespace> WHERE] [<whitespace> GROUP]\\nSELECTLIST = operand ((<whitespace>?) <','> <whitespace>? operand)*\\nFROM = <from_kw> <whitespace> word (<whitespace>? <','> <whitespace>? word)*\\nWINDOW = <window_kw> <whitespace> number (<whitespace> number)?\\nWHERE = <where_kw> <whitespace> search_condition\\nHAVING = <having_kw> <whitespace> search_condition\\nGROUP = <group_kw> <whitespace> property (<whitespace>? <','> <whitespace>? property)*\\nORDER = <order_kw> <whitespace> property (<whitespace> desc_kw)?\\nSAMPLE = <sample_kw> <whitespace> sample_config\\nLIMIT = <limit_kw> <whitespace> number\\n\\nsearch_condition = boolean_term | search_condition <whitespace>? or_kw <whitespace>? boolean_term\\nboolean_term = boolean_test | boolean_test <whitespace>? and_kw <whitespace>? boolean_test\\nboolean_test = StarBinaryExpr | BinaryExpr | ARegexExpr | < whitespace? '(' whitespace? > search_condition < whitespace? ')' whitespace?> | not_search_condition | boolean_term\\nnot_search_condition = <not_kw> < whitespace? '(' whitespace?> <whitespace>? search_condition <whitespace>? < whitespace? ')' whitespace?> \\n\\n<BinaryExpr> = operand <whitespace>? BINARY_OPERATOR <whitespace>? operand\\nStarBinaryExpr = star_property <whitespace>? BINARY_OPERATOR <whitespace>? operand\\n<ARegexExpr> = operand <whitespace>? REGEX_OPERATOR <whitespace>? re_expression\\nBINARY_OPERATOR = '=' | '==' | '!=' | '<>' | '<' | '<=' | '>' | '>=' | '==+'\\nREGEX_OPERATOR = '==~'\\n\\n<operand> = sw_property | property | string_literal | number | boolean_literal | not_operand | null | tick\\ndistinct_operand = <distinct_kw> <whitespace> property\\nnull = 'null'\\nnot_operand = <not_kw> property | <not_kw> string_literal | <not_kw> number | <not_kw> boolean_literal\\nstring_literal = #'\\\\\\\".*?(\\\\'.*?)*?\\\\\\\"' | #'\\\\'.*?(\\\\'.*?)*?\\\\''\\nboolean_literal = 'true' | 'false'\\nre_expression = <'/'> #'([^/\\\\\\\\]*(\\\\\\\\.[^/\\\\\\\\]*)*)' <'/'>\\nasterisk = '*'\\nwhitespace = #'\\\\s+'\\nword = #'[^\\\\,\\\\s]*'\\nq_pword = #'\\\"[^\\\"\\\\'\\\\s]+\\\"' | #'\\\\'[^\\\"\\\\'\\\\s]+\\\\''\\npword = #'[^\\\",\\\\'\\\\s\\\\*\\\\)\\\\(=!<>~]+'\\nnumber = #'-?[0-9]+(\\\\.[0-9]+(E-?[0-9]+)?)?'\\ninteger = #'-?[0-9]+'\\ntick = 'tick()'\\nproperty = pword | <'e'>(<'['> (q_pword | number) <']'>)+\\nstar_property = pword | <'e'>(<'['> (q_pword | '*') <']'>)+\\nsw_property = <'e'>(<'['> <'^'> q_pword <']'>)\\n<sample_config> = #'\\\\{.*?\\\\}'\\n\\nselect_kw = 'select' | 'SELECT'\\nfrom_kw = 'from' | 'FROM'\\nwhere_kw = 'where' | 'WHERE'\\nhaving_kw = 'having' | 'HAVING'\\nand_kw = 'AND' | 'and' | '&&'\\nor_kw = 'OR' | 'or' | '||'\\nsample_kw = 'sample' | 'SAMPLE'\\ngroup_kw = 'group by' | 'GROUP BY'\\norder_kw = 'order by' | 'ORDER BY'\\nlimit_kw = 'limit' | 'LIMIT'\\nwindow_kw = 'window' | 'WINDOW'\\nfunc_kw = percentile_kw | 'COUNT' | 'count' | 'SUM' | 'sum' | 'MIN' | 'min' | 'MAX' | 'max' | 'AVERAGE' | 'average' | 'LIST' | 'list'\\n<percentile_kw> = 'P995' | 'p995' |  'P99' | 'p99' | 'P95' | 'p95' | 'P90' | 'p90' | 'P75' | 'p75' | 'P50' | 'p50' | 'P25' | 'p25' | 'P10' | 'p10' | 'P5' | 'p5' | 'P1' | 'p1'\\nnot_kw = 'NOT' <whitespace> | 'not' <whitespace> | '!'\\ndistinct_kw = 'DISTINCT' | 'distinct'\\ndesc_kw = 'DESC' | 'desc'\";\nio.mantisrx.mql.parser.parser = instaparse.core.parser(io.mantisrx.mql.parser.mql);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ "],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$io.mantisrx.mql.parser","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$instaparse.core","^?","~$insta","^?","~$cljs.core","^A","~$goog","^B"],"~:seen",["^8",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^A","^A"],"~:form",["~#list",["~$ns","^:",["^H",["^D",["^?","~:as","^@"]]]]],"~:flags",["^ ","^D",["^8",[]]],"~:js-deps",["^ "],"~:deps",["^B","^A","^?"]],"^<","^:","~:resource-id",["~:shadow.build.classpath/resource","io/mantisrx/mql/parser.cljc"],"~:compiled-at",1518022444191,"~:resource-name","io/mantisrx/mql/parser.cljc","~:warnings",[],"~:source","(ns io.mantisrx.mql.parser\n  (:require [instaparse.core :as insta]))\n\n(def mql \"\nQUERY = AGG_QUERY | NORMAL_QUERY\nNORMAL_QUERY = SELECT <whitespace> TABLE [<whitespace> LIMIT] [<whitespace> ORDER] [<whitespace> SAMPLE]\nAGG_QUERY = AGG_SELECT <whitespace> TABLE [<whitespace> HAVING] [<whitespace> ORDER] [<whitespace> LIMIT] [<whitespace> SAMPLE]\n<SELECT> = <select_kw> <whitespace> (asterisk | SELECTLIST)\n<AGG_SELECT> = <select_kw> <whitespace> AGG_LIST\nSAMPLE = sample_kw #'.*'\nAGG_LIST = (AGG_OP | operand) (<whitespace>? <','> <whitespace>? (AGG_OP | operand))*\nAGG_OP = func_kw <'('> (operand | asterisk | distinct_operand) <')'>\nTABLE = FROM [<whitespace> WINDOW] [<whitespace> WHERE] [<whitespace> GROUP]\nSELECTLIST = operand ((<whitespace>?) <','> <whitespace>? operand)*\nFROM = <from_kw> <whitespace> word (<whitespace>? <','> <whitespace>? word)*\nWINDOW = <window_kw> <whitespace> number (<whitespace> number)?\nWHERE = <where_kw> <whitespace> search_condition\nHAVING = <having_kw> <whitespace> search_condition\nGROUP = <group_kw> <whitespace> property (<whitespace>? <','> <whitespace>? property)*\nORDER = <order_kw> <whitespace> property (<whitespace> desc_kw)?\nSAMPLE = <sample_kw> <whitespace> sample_config\nLIMIT = <limit_kw> <whitespace> number\n\nsearch_condition = boolean_term | search_condition <whitespace>? or_kw <whitespace>? boolean_term\nboolean_term = boolean_test | boolean_test <whitespace>? and_kw <whitespace>? boolean_test\nboolean_test = StarBinaryExpr | BinaryExpr | ARegexExpr | < whitespace? '(' whitespace? > search_condition < whitespace? ')' whitespace?> | not_search_condition | boolean_term\nnot_search_condition = <not_kw> < whitespace? '(' whitespace?> <whitespace>? search_condition <whitespace>? < whitespace? ')' whitespace?> \n\n<BinaryExpr> = operand <whitespace>? BINARY_OPERATOR <whitespace>? operand\nStarBinaryExpr = star_property <whitespace>? BINARY_OPERATOR <whitespace>? operand\n<ARegexExpr> = operand <whitespace>? REGEX_OPERATOR <whitespace>? re_expression\nBINARY_OPERATOR = '=' | '==' | '!=' | '<>' | '<' | '<=' | '>' | '>=' | '==+'\nREGEX_OPERATOR = '==~'\n\n<operand> = sw_property | property | string_literal | number | boolean_literal | not_operand | null | tick\ndistinct_operand = <distinct_kw> <whitespace> property\nnull = 'null'\nnot_operand = <not_kw> property | <not_kw> string_literal | <not_kw> number | <not_kw> boolean_literal\nstring_literal = #'\\\\\\\".*?(\\\\'.*?)*?\\\\\\\"' | #'\\\\'.*?(\\\\'.*?)*?\\\\''\nboolean_literal = 'true' | 'false'\nre_expression = <'/'> #'([^/\\\\\\\\]*(\\\\\\\\.[^/\\\\\\\\]*)*)' <'/'>\nasterisk = '*'\nwhitespace = #'\\\\s+'\nword = #'[^\\\\,\\\\s]*'\nq_pword = #'\\\"[^\\\"\\\\'\\\\s]+\\\"' | #'\\\\'[^\\\"\\\\'\\\\s]+\\\\''\npword = #'[^\\\",\\\\'\\\\s\\\\*\\\\)\\\\(=!<>~]+'\nnumber = #'-?[0-9]+(\\\\.[0-9]+(E-?[0-9]+)?)?'\ninteger = #'-?[0-9]+'\ntick = 'tick()'\nproperty = pword | <'e'>(<'['> (q_pword | number) <']'>)+\nstar_property = pword | <'e'>(<'['> (q_pword | '*') <']'>)+\nsw_property = <'e'>(<'['> <'^'> q_pword <']'>)\n<sample_config> = #'\\\\{.*?\\\\}'\n\nselect_kw = 'select' | 'SELECT'\nfrom_kw = 'from' | 'FROM'\nwhere_kw = 'where' | 'WHERE'\nhaving_kw = 'having' | 'HAVING'\nand_kw = 'AND' | 'and' | '&&'\nor_kw = 'OR' | 'or' | '||'\nsample_kw = 'sample' | 'SAMPLE'\ngroup_kw = 'group by' | 'GROUP BY'\norder_kw = 'order by' | 'ORDER BY'\nlimit_kw = 'limit' | 'LIMIT'\nwindow_kw = 'window' | 'WINDOW'\nfunc_kw = percentile_kw | 'COUNT' | 'count' | 'SUM' | 'sum' | 'MIN' | 'min' | 'MAX' | 'max' | 'AVERAGE' | 'average' | 'LIST' | 'list'\n<percentile_kw> = 'P995' | 'p995' |  'P99' | 'p99' | 'P95' | 'p95' | 'P90' | 'p90' | 'P75' | 'p75' | 'P50' | 'p50' | 'P25' | 'p25' | 'P10' | 'p10' | 'P5' | 'p5' | 'P1' | 'p1'\nnot_kw = 'NOT' <whitespace> | 'not' <whitespace> | '!'\ndistinct_kw = 'DISTINCT' | 'distinct'\ndesc_kw = 'DESC' | 'desc'\")\n\n(def parser (insta/parser mql))\n","~:reader-features",["^8",["~:cljs"]],"~:source-map",["^ ","~i3",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",3],["^ ","^W",29,"^X",3]],"~i5",[["^ ","^W",0,"^X",3,"^9","io.mantisrx.mql.parser/mql"]]],"~i71",["^ ","~i0",[["^ ","^W",0,"^X",4]],"~i5",[["^ ","^W",0,"^X",4,"^9","io.mantisrx.mql.parser/parser"]],"~i12",[["^ ","^W",32,"^X",4]],"~i13",[["^ ","^W",32,"^X",4,"^9","instaparse.core/parser"]],"~i26",[["^ ","^W",55,"^X",4,"^9","io.mantisrx.mql.parser/mql"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["^O","instaparse/auto_flatten_seq.cljc"],1516731432000,["~:macro","^A"],1516731430000,["^O","cljs/tools/reader/impl/utils.cljs"],1516731429000,["^O","goog/math/math.js"],1516731431000,["^O","goog/string/stringformat.js"],1516731431000,["^O","instaparse/gll.cljc"],1516731432000,["^O","instaparse/abnf.cljc"],1516731432000,["^O","goog/array/array.js"],1516731431000,["^14","~$cljs.tools.reader.reader-types"],1516731429000,["^O","goog/debug/error.js"],1516731431000,["^O","io/mantisrx/mql/parser.cljc"],[1517873001000],["^O","goog/dom/nodetype.js"],1516731431000,["^O","cljs/tools/reader/impl/inspect.cljs"],1516731429000,["^O","instaparse/viz.cljs"],1516731432000,["^O","cljs/tools/reader.cljs"],1516731429000,["^14","~$instaparse.abnf"],1516731432000,["^O","instaparse/transform.cljc"],1516731432000,["^O","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^O","goog/math/long.js"],1516731431000,["^O","instaparse/reduction.cljc"],1516731432000,["^O","goog/i18n/uchar.js"],1516731431000,["^O","goog/functions/functions.js"],1516731431000,["^O","clojure/walk.cljs"],1516731430000,["^O","goog/structs/map.js"],1516731431000,["^14","~$instaparse.macros"],1516731432000,["^O","instaparse/failure.cljc"],1516731432000,["^O","goog/asserts/asserts.js"],1516731431000,["^O","goog/uri/uri.js"],1516731431000,["^O","instaparse/print.cljc"],1516731432000,["^14","~$instaparse.gll"],1516731432000,["^O","goog/base.js"],1516731431000,["^O","goog/structs/structs.js"],1516731431000,["^O","cljs/tools/reader/impl/errors.cljs"],1516731429000,["^O","clojure/string.cljs"],1516731430000,["^O","goog/string/string.js"],1516731431000,["^O","goog/reflect/reflect.js"],1516731431000,["^O","goog/string/stringbuffer.js"],1516731431000,["^O","instaparse/cfg.cljc"],1516731432000,["^O","cljs/tools/reader/reader_types.cljs"],1516731429000,["^O","goog/iter/iter.js"],1516731431000,["^O","cljs/tools/reader/impl/commons.cljs"],1516731429000,["^O","instaparse/repeat.cljc"],1516731432000,["^O","cljs/core.cljs"],1516731430000,["^O","instaparse/util.cljc"],1516731432000,["^O","goog/math/integer.js"],1516731431000,["^O","instaparse/line_col.cljc"],1516731432000,["^O","goog/uri/utils.js"],1516731431000,["^O","instaparse/core.cljc"],1516731432000,["^O","instaparse/combinators_source.cljc"],1516731432000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ "],"^6",null,"^7",["^8",[]],"^9","^:","^=",null,"^>",["^ ","^?","^?","^@","^?","^A","^A","^B","^B"],"^C",["^8",["^D"]],"^E",null,"~:defs",["^ ","~$mql",["^ ","^9","~$io.mantisrx.mql.parser/mql","~:file","io/mantisrx/mql/parser.cljc","~:line",4,"~:column",1,"~:end-line",4,"~:end-column",9,"^5",["^ ","^1>","io/mantisrx/mql/parser.cljc","^1?",4,"^1@",6,"^1A",4,"^1B",9],"~:tag","~$string"],"~$parser",["^ ","^9","~$io.mantisrx.mql.parser/parser","^1>","io/mantisrx/mql/parser.cljc","^1?",72,"^1@",1,"^1A",72,"^1B",12,"^5",["^ ","^1>","io/mantisrx/mql/parser.cljc","^1?",72,"^1@",6,"^1A",72,"^1B",12],"^1C","~$any"]],"^F",["^ ","^A","^A"],"^K",["^ ","^D",["^8",[]]],"^L",["^ "],"^M",["^B","^A","^?"]],"^<","^:","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^13",[["^1J","~:static-fns"],true,["^1J","~:elide-asserts"],false,["^1J","~:optimize-constants"],null,["^1J","~:emit-constants"],null,["^1J","~:infer-externs"],true,["^1J","^T"],null,["~:js-options","~:js-provider"],"^D",["~:mode"],"~:dev",["^1J","~:fn-invoke-direct"],null,["^1J","^V"],"/dev/null"]]]