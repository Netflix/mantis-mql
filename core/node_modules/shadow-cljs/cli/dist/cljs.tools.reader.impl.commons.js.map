{"version":3,"file":"cljs.tools.reader.impl.commons.js","sources":["cljs/tools/reader/impl/commons.cljs"],"mappings":"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","names":["denominator","m","bn","negate?","numerator","js/parseInt","sym","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","rdr","msg","n","a","match","s","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","token","cljs.tools.reader.impl.utils/numeric?","reader","ns-idx","vec__32451","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/re-find","pattern","cljs.tools.reader.impl.utils/newline?","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.commons/match-float","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","initch","pred","ch","_","cljs.tools.reader.impl.commons/matches?","cljs.tools.reader.impl.commons/float-pattern","cljs.tools.reader.impl.commons/match-int","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.commons/int-pattern","G__32430","G__32431","cljs.tools.reader.impl.commons/ratio-pattern","ns","cljs.tools.reader.impl.commons/skip-line","cljs.tools.reader.impl.commons/match-ratio","cljs.core/count","cljs.tools.reader.impl.commons/throwing-reader","js/parseFloat","cljs.tools.reader.impl.commons/number-literal?","G__32427","cljs.core/vec","cljs.tools.reader.impl.commons/read-past","var_args","args__8365__auto__","len__8358__auto__","i__8359__auto__","argseq__8366__auto__","cljs.core/IndexedSeq","cljs.tools.reader.impl.commons/read-comment","seq32468","G__32469","cljs.core/first","cljs.core/next","G__32443","cljs.tools.reader.impl.commons/parse-symbol","js/isNaN"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.commons\n  (:refer-clojure :exclude [char])\n  (:require\n   [cljs.tools.reader.impl.errors :refer [reader-error]]\n   [cljs.tools.reader.reader-types :refer [peek-char read-char]]\n   [cljs.tools.reader.impl.utils :refer [numeric? newline? char]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn ^boolean number-literal?\n  \"Checks whether the reader is at the start of a number literal\"\n  [^not-native reader initch]\n  (or (numeric? initch)\n      (and (or (identical? \\+ initch) (identical?  \\- initch))\n           (numeric? (peek-char reader)))))\n\n(defn read-past\n  \"Read until first character that doesn't match pred, returning\n   char.\"\n  [pred ^not-native rdr]\n  (loop [ch (read-char rdr)]\n    (if ^boolean (pred ch)\n      (recur (read-char rdr))\n      ch)))\n\n(defn skip-line\n  \"Advances the reader to the end of a line. Returns the reader\"\n  [^not-native reader]\n  (loop []\n    (when-not (newline? (read-char reader))\n      (recur)))\n  reader)\n\n(def int-pattern #\"^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$\")\n(def ratio-pattern #\"([-+]?[0-9]+)/([0-9]+)\")\n(def float-pattern #\"([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?\")\n\n(defn- match-int\n  [s]\n  (let [m (vec (re-find int-pattern s))]\n    (if-not (nil? (m 2))\n      0\n      (let [^boolean negate? (identical? \"-\" (m 1))\n            a (cond\n               (not (nil? (m 3))) [(m 3) 10]\n               (not (nil? (m 4))) [(m 4) 16]\n               (not (nil? (m 5))) [(m 5) 8]\n               (not (nil? (m 7))) [(m 7) (js/parseInt (m 6))]\n               :else              [nil nil])\n            n (a 0)]\n        (when-not (nil? n)\n          (let [bn (js/parseInt n (a 1))\n                bn (if negate? (* -1 bn) bn)]\n            (when-not (js/isNaN bn)\n              bn)))))))\n\n(defn- match-ratio\n  [s]\n  (let [m (vec (re-find ratio-pattern s))\n        numerator (m 1)\n        denominator (m 2)\n        numerator (if (re-find #\"^\\+\" numerator)\n                    (subs numerator 1)\n                    numerator)]\n    (/ (-> numerator   js/parseInt) ;;; No ratio type in cljs\n       (-> denominator js/parseInt)))); So will convert to js/Number\n\n(defn- match-float\n  [s]\n  (let [m (vec (re-find float-pattern s))]\n    (if-not (nil? (m 4)) ;; for BigDecimal \"10.03M\", as all parsed to js/Number\n      (js/parseFloat (m 1))\n      (js/parseFloat s))))\n\n(defn ^boolean matches? [pattern s]\n  (let [[match] (re-find pattern s)]\n    (identical? match s)))\n\n(defn match-number [s]\n  (if (matches? int-pattern s)\n    (match-int s)\n    (if (matches? float-pattern s)\n      (match-float s)\n      (when (matches? ratio-pattern s)\n        (match-ratio s)))))\n\n(defn parse-symbol\n  \"Parses a string into a vector of the namespace and symbol\"\n  [token]\n  (when-not (or (identical? \"\" token)\n                (true? (.test #\":$\" token))\n                (true? (.test #\"^::\" token)))\n    (let [ns-idx (.indexOf token \"/\")\n          ns (when (pos? ns-idx)\n               (subs token 0 ns-idx))]\n      (if-not (nil? ns)\n        (let [ns-idx (inc ns-idx)]\n          (when-not (== ns-idx (count token))\n            (let [sym (subs token ns-idx)]\n              (when (and (not (numeric? (nth sym 0)))\n                         (not (identical? \"\" sym))\n                         (false? (.test #\":$\" ns))\n                         (or (identical? sym \"/\")\n                             (== -1 (.indexOf sym \"/\"))))\n                [ns sym]))))\n        (when (or (identical? token \"/\")\n                  (== -1 (.indexOf token \"/\")))\n          [nil token])))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read-comment\n  [rdr & _]\n  (skip-line rdr))\n\n(defn throwing-reader\n  [msg]\n  (fn [rdr & _]\n    (reader-error rdr msg)))\n"]}