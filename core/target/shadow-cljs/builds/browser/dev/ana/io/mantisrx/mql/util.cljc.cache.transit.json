["^ ","~:output",["^ ","~:js","goog.provide('io.mantisrx.mql.util');\ngoog.require('cljs.core');\n/**\n * Extracts a sequence of a specific clause type from the provided parse tree.\n */\nio.mantisrx.mql.util.extract_clause = (function io$mantisrx$mql$util$extract_clause(clause,tree){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__31445_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__31445_SHARP_),clause);\n}),cljs.core.tree_seq(cljs.core.vector_QMARK_,cljs.core.rest,tree));\n});\nio.mantisrx.mql.util.ops__GT_clause_map = (function io$mantisrx$mql$util$ops__GT_clause_map(ops){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (op){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(op),new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881)),op], null);\n}),ops));\n});\n/**\n * Associates a value in a nested TreeMap using mutable behavior.\n * This function mimics the behavior of assoc-in and will create\n * new nested TreeMaps as necessary if nested levels do not exist.\n */\nio.mantisrx.mql.util.map_assoc_in_BANG_ = (function io$mantisrx$mql$util$map_assoc_in_BANG_(m,p__31464,v){\nvar vec__31465 = p__31464;\nvar seq__31466 = cljs.core.seq(vec__31465);\nvar first__31467 = cljs.core.first(seq__31466);\nvar seq__31466__$1 = cljs.core.next(seq__31466);\nvar k = first__31467;\nvar ks = seq__31466__$1;\nif(ks){\nm.put(k,(function (){var G__31468 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,k,(new java.util.TreeMap()));\nvar G__31469 = ks;\nvar G__31470 = v;\nreturn (io.mantisrx.mql.util.map_assoc_in_BANG_.cljs$core$IFn$_invoke$arity$3 ? io.mantisrx.mql.util.map_assoc_in_BANG_.cljs$core$IFn$_invoke$arity$3(G__31468,G__31469,G__31470) : io.mantisrx.mql.util.map_assoc_in_BANG_.call(null,G__31468,G__31469,G__31470));\n})());\n} else {\nm.put(k,v);\n}\n\nreturn m;\n});\n/**\n * A predicate determining if xs is a proper superset of ys.\n * Set theory dictates that a proper superset must not equal the set to which it compared.\n * Note that this function works on seqs, we're intentionally considering order.\n */\nio.mantisrx.mql.util.proper_superset_QMARK_ = (function io$mantisrx$mql$util$proper_superset_QMARK_(xs,ys){\nreturn ((cljs.core.count(xs) > cljs.core.count(ys))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.seq(cljs.core.take.cljs$core$IFn$_invoke$arity$2(cljs.core.count(ys),xs)),cljs.core.seq(ys)));\n});\n/**\n * Remove all elements in xs which have a proper subset in xs.\n */\nio.mantisrx.mql.util.simplify_select_list = (function io$mantisrx$mql$util$simplify_select_list(xs){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement((function (x){\nreturn cljs.core.some((function (p1__31476_SHARP_){\nreturn io.mantisrx.mql.util.proper_superset_QMARK_(x,p1__31476_SHARP_);\n}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(cljs.core.empty_QMARK_),xs));\n})),xs);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utility functions which do not quite belong in any other namespace."],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$io.mantisrx.mql.util","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^@","~$goog","^A"],"~:seen",["^9",[]],"~:uses",null,"~:require-macros",["^ ","^@","^@"],"~:form",["~#list",["~$ns","^;","Utility functions which do not quite belong in any other namespace."]],"~:js-deps",["^ "],"~:deps",["^A","^@"]],"^=","^;","~:resource-id",["~:shadow.build.classpath/resource","io/mantisrx/mql/util.cljc"],"~:compiled-at",1548711933585,"~:resource-name","io/mantisrx/mql/util.cljc","~:warnings",[],"~:source","(ns io.mantisrx.mql.util\n  \"Utility functions which do not quite belong in any other namespace.\"\n  #?(:clj (:import java.util.TreeMap)))\n\n(defn extract-clause\n  \"Extracts a sequence of a specific clause type from the provided parse tree.\"\n  [clause tree]\n  (filter #(= (first %) clause) (tree-seq vector? rest tree)))\n\n(defn\n  ops->clause-map\n  [ops]\n  (into {} (map (fn [op] [(get (meta op) :clause :unknown) op]) ops)))\n\n(defn map-assoc-in!\n  \"Associates a value in a nested TreeMap using mutable behavior.\n   This function mimics the behavior of assoc-in and will create\n   new nested TreeMaps as necessary if nested levels do not exist.\"\n  {:static true}\n  [m [k & ks] v]\n  (if ks\n    (.put ^java.util.Map m k (map-assoc-in! (get m k (java.util.TreeMap.)) ks v))\n    (.put ^java.util.Map m k v))\n  m)\n\n(defn proper-superset?\n  \"A predicate determining if xs is a proper superset of ys.\n   Set theory dictates that a proper superset must not equal the set to which it compared.\n   Note that this function works on seqs, we're intentionally considering order.\"\n  [xs ys]\n  (and\n    (> (count xs) (count ys))\n    (= (seq (take (count ys) xs)) (seq ys))))\n\n(defn\n  simplify-select-list\n  \"Remove all elements in xs which have a proper subset in xs.\"\n  [xs]\n  (filter\n    (complement (fn [x] (some #(proper-superset? x %) (filter (complement empty?) xs))))\n    xs))\n","~:reader-features",["^9",["~:cljs"]],"~:source-map",["^ ","~i4",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2],["^ ","^S",38,"^T",5],["^ ","^S",0,"^T",6]],"~i6",[["^ ","^S",0,"^T",5,"^:","io.mantisrx.mql.util/extract-clause"]]],"~i6",["^ ","~i3",[["^ ","^S",84,"^T",5,"^:","clause"]],"~i10",[["^ ","^S",91,"^T",5,"^:","tree"]]],"~i7",["^ ","~i2",[["^ ","^S",0,"^T",6],["^ ","^S",54,"^T",6],["^ ","^S",65,"^T",6,"^:","p1__31445#"],["^ ","^S",0,"^T",7]],"~i3",[["^ ","^S",7,"^T",6,"^:","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"~i11",[["^ ","^S",0,"^T",7]],"~i12",[["^ ","^S",7,"^T",7,"^:","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i14",[["^ ","^S",52,"^T",7],["^ ","^S",68,"^T",7,"^:","p1__31445#"]],"~i15",[["^ ","^S",52,"^T",7,"^:","cljs.core/first"]],"~i24",[["^ ","^S",86,"^T",7,"^:","clause"]],"~i32",[["^ ","^S",3,"^T",8]],"~i33",[["^ ","^S",3,"^T",8,"^:","cljs.core/tree-seq"]],"~i42",[["^ ","^S",22,"^T",8,"^:","cljs.core/vector?"]],"~i50",[["^ ","^S",46,"^T",8,"^:","cljs.core/rest"]],"~i55",[["^ ","^S",61,"^T",8,"^:","tree"]]],"~i9",["^ ","~i0",[["^ ","^S",0,"^T",10],["^ ","^S",42,"^T",10],["^ ","^S",0,"^T",11]]],"^U",["^ ","~i2",[["^ ","^S",0,"^T",10,"^:","io.mantisrx.mql.util/ops->clause-map"]]],"^V",["^ ","~i3",[["^ ","^S",92,"^T",10,"^:","ops"]]],"^W",["^ ","~i2",[["^ ","^S",0,"^T",11],["^ ","^S",52,"^T",11]],"~i3",[["^ ","^S",7,"^T",11,"^:","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^V",[["^ ","^S",87,"^T",11]],"^W",[["^ ","^S",87,"^T",11,"^:","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"~i16",[["^ ","^S",131,"^T",11],["^ ","^S",0,"^T",12],["^ ","^S",0,"^T",12]],"~i21",[["^ ","^S",142,"^T",11,"^:","op"]],"~i26",[["^ ","^S",90,"^T",12],["^ ","^S",153,"^T",12],["^ ","^S",210,"^T",12]],"~i27",[["^ ","^S",90,"^T",12,"^:","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"~i31",[["^ ","^S",134,"^T",12]],"^[",[["^ ","^S",134,"^T",12,"^:","cljs.core/meta"]],"~i37",[["^ ","^S",149,"^T",12,"^:","op"]],"~i59",[["^ ","^S",270,"^T",12,"^:","op"]],"~i64",[["^ ","^S",3,"^T",13,"^:","ops"]]],"^X",["^ ","~i0",[["^ ","^S",0,"^T",15],["^ ","^S",42,"^T",20],["^ ","^S",94,"^T",20,"^:","p__31464"],["^ ","^S",0,"^T",21],["^ ","^S",0,"^T",21],["^ ","^S",4,"^T",21,"^:","vec__31465"],["^ ","^S",17,"^T",21,"^:","p__31464"],["^ ","^S",4,"^T",22,"^:","seq__31466"],["^ ","^S",17,"^T",22],["^ ","^S",17,"^T",22,"^:","cljs.core/seq"],["^ ","^S",31,"^T",22,"^:","vec__31465"],["^ ","^S",4,"^T",23,"^:","first__31467"],["^ ","^S",19,"^T",23],["^ ","^S",19,"^T",23,"^:","cljs.core/first"],["^ ","^S",35,"^T",23,"^:","seq__31466"],["^ ","^S",4,"^T",24,"^:","seq__31466"],["^ ","^S",21,"^T",24],["^ ","^S",21,"^T",24,"^:","cljs.core/next"],["^ ","^S",36,"^T",24,"^:","seq__31466"],["^ ","^S",8,"^T",25,"^:","first__31467"],["^ ","^S",9,"^T",26,"^:","seq__31466"],["^ ","^S",0,"^T",27]],"~i6",[["^ ","^S",0,"^T",20,"^:","io.mantisrx.mql.util/map-assoc-in!"]]],"~i19",["^ ","~i3",[["^ ","^S",92,"^T",20,"^:","m"]],"~i6",[["^ ","^S",4,"^T",25,"^:","k"]],"^U",[["^ ","^S",4,"^T",26,"^:","ks"]],"^X",[["^ ","^S",103,"^T",20,"^:","v"]]],"~i20",["^ ","~i2",[["^ ","^S",0,"^T",27]],"~i6",[["^ ","^S",3,"^T",27,"^:","ks"]]],"^15",["^ ","~i4",[["^ ","^S",0,"^T",28]],"~i25",[["^ ","^S",0,"^T",28,"^:","m"]],"^17",[["^ ","^S",6,"^T",28,"^:","k"]],"~i29",[["^ ","^S",8,"^T",28],["^ ","^S",25,"^T",28,"^:","G__31468"],["^ ","^S",4,"^T",29,"^:","G__31469"],["^ ","^S",4,"^T",30,"^:","G__31470"],["^ ","^S",0,"^T",31],["^ ","^S",0,"^T",31],["^ ","^S",150,"^T",31,"^:","G__31468"],["^ ","^S",159,"^T",31,"^:","G__31469"],["^ ","^S",168,"^T",31,"^:","G__31470"],["^ ","^S",230,"^T",31,"^:","G__31468"],["^ ","^S",239,"^T",31,"^:","G__31469"],["^ ","^S",248,"^T",31,"^:","G__31470"]],"~i30",[["^ ","^S",8,"^T",31,"^:","io.mantisrx.mql.util/map-assoc-in!"],["^ ","^S",80,"^T",31,"^:","io.mantisrx.mql.util/map-assoc-in!"],["^ ","^S",180,"^T",31,"^:","io.mantisrx.mql.util/map-assoc-in!"]],"~i44",[["^ ","^S",36,"^T",28]],"~i45",[["^ ","^S",36,"^T",28,"^:","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"~i49",[["^ ","^S",80,"^T",28,"^:","m"]],"~i51",[["^ ","^S",82,"^T",28,"^:","k"]],"~i53",[["^ ","^S",84,"^T",28],["^ ","^S",89,"^T",28,"^:","java/util.TreeMap"]],"~i75",[["^ ","^S",15,"^T",29,"^:","ks"]],"~i78",[["^ ","^S",15,"^T",30,"^:","v"]]],"~i22",["^ ","~i4",[["^ ","^S",0,"^T",34]],"^1>",[["^ ","^S",0,"^T",34,"^:","m"]],"^17",[["^ ","^S",6,"^T",34,"^:","k"]],"^1?",[["^ ","^S",8,"^T",34,"^:","v"]]],"~i23",["^ ","~i2",[["^ ","^S",0,"^T",37,"^:","m"]]],"^1>",["^ ","~i0",[["^ ","^S",0,"^T",39],["^ ","^S",46,"^T",44],["^ ","^S",0,"^T",45]],"~i6",[["^ ","^S",0,"^T",44,"^:","io.mantisrx.mql.util/proper-superset?"]]],"^1?",["^ ","~i3",[["^ ","^S",100,"^T",44,"^:","xs"]],"~i6",[["^ ","^S",103,"^T",44,"^:","ys"]]],"^1@",["^ ","~i2",[["^ ","^S",0,"^T",45]]],"^18",["^ ","~i4",[["^ ","^S",8,"^T",45]],"~i7",[["^ ","^S",9,"^T",45]],"~i8",[["^ ","^S",9,"^T",45,"^:","cljs.core/count"]],"^X",[["^ ","^S",25,"^T",45,"^:","xs"]],"~i18",[["^ ","^S",31,"^T",45]],"^1<",[["^ ","^S",31,"^T",45,"^:","cljs.core/count"]],"^1>",[["^ ","^S",47,"^T",45,"^:","ys"]]],"^[",["^ ","~i4",[["^ ","^S",57,"^T",45]],"~i5",[["^ ","^S",57,"^T",45,"^:","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i7",[["^ ","^S",102,"^T",45]],"~i8",[["^ ","^S",102,"^T",45,"^:","cljs.core/seq"]],"^W",[["^ ","^S",116,"^T",45]],"~i13",[["^ ","^S",116,"^T",45,"^:","cljs.core.take.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^S",161,"^T",45]],"^1<",[["^ ","^S",161,"^T",45,"^:","cljs.core/count"]],"^1>",[["^ ","^S",177,"^T",45,"^:","ys"]],"^1?",[["^ ","^S",181,"^T",45,"^:","xs"]],"~i34",[["^ ","^S",186,"^T",45]],"~i35",[["^ ","^S",186,"^T",45,"^:","cljs.core/seq"]],"~i39",[["^ ","^S",200,"^T",45,"^:","ys"]]],"^1L",["^ ","~i0",[["^ ","^S",0,"^T",47],["^ ","^S",44,"^T",50],["^ ","^S",0,"^T",51]]],"^1M",["^ ","~i2",[["^ ","^S",0,"^T",50,"^:","io.mantisrx.mql.util/simplify-select-list"]]],"^19",["^ ","~i3",[["^ ","^S",96,"^T",50,"^:","xs"]]],"~i38",["^ ","~i2",[["^ ","^S",0,"^T",51]],"~i3",[["^ ","^S",7,"^T",51,"^:","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]]],"^1N",["^ ","~i4",[["^ ","^S",54,"^T",51]],"~i5",[["^ ","^S",54,"^T",51,"^:","cljs.core/complement"]],"^14",[["^ ","^S",75,"^T",51],["^ ","^S",0,"^T",52]],"^15",[["^ ","^S",86,"^T",51,"^:","x"]],"^Z",[["^ ","^S",0,"^T",52],["^ ","^S",22,"^T",52],["^ ","^S",33,"^T",52,"^:","p1__31476#"],["^ ","^S",0,"^T",53]],"^1>",[["^ ","^S",7,"^T",52,"^:","cljs.core/some"]],"^18",[["^ ","^S",0,"^T",53],["^ ","^S",53,"^T",53,"^:","p1__31476#"]],"^[",[["^ ","^S",7,"^T",53,"^:","io.mantisrx.mql.util/proper-superset?"]],"^1C",[["^ ","^S",51,"^T",53,"^:","x"]],"~i54",[["^ ","^S",3,"^T",54]],"^13",[["^ ","^S",3,"^T",54,"^:","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"~i62",[["^ ","^S",50,"^T",54]],"~i63",[["^ ","^S",50,"^T",54,"^:","cljs.core/complement"]],"~i74",[["^ ","^S",71,"^T",54,"^:","cljs.core/empty?"]],"~i82",[["^ ","^S",95,"^T",54,"^:","xs"]]],"~i40",["^ ","~i4",[["^ ","^S",4,"^T",55,"^:","xs"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^@"],1516731430000,["^K","goog/math/math.js"],1516731431000,["^K","goog/array/array.js"],1516731431000,["^K","goog/debug/error.js"],1516731431000,["^K","goog/dom/nodetype.js"],1516731431000,["^K","goog/object/object.js"],1516731431000,"~:SHADOW-TIMESTAMP",1516731432000,["^K","goog/math/long.js"],1516731431000,["^K","goog/functions/functions.js"],1516731431000,["^K","goog/structs/map.js"],1516731431000,["^K","goog/asserts/asserts.js"],1516731431000,["^K","goog/uri/uri.js"],1516731431000,["^K","goog/base.js"],1516731431000,["^K","goog/structs/structs.js"],1516731431000,["^K","goog/string/string.js"],1516731431000,["^K","goog/reflect/reflect.js"],1516731431000,["^K","goog/string/stringbuffer.js"],1516731431000,["^K","goog/iter/iter.js"],1516731431000,["^K","io/mantisrx/mql/util.cljc"],[1526321141000],["^K","cljs/core.cljs"],1516731430000,["^K","goog/math/integer.js"],1516731431000,["^K","goog/uri/utils.js"],1516731431000]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utility functions which do not quite belong in any other namespace."],"^7",null,"^8",["^9",[]],"^:","^;","^>",null,"^?",["^ ","^@","^@","^A","^A"],"^B",["^9",[]],"^C",null,"~:defs",["^ ","~$extract-clause",["^ ","~:protocol-inline",null,"^5",["^ ","~:file","io/mantisrx/mql/util.cljc","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",21,"~:arglists",["^F",["~$quote",["^F",[["~$clause","~$tree"]]]]],"^6","Extracts a sequence of a specific clause type from the provided parse tree."],"^:","~$io.mantisrx.mql.util/extract-clause","~:variadic",false,"^23","io/mantisrx/mql/util.cljc","^27",21,"~:method-params",["^F",[["^2:","^2;"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^25",1,"^24",5,"^26",5,"~:max-fixed-arity",2,"~:fn-var",true,"^28",["^F",["^29",["^F",[["^2:","^2;"]]]]],"^6","Extracts a sequence of a specific clause type from the provided parse tree."],"~$ops->clause-map",["^ ","^22",null,"^5",["^ ","^23","io/mantisrx/mql/util.cljc","^24",11,"^25",3,"^26",11,"^27",18,"^28",["^F",["^29",["^F",[["~$ops"]]]]]],"^:","~$io.mantisrx.mql.util/ops->clause-map","^2=",false,"^23","io/mantisrx/mql/util.cljc","^27",18,"^2>",["^F",[["^2D"]]],"^2?",null,"^2@",["^F",[null,null]],"^25",1,"^24",10,"^26",11,"^2A",1,"^2B",true,"^28",["^F",["^29",["^F",[["^2D"]]]]]],"~$map-assoc-in!",["^ ","^22",null,"^5",["^ ","^23","io/mantisrx/mql/util.cljc","^24",15,"^25",7,"^26",15,"^27",20,"^28",["^F",["^29",["^F",[["~$m",["~$k","~$&","~$ks"],"~$v"]]]]],"^6","Associates a value in a nested TreeMap using mutable behavior.\n   This function mimics the behavior of assoc-in and will create\n   new nested TreeMaps as necessary if nested levels do not exist.","~:static",true],"^:","~$io.mantisrx.mql.util/map-assoc-in!","^2=",false,"^23","io/mantisrx/mql/util.cljc","^27",20,"^2H",true,"^2>",["^F",[["~$m","~$p__31464","~$v"]]],"^2?",null,"^2@",["^F",[null,null]],"^25",1,"^24",15,"^26",15,"^2A",3,"^2B",true,"^28",["^F",["^29",["^F",[["~$m",["~$k","~$&","^2G"],"~$v"]]]]],"^6","Associates a value in a nested TreeMap using mutable behavior.\n   This function mimics the behavior of assoc-in and will create\n   new nested TreeMaps as necessary if nested levels do not exist."],"~$proper-superset?",["^ ","^22",null,"^5",["^ ","^23","io/mantisrx/mql/util.cljc","^24",26,"^25",7,"^26",26,"^27",23,"^28",["^F",["^29",["^F",[["~$xs","~$ys"]]]]],"^6","A predicate determining if xs is a proper superset of ys.\n   Set theory dictates that a proper superset must not equal the set to which it compared.\n   Note that this function works on seqs, we're intentionally considering order."],"^:","~$io.mantisrx.mql.util/proper-superset?","^2=",false,"^23","io/mantisrx/mql/util.cljc","^27",23,"^2>",["^F",[["^2L","^2M"]]],"^2?",null,"^2@",["^F",[null,null]],"^25",1,"^24",26,"^26",26,"^2A",2,"^2B",true,"^28",["^F",["^29",["^F",[["^2L","^2M"]]]]],"^6","A predicate determining if xs is a proper superset of ys.\n   Set theory dictates that a proper superset must not equal the set to which it compared.\n   Note that this function works on seqs, we're intentionally considering order."],"~$simplify-select-list",["^ ","^22",null,"^5",["^ ","^23","io/mantisrx/mql/util.cljc","^24",36,"^25",3,"^26",36,"^27",23,"^28",["^F",["^29",["^F",[["^2L"]]]]],"^6","Remove all elements in xs which have a proper subset in xs."],"^:","~$io.mantisrx.mql.util/simplify-select-list","^2=",false,"^23","io/mantisrx/mql/util.cljc","^27",23,"^2>",["^F",[["^2L"]]],"^2?",null,"^2@",["^F",[null,null]],"^25",1,"^24",35,"^26",36,"^2A",1,"^2B",true,"^28",["^F",["^29",["^F",[["^2L"]]]]],"^6","Remove all elements in xs which have a proper subset in xs."]],"^D",["^ ","^@","^@"],"~:cljs.analyzer/constants",["^ ","^B",["^9",["~:unknown","~:clause"]],"~:order",["^2S","^2R"]],"^H",["^ "],"^I",["^A","^@"]],"^=","^;","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1X",[["^2W","~:static-fns"],true,["^2W","~:elide-asserts"],false,["^2W","~:optimize-constants"],null,["^2W","~:emit-constants"],null,["^2W","~:infer-externs"],true,["^2W","^P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2W","~:fn-invoke-direct"],null,["^2W","^R"],"/dev/null"]]]